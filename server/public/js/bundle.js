(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.data = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var utils = require('./utils');
var nx = require('notatrix');

var CollaborationInterface = require('./collaboration');
var config = require('./config');
var Corpus = require('./corpus');
var Graph = require('./graph');
var GUI = require('./gui');
var Server = require('./server');
var Socket = require('./socket');
var UndoManager = require('./undo-manager');

var App = function () {
    function App() {
        var _this = this;

        _classCallCheck(this, App);

        this.config = config;
        this.constructors = {

            CollaborationInterface: CollaborationInterface,
            Corpus: Corpus,
            Graph: Graph,
            GUI: GUI,
            nx: nx,
            Server: Server,
            Socket: Socket,
            UndoManager: UndoManager

        };

        this.initialized = false;
        this.undoer = new UndoManager(this);
        this.server = new Server(this);
        this.socket = new Socket(this);
        this.gui = new GUI(this);
        this.collab = new CollaborationInterface(this);
        this.corpus = new Corpus(this);
        this.graph = new Graph(this);
        this.initialized = true;

        // jump to sentence from frag id
        setTimeout(function () {

            var hash = window.location.hash.substring(1);
            _this.corpus.index = parseInt(hash) - 1;
        }, 500);

        this.server.connect();
        this.socket.connect();
        this.gui.refresh();
    }

    _createClass(App, [{
        key: 'save',
        value: function save(message) {

            if (!this.initialized || this.undoer.active) return;

            this.gui.status.normal('saving...');

            // save local preference stuff
            this.gui.save();
            this.graph.save();

            // serialize the corpus
            var serial = this.corpus.serialize();

            // add it to the undo/redo stack if it's an actual change
            this.undoer.push(serial);

            if (message) this.socket.broadcast('modify corpus', {
                type: message.type,
                indices: message.indices,
                serial: serial
            });

            // save it to server/local
            if (this.server.is_running) {
                this.server.save(serial);
            } else {
                utils.storage.save(serial);
            }

            // refresh the gui stuff
            this.gui.refresh();
        }
    }, {
        key: 'load',
        value: function load(serial) {

            //this.gui.status.normal('loading...')
            this.corpus = new Corpus(this, serial);
            this.gui.refresh();
        }
    }, {
        key: 'discard',
        value: function discard() {

            this.corpus = new Corpus(this);
            this.save();
            this.gui.menu.is_visible = false;
            this.gui.refresh();
        }
    }, {
        key: 'download',
        value: function download() {
            var _this2 = this;

            var contents = this.corpus._corpus._sentences.map(function (sent, i) {
                try {
                    return sent.to(_this2.corpus.format).output;
                } catch (e) {
                    console.error(e);
                    return '[Unable to generate sentence #' + (i + 1) + ' in "' + _this2.corpus.format + '" format]';
                }
            }).join('\n\n');

            utils.download(this.corpus.filename + '.corpus', 'text/plain', contents);
        }
    }]);

    return App;
}();

module.exports = App;

},{"./collaboration":2,"./config":4,"./corpus":5,"./graph":9,"./gui":15,"./server":27,"./socket":28,"./undo-manager":29,"./utils":32,"notatrix":461,"underscore":502}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var utils = require('../utils');
var User = require('./user');

/**
 * Abstraction to help with handling multiple users collaborating on a document.
 *  This module takes care of maintaining:
 *  - the current user
 *  - a list of all current users on this document
 *  - methods for getting the mice and locks for those users
 *
 * @param {App} app a reference to the parent of this module
 */

var CollaborationInterface = function () {
  function CollaborationInterface(app) {
    _classCallCheck(this, CollaborationInterface);

    this.app = app;

    // pointer to data about the current user
    this.self = null;

    // cache a pointer to the chat (since we use it often)
    this.chat = app.gui.chat;

    // a list of users on this document
    this._users = {};
  }

  /**
   * Return the number of online users.
   *
   * @return {Number}
   */


  _createClass(CollaborationInterface, [{
    key: 'setSelf',


    /**
     * Save data about the current user.  This method is called after we establish
     *  a connection with our socket server.
     *
     * @param {Object} data
     */
    value: function setSelf(data) {
      var _this = this;

      // make a User object from the data
      var self = new User(data);
      self.name = self.name === 'anonymous' ? 'me' : self.name;

      // don't overwrite if already set
      if (JSON.stringify(self) === JSON.stringify(this.self)) return;

      // iterate over all the users in the room and add them (this way, even
      //  connections that aren't the first will have an accurate list)
      _.each(data.room.users, function (user) {
        _this.addUser(user, user.id !== self.id);
      });

      // save the reference
      this.self = self;

      // log it to the chat
      this.chat.alert('you are logged in as %u', [self]);

      // draw the mice and locks for everyone in the room
      this.app.graph.drawMice();
      this.app.graph.setLocks();
    }

    /**
     * Get a User object by <id>.
     *
     * @param {String} id
     * @return {User}
     */

  }, {
    key: 'getUser',
    value: function getUser(id) {
      return this._users[id];
    }

    /**
     * Add a User to our list.
     *
     * @param {Object} data the data to pass on to the User constructor
     * @param {Boolean} alert (optional, default=true) whether we should log to chat
     */

  }, {
    key: 'addUser',
    value: function addUser(data) {
      var alert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      var user = new User(data);
      this._users[data.id] = user;

      if (alert) this.chat.alert('%u connected from ' + user.ip, [user]);

      this.chat.refresh();
    }

    /**
     * Remove a User from our list.
     *
     * @param {Object} data the data get the User by
     * @param {Boolean} alert (optional, default=true) whether we should log to chat
     */

  }, {
    key: 'removeUser',
    value: function removeUser(data) {
      var alert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      var user = this.getUser(data.id);
      delete this._users[data.id];

      if (alert) this.chat.alert('%u disconnected from ' + user.ip, [user]);

      this.chat.refresh();
    }

    /**
     * Get a list of mouse nodes (each with a user id, position (x & y coords), and
     *  hex color code), at most one per user.  Mice are only shown for users on
     *  the same page (i.e. same corpus index) as this.self.
     *
     * @return {Array} [{ id: String, position: { x: Number, y: Number }, color: String }]
     */

  }, {
    key: 'getMouseNodes',
    value: function getMouseNodes() {
      var _this2 = this;

      // map over the users
      return _.map(this._users, function (user) {

        // if not self and on same index
        if (user.id !== _this2.self.id && user._viewing === _this2.app.corpus.index)

          // return some info
          return {
            id: user.id,
            position: user.mouse,
            color: user.color
          };

        // filter out things that didn't match our condition
      }).filter(utils.thin);
    }

    /**
     * Get a list of node locks (each with a user id, cytoscape selector, and
     *  hex color code), at most one per user.  Locks are only shown for users on
     *  the same page (i.e. same corpus index) as this.self.
     *
     * @return {Array} [{ id: String, locked: String, color: String }]
     */

  }, {
    key: 'getLocks',
    value: function getLocks() {
      var _this3 = this;

      // map over the users
      return _.map(this._users, function (user) {

        // if not self and on same index and locking something
        if (user.id !== _this3.self.id && user._viewing === _this3.app.corpus.index && user.locked)

          // return some info
          return {
            id: user.id,
            locked: user.locked,
            color: user.color
          };

        // filter out things that didn't match our condition
      }).filter(utils.thin);
    }
  }, {
    key: 'size',
    get: function get() {
      return Object.keys(this._users).length;
    }
  }]);

  return CollaborationInterface;
}();

module.exports = CollaborationInterface;

},{"../utils":32,"./user":3,"underscore":502}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');
var utils = require('../utils');
var nx = require('notatrix');

/**
 * Data structure to keep track of state and methods associated with a particular
 *  socket connection.
 *
 * NB: the data parameter should contain
 *  - username (optional): the GitHub account associated with this connection
 *  - id: user identifier, shared with the server
 *  - address: IP Address of the connection
 *  - index: the corpus index on this user's page
 *  - mouse: the x, y coordinates of the user's mouse (within #cy)
 *  - locked: a cytoscape selector to locate the node currently being edited
 *
 * @param {Object} data
 */

var User = function () {
  function User(data) {
    _classCallCheck(this, User);

    this.name = data.username || 'anonymous';
    this.id = data.id;
    this.ip = data.address;
    this.color = nx.funcs.hashStringToHex(data.id);

    this._viewing = data.index;
    this.mouse = data.mouse;
    this.locked = data.locked;
  }

  /**
   * Helper function for `this::dom`, gives the index-part associated with a
   *  user in #chat.
   *
   * @return {String}
   */


  _createClass(User, [{
    key: 'setMouse',


    /**
     * Wrapper for setting the mosue position of the user.  Sanitizes input.
     *
     * @param {Object} pos { x: Number, y: Number }
     */
    value: function setMouse(pos) {
      // if x and y not both given, don't save it
      this.mouse = pos.x == null && pos.y == null ? null : pos;
    }

    /**
     * Get a DOM object containing some of the user's data (this gets rendered in #chat)
     *
     * NB: this looks a bit messy, but it should have this structure:
     *  <span class="message-sender-info" name="{ id }">
     *    <i class="message-color-blob fa fa-circle" style="color: #{ color };" />
     *    <span class="message-sender-name" title="IP Address: { ip }">
     *      { name }
     *    </span>
     *    <span class="message-sender-viewing" title="Currently viewing">
     *      { viewing }
     *    </span>
     *  </span>
     *
     * @return {HTMLElement}
     */

  }, {
    key: 'dom',
    value: function dom() {
      return $('<span>').addClass('message-sender-info').attr('name', this.id).append($('<i>').addClass('message-color-blob fa fa-circle').css('color', '#' + this.color)).append($('<span>').addClass('message-sender-name').text(this.name).attr('title', 'IP Address: ' + this.ip)).append($('<span>').addClass('message-sender-viewing').text(this.viewing).attr('title', 'Currently viewing'));
    }
  }, {
    key: 'viewing',
    get: function get() {
      return this._viewing === null ? '' : ' (' + (this._viewing + 1) + ') ';
    }

    /**
     * Wrapper for setting the corpus index of the user.  Sanitizes input.
     *
     * @param {Number} index
     */
    ,
    set: function set(index) {
      index = parseInt(index);
      this._viewing = isNaN(index) ? null : index;
    }
  }]);

  return User;
}();

module.exports = User;

},{"../utils":32,"jquery":393,"notatrix":461,"underscore":502}],4:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var utils = require('./utils');

var _config = {

	version: '0.0.0',
	treebank_id: utils.getTreebankId(),

	graph: require('./graph/config'),
	gui: require('./gui/config')

};

var prefs = utils.storage.getPrefs();

module.exports = _config;

},{"./graph/config":6,"./gui/config":13,"./utils":32,"underscore":502}],5:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var nx = require('notatrix');
var utils = require('./utils');

// for when we're editing a corpus that isn't from /upload
var default_filename = 'ud-annotatrix-corpus';

// use these formats in order in case of ambiguity (rare)
var format_preferences = ['CoNLL-U', 'CG3', 'SD', 'plain text', 'Brackets'];

/**
 * Helper function for Corpus.  Attempts to detect the format of a given serial
 *  string/object.  If it can't detect one, it returns null.  If it detects one
 *  or more, it follows a simple resolution algorithm to pick one.
 *
 * @param {(String|Object)} serial
 * @return {(String|null)} the string name of the detected format
 */
function detectFormat(serial) {

  // do the detecting under the hood
  var formats = serial ? nx.detect(serial) : ['plain text'];

  // check if we found nothing
  if (formats.length === 0) return null;

  // or found something lossless
  if (formats.indexOf('notatrix serial') > -1) return 'notatrix serial';

  // or found just one thing
  if (formats.length === 1) return formats[0];

  // or found one of the formats we like
  format_preferences.forEach(function (pref) {

    if (formats.indexOf(pref) > -1) return pref;
  });

  // just take whatever's left (safety valve, hopefully never hit this case)
  return formats[0];
}

/**
 * Abstraction over the nx.Corpus to handle some extra metadata (filename, text
 *  direction, filename) and interfacing with our other modules.
 *
 * @param {App} app a reference to the parent of this module
 * @param {(String|Object)} serial a serial representation of an nx.Corpus in any format
 */

var Corpus = function () {
  function Corpus(app) {
    var serial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, Corpus);

    // save a reference to the parent
    this.app = app;

    // get the nx.Corpus data structure (with some corpus-wide metadata)
    this._corpus = serial ? nx.Corpus.deserialize(serial) : new nx.Corpus();
    this._corpus._meta = _.defaults(this._corpus._meta, {

      filename: default_filename,
      is_ltr: true,
      is_vertical: false

    });

    // add some metadata
    this._corpus._sentences.forEach(function (sent, i) {
      sent._meta.format = detectFormat(sent.input);
    });

    // make sure we always have at least one sentence
    if (this._corpus.length === 0) this.insertSentence(0, '', false);

    // keep undo stack up to date
    this.app.undoer.current = this.serialize();

    // update hash
    this.afterModifyIndex();
  }

  // ---------------------------------------------------------------------------
  // Getters & Setters for corpus- and sentence-wide metadata

  /**
   * Get the format of the current sentence.  If the sentence is not fully parsed,
   *  then we return null.
   *
   * NB: this will never return 'notatrix serial' as the format, even if this was
   *  most recent serial string given (because we never want the user to see this
   *  format, which is what we send over the wire).
   *
   * @return {(String|null)}
   */


  _createClass(Corpus, [{
    key: 'getIndices',


    /**
     * Returns the two values that we should set to tell the user what our current
     *  index is. (current -> #current-sentence, total -> #total-sentences).
     *
     * @return {Object} { current: Number, total: String }
     */
    value: function getIndices() {

      // the label filter
      var filtered = this._corpus.filtered;

      return {
        current: this.index + 1,
        total: filtered.length ? filtered.length + ' (total: ' + this.length + ')' : '' + this.length
      };
    }

    // ---------------------------------------------------------------------------
    // General helper functions

    /**
     * Get a serial representation of the nx.Corpus (useful for saving/sending
     *  over the wire).
     *
     * @return {Object}
     */

  }, {
    key: 'serialize',
    value: function serialize() {
      return this._corpus.serialize();
    }

    /**
     * Checks whether the current sentence is parsed
     *
     * @return {Boolean}
     */

  }, {
    key: 'convertTo',


    /**
     * Get a representation of the current sentence in <format>, ignoring lossiness.
     *  NB: this function *should* not throw errors because we already check if a
     *  given conversion will throw errors (in `gui/textarea.js::refresh`)
     *
     * @param {String} format
     * @return {String}
     */
    value: function convertTo(format) {
      return this.current.to(format).output;
    }

    /**
     * Helper function to handle broadcasting index modifications and hash updates.
     *  NB: internal only.
     */

  }, {
    key: 'afterModifyIndex',
    value: function afterModifyIndex() {
      var _this = this;

      // possibly update the view and send something over the wire
      if (this.app.initialized) {
        this.app.gui.refresh();
        this.app.socket.broadcast('modify index', this.index);
      }

      // update the fragment identifier (the stuff after '#' in the url)
      if (utils.check_if_browser()) setTimeout(function () {
        window.location.hash = _this.index + 1;
      }, 1000);
    }

    // ---------------------------------------------------------------------------
    // Wrappers for nx.Corpus methods

    /**
     * Returns the number of sentences in the corpus
     *
     * @return {Number}
     */

  }, {
    key: 'first',


    /**
     * Navigate to the first sentence.
     */
    value: function first() {
      this._corpus.first();
      this.afterModifyIndex();
    }

    /**
     * Decrement the current index if possible, otherwise do nothing.
     */

  }, {
    key: 'prev',
    value: function prev() {
      this._corpus.prev();
      this.afterModifyIndex();
    }

    /**
     * Increment the current index if possible, otherwise do nothing.
     */

  }, {
    key: 'next',
    value: function next() {
      this._corpus.next();
      this.afterModifyIndex();
    }

    /**
     * Navigate to the last sentence.
     */

  }, {
    key: 'last',
    value: function last() {
      this._corpus.last();
      this.afterModifyIndex();
    }

    /**
     * Get the nx.Sentence at <index>.
     *
     * @param {Number} index
     * @return {(nx.Sentence|null)}
     */

  }, {
    key: 'getSentence',
    value: function getSentence(index) {
      return this._corpus.getSentence(index);
    }

    /**
     * Set a serial value for the nx.Sentence at <index>.
     *
     * @param {Number} index
     * @param {(String|Object)} text
     * @param {Boolean} main whether or not to broadcast updates
     * @return {nx.Sentence}
     */

  }, {
    key: 'setSentence',
    value: function setSentence(index, text) {
      var main = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;


      // do the work under the hood
      var sent = this._corpus.setSentence(index, text);

      // add some metadata
      sent._meta.format = detectFormat(text);

      // maybe broadcast stuff
      if (main) {
        this.app.save({
          type: 'set',
          indices: [index || this.index]
        });
        this.afterModifyIndex();
      }

      // return the affected guy
      return sent;
    }

    /**
     * Insert an nx.Sentence (with serial value <text>) after <index>.
     *
     * @param {Number} index
     * @param {(String|Object)} text
     * @param {Boolean} main whether or not to broadcast updates
     * @return {nx.Sentence}
     */

  }, {
    key: 'insertSentence',
    value: function insertSentence(index, text) {
      var main = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;


      // do the work under the hood
      var sent = this._corpus.insertSentence(index, text);

      // add some metadata
      sent._meta.format = detectFormat(text);

      // maybe broadcast stuff
      if (main) {
        this.app.save({
          type: 'insert',
          indices: [index || this.index]
        });
        this.afterModifyIndex();
      }

      // return the new guy
      return sent;
    }

    /**
     * Remove the nx.Sentence at <index>.
     *
     * @param {Number} index
     * @param {Boolean} main whether or not to broadcast updates
     * @return {nx.Sentence}
     */

  }, {
    key: 'removeSentence',
    value: function removeSentence(index) {
      var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      // do the work under the hood
      var sent = this._corpus.removeSentence(index);

      // maybe broadcast stuff
      if (main) {
        this.app.save({
          type: 'remove',
          indices: [index || this.index]
        });
        this.afterModifyIndex();
      }

      // return the removed guy
      return sent;
    }

    /**
     * Split the incoming text (on double newlines or punctuation).  The first
     *  item will overwrite the current sentence, with sentences inserted seqntially
     *  thereafter.
     *
     * @param {(String|Object)} text
     * @param {Boolean} main whether or not to broadcast updates
     * @return {nx.Sentence}
     */

  }, {
    key: 'parse',
    value: function parse(text) {
      var _this2 = this;

      var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;


      // split under the hood
      var splitted = nx.split(text, this._corpus.options);

      // get the index to start at
      var index = this.index || 0;

      // iterate over all the pieces, get a list of affected indices
      var sents = splitted.map(function (split, i) {

        if (i) {
          // insert *after* the first one
          _this2.insertSentence(index + i, split, false);
        } else {
          // overwrite the first  one
          _this2.setSentence(index, split, false);
        }

        return index + i;
      });

      // maybe broadcast stuff
      if (main) {
        this.app.save({
          type: 'parse',
          indices: [index || this.index]
        });
        this.afterModifyIndex();
      }

      // return the indices of the affected guys
      return sents;
    }
  }, {
    key: 'format',
    get: function get() {

      // if not parsed, format is always null
      return this.isParsed ? this.current._meta.format === 'notatrix serial' ? 'plain text' : this.current._meta.format : null;
    }

    /**
     * Set the format of the current sentence (internal, not sanitized).
     *
     * @param {String} format
     */
    ,
    set: function set(format) {
      this.current._meta.format = format;
    }

    /**
     * Get whether the corpus orientation is Left-to-Right (important for the Graph).
     *
     * @return {Boolean}
     */

  }, {
    key: 'is_ltr',
    get: function get() {
      return this._corpus._meta.is_ltr;
    }

    /**
     * Set whether the corpus orientation is Left-to-Right (important for the Graph).
     *
     * @param {Boolean} bool
     */
    ,
    set: function set(bool) {
      this._corpus._meta.is_ltr = bool;
    }

    /**
     * Get whether the corpus orientation is Top-to-Bottom (important for the Graph).
     *
     * @return {Boolean}
     */

  }, {
    key: 'is_vertical',
    get: function get() {
      return this._corpus._meta.is_vertical;
    }

    /**
     * Set whether the corpus orientation is Top-to-Bottom (important for the Graph).
     *
     * @param {Boolean} bool
     */
    ,
    set: function set(bool) {
      this._corpus._meta.is_vertical = bool;
    }

    /**
     * Get whether the corpus is in 'enhanced' mode (i.e. should display and allow
     *  us to add multiple heads for each token).
     *
     * @return {Boolean}
     */

  }, {
    key: 'is_enhanced',
    get: function get() {
      return this.current.options.enhanced;
    }

    /**
     * Get the filename associated with the corpus.
     *
     * @return {String}
     */

  }, {
    key: 'filename',
    get: function get() {
      return this._corpus._meta.filename;
    }

    /**
     * Set the filename associated with the corpus.
     *
     * @param {String} filename
     */
    ,
    set: function set(filename) {
      this._corpus._meta.filename = filename;
    }

    // ---------------------------------------------------------------------------
    // Helper functions for the GUI sentence navigation

    /**
     * Returns the string that we should set as the val() of #text-data
     *
     * @return {String}
     */

  }, {
    key: 'textdata',
    get: function get() {

      return this.isParsed ? this.convertTo(this.format) : this.current.input.replace(/\\n/g, '\n').replace(/\\t/g, '\t');
    }
  }, {
    key: 'isParsed',
    get: function get() {
      return this.current ? this.current.isParsed : false;
    }

    /**
     * Returns the unparsed content of the current sentence
     *
     * @return {(String|null)}
     */

  }, {
    key: 'unparsed',
    get: function get() {
      return this.isParsed ? null : this.current.input;
    }
  }, {
    key: 'length',
    get: function get() {
      return this._corpus.length;
    }

    /**
     * Returns the currently-focused sentence.  This is useful if another method
     *  wants to access the internals of the nx.Sentence at this.index.  If there
     *  are no sentences, it returns null.
     *
     * @return {(nx.Sentence)|null}
     */

  }, {
    key: 'current',
    get: function get() {
      return this.getSentence(this.index);
    }

    /**
     * Returns the index of the current sentence in the nx.Corpus.  If there are
     *  no sentences, it returns null.
     *
     * @return {(Number|null)}
     */

  }, {
    key: 'index',
    get: function get() {
      return this._corpus.index;
    }

    /**
     * Modify the current index to <index>.
     *
     * @param {Number} index
     */
    ,
    set: function set(index) {
      this._corpus.index = index;
      this.afterModifyIndex();
    }
  }]);

  return Corpus;
}();

module.exports = Corpus;

},{"./utils":32,"notatrix":461,"underscore":502}],6:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var utils = require('../utils');

var _graph = {

	// placeholders (get overwritten on first graph draw)
	pan: { x: 0, y: 0 },
	zoom: 1,
	drawn_sentence: false,

	// affect relative heights of the cytoscape graph edges
	edge_height: 40,
	edge_coeff: 1,

	// how frequently to send mouse-move updates (msecs)
	mouse_move_delay: 100,

	// persist info about user locks in between graph draws
	locked_index: null,
	locked_id: null,
	locked_classes: null,

	set: function set(params) {
		return _.each(params, function (value, key) {
			if (_graph[key] !== undefined) _graph[key] = value;
		});
	}

};

module.exports = _graph;

},{"../utils":32,"underscore":502}],7:[function(require,module,exports){
'use strict';

// is defined in a js file, because fetch doesn't work offline in chrome

var ACTIVE_COLOR = '#2653c9',
    NORMAL_COLOR = '#7fa2ff',
    FANCY_COLOR = '#cc22fc',
    POS_COLOR = '#afa2ff',
    ST_COLOR = '#bcd2ff',
    MOVING_COLOR = '#00f';

var CY_STYLE = [{
  selector: '*.disabled',
  style: {
    opacity: 0.4 /*
                 'background-color': '#f00',
                 color: '#0ff'*/
  }
}, {
  selector: 'node',
  style: {
    height: 20,
    'background-color': NORMAL_COLOR,
    shape: 'roundrectangle',
    'text-valign': 'center',
    'text-halign': 'center',
    'border-color': '#000',
    'border-width': 1
  }
}, {
  selector: 'node.form',
  style: {
    width: 'data(length)',
    label: 'data(label)'
  }
}, {
  selector: 'node.multiword',
  style: {
    'background-color': ST_COLOR,
    'text-background-color': NORMAL_COLOR,
    'text-background-opacity': 0.9,
    'text-border-color': '#000',
    'text-border-opacity': 0.9,
    'text-border-width': '1px',
    'text-background-shape': 'roundrectangle',
    'text-valign': 'top',
    label: 'data(label)'
  }
}, {
  selector: 'node.multiword-active',
  style: {
    'background-color': ACTIVE_COLOR
  }
}, {
  selector: 'node.form.arc-source, node.form.arc-target',
  style: {
    'border-color': FANCY_COLOR
  }
}, {
  selector: 'node.form.root',
  style: {
    'font-weight': 'bold',
    //'text-border-width': '2em',
    'border-width': '2px'
  }
}, {
  selector: 'node.form.neighbor',
  style: {
    'background-color': '#0b2'
  }
}, {
  selector: 'node.form.activated',
  style: {
    'background-color': ACTIVE_COLOR
  }
}, {
  selector: 'node.form.activated.retokenize',
  style: {
    'background-color': POS_COLOR,
    'border-color': FANCY_COLOR
  }
}, {
  selector: 'node.form.merge',
  style: {
    'background-color': POS_COLOR,
    'border-color': FANCY_COLOR
  }
}, {
  selector: 'node.form.supertoken',
  style: {
    'background-color': POS_COLOR,
    'border-color': FANCY_COLOR
  }
}, {
  selector: 'node.pos',
  style: {
    width: 'data(length)',
    label: 'data(label)',
    'background-color': POS_COLOR
  }
}, {
  selector: 'edge',
  style: {
    width: 3,
    opacity: 0.766,
    'line-color': '#111',
    'control-point-weights': '0.2 0.25 0.75 0.8'
  }
}, {
  selector: 'edge.incomplete',
  style: {
    'target-arrow-shape': 'triangle',
    'target-arrow-color': '#aaa',
    'line-color': '#aaa',
    'text-margin-y': -10,
    'curve-style': 'unbundled-bezier',
    'control-point-distances': 'data(ctrl)',
    'control-point-weights': '0 0.25 0.75 1',
    'arrow-scale': '1.5',
    'edge-distances': 'node-position',
    label: 'data(label)',
    'text-events': 'yes'
  }
}, {
  selector: 'edge.incomplete.vertical',
  style: {
    'text-margin-y': 0,
    'text-background-opacity': 1,
    'text-background-color': 'white',
    'text-background-shape': 'roundrectangle',
    'text-border-color': 'black',
    'text-border-width': 1,
    'text-border-opacity': 1,
    'control-point-weights': '0.15 0.45 0.55 0.85',
    'text-margin-x': 'data(length)',
    'source-distance-from-node': 10,
    'target-distance-from-node': 10
  }
}, {
  selector: 'edge.incomplete.horizontal',
  style: {
    'text-margin-y': -10,
    'text-margin-x': 0,
    'text-background-opacity': 0,
    'text-border-opacity': 0,
    'control-point-weights': '0 0.25 0.75 1',
    'source-distance-from-node': 0,
    'target-distance-from-node': 0
  }
}, {
  selector: 'edge.error',
  style: {
    'target-arrow-shape': 'triangle',
    'target-arrow-color': '#d11',
    'line-color': '#d11',
    'text-margin-y': -10,
    'curve-style': 'unbundled-bezier',
    'control-point-distances': 'data(ctrl)',
    'control-point-weights': '0 0.25 0.75 1',
    'arrow-scale': '1.5',
    'edge-distances': 'node-position',
    label: 'data(label)',
    'text-events': 'yes'
  }
}, {
  selector: 'node.pos.error',
  style: {
    'border-color': '#d11'
  }
}, {
  selector: 'edge.enhanced',
  style: {
    'target-arrow-shape': 'triangle',
    'target-arrow-color': '#045',
    'line-color': '#045',
    'text-margin-y': -10,
    'curve-style': 'unbundled-bezier',
    'control-point-distances': 'data(ctrl)',
    'control-point-weights': '0 0.25 0.75 1',
    'edge-distances': 'node-position',
    'arrow-scale': '1.5',
    label: 'data(label)',
    'text-events': 'yes'
  }
}, {
  selector: 'edge.dependency',
  style: {
    'target-arrow-shape': 'triangle',
    'target-arrow-color': '#111',
    'text-margin-y': -10,
    'curve-style': 'unbundled-bezier',
    'control-point-distances': 'data(ctrl)',
    'control-point-weights': '0 0.25 0.75 1',
    'edge-distances': 'node-position',
    label: 'data(label)',
    'text-events': 'yes'
  }
}, {
  selector: 'edge.dependency.selected',
  style: {
    'line-color': FANCY_COLOR,
    'target-arrow-color': FANCY_COLOR
  }
}, { selector: 'edge.pos',
  style: {
    'curve-style': 'haystack'
  }
}, {
  selector: 'node.number',
  style: {
    'background-opacity': 0,
    'border-opacity': 0,
    padding: 0,
    'text-background-color': POS_COLOR,
    'text-background-opacity': 0.9,
    'text-border-color': '#000',
    'text-border-opacity': 0.9,
    'text-border-width': '1px',
    'text-background-shape': 'roundrectangle',
    'text-halign': 'right',
    label: 'data(label)',
    events: 'no'
  }
}, {
  selector: 'edge.moving',
  style: {
    'line-color': MOVING_COLOR,
    'target-arrow-color': MOVING_COLOR
  }
}, {
  selector: 'node.mouse',
  style: {
    height: 5,
    width: 5,
    opacity: 0.5,
    'border-width': 1
  }
}, {
  selector: 'edge.locked',
  style: {
    opacity: 1
  }
}];

module.exports = CY_STYLE;

},{}],8:[function(require,module,exports){
(function (global,setImmediate){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.cytoscape = t() : e.cytoscape = t();
}("undefined" != typeof self ? self : undefined, function () {
  return function (e) {
    function t(r) {
      if (n[r]) return n[r].exports;var i = n[r] = { i: r, l: !1, exports: {} };return e[r].call(i.exports, i, i.exports, t), i.l = !0, i.exports;
    }var n = {};return t.m = e, t.c = n, t.d = function (e, n, r) {
      t.o(e, n) || Object.defineProperty(e, n, { configurable: !1, enumerable: !0, get: r });
    }, t.n = function (e) {
      var n = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };return t.d(n, "a", n), n;
    }, t.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, t.p = "", t(t.s = 20);
  }([function (e, t, n) {
    "use strict";
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        i = n(3),
        a = i ? i.navigator : null,
        o = i ? i.document : null,
        s = r(""),
        l = r({}),
        u = r(function () {}),
        c = "undefined" == typeof HTMLElement ? "undefined" : r(HTMLElement),
        d = function d(e) {
      return e && e.instanceString && h.fn(e.instanceString) ? e.instanceString() : null;
    },
        h = { defined: function defined(e) {
        return null != e;
      }, string: function string(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) == s;
      }, fn: function fn(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) === u;
      }, array: function array(e) {
        return Array.isArray ? Array.isArray(e) : null != e && e instanceof Array;
      }, plainObject: function plainObject(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) === l && !h.array(e) && e.constructor === Object;
      }, object: function object(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) === l;
      }, number: function number(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) === r(1) && !isNaN(e);
      }, integer: function integer(e) {
        return h.number(e) && Math.floor(e) === e;
      }, bool: function bool(e) {
        return null != e && (void 0 === e ? "undefined" : r(e)) === r(!0);
      }, htmlElement: function htmlElement(e) {
        return "undefined" === c ? void 0 : null != e && e instanceof HTMLElement;
      }, elementOrCollection: function elementOrCollection(e) {
        return h.element(e) || h.collection(e);
      }, element: function element(e) {
        return "collection" === d(e) && e._private.single;
      }, collection: function collection(e) {
        return "collection" === d(e) && !e._private.single;
      }, core: function core(e) {
        return "core" === d(e);
      }, style: function style(e) {
        return "style" === d(e);
      }, stylesheet: function stylesheet(e) {
        return "stylesheet" === d(e);
      }, event: function event(e) {
        return "event" === d(e);
      }, thread: function thread(e) {
        return "thread" === d(e);
      }, fabric: function fabric(e) {
        return "fabric" === d(e);
      }, emptyString: function emptyString(e) {
        return void 0 === e || null === e || !("" !== e && !e.match(/^\s+$/));
      }, nonemptyString: function nonemptyString(e) {
        return !(!e || !h.string(e) || "" === e || e.match(/^\s+$/));
      }, domElement: function domElement(e) {
        return "undefined" != typeof HTMLElement && e instanceof HTMLElement;
      }, boundingBox: function boundingBox(e) {
        return h.plainObject(e) && h.number(e.x1) && h.number(e.x2) && h.number(e.y1) && h.number(e.y2);
      }, promise: function promise(e) {
        return h.object(e) && h.fn(e.then);
      }, touch: function touch() {
        return i && ("ontouchstart" in i || i.DocumentTouch && o instanceof DocumentTouch);
      }, gecko: function gecko() {
        return i && ("undefined" != typeof InstallTrigger || "MozAppearance" in o.documentElement.style);
      }, webkit: function webkit() {
        return i && ("undefined" != typeof webkitURL || "WebkitAppearance" in o.documentElement.style);
      }, chromium: function chromium() {
        return i && "undefined" != typeof chrome;
      }, khtml: function khtml() {
        return a && a.vendor.match(/kde/i);
      }, khtmlEtc: function khtmlEtc() {
        return h.khtml() || h.webkit() || h.chromium();
      }, ms: function ms() {
        return a && a.userAgent.match(/msie|trident|edge/i);
      }, windows: function windows() {
        return a && a.appVersion.match(/Win/i);
      }, mac: function mac() {
        return a && a.appVersion.match(/Mac/i);
      }, linux: function linux() {
        return a && a.appVersion.match(/Linux/i);
      }, unix: function unix() {
        return a && a.appVersion.match(/X11/i);
      } };e.exports = h;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(2),
        a = { MAX_INT: Number.MAX_SAFE_INTEGER || 9007199254740991, trueify: function trueify() {
        return !0;
      }, falsify: function falsify() {
        return !1;
      }, zeroify: function zeroify() {
        return 0;
      }, noop: function noop() {}, error: function error(e) {
        console.error ? (console.error.apply(console, arguments), console.trace && console.trace()) : (console.log.apply(console, arguments), console.trace && console.trace());
      }, clone: function clone(e) {
        return this.extend({}, e);
      }, copy: function copy(e) {
        return null == e ? e : r.array(e) ? e.slice() : r.plainObject(e) ? this.clone(e) : e;
      }, copyArray: function copyArray(e) {
        return e.slice();
      }, clonePosition: function clonePosition(e) {
        return { x: e.x, y: e.y };
      }, uuid: function uuid(e, t) {
        for (t = e = ""; e++ < 36; t += 51 * e & 52 ? (15 ^ e ? 8 ^ Math.random() * (20 ^ e ? 16 : 4) : 4).toString(16) : "-") {}return t;
      } };a.makeBoundingBox = i.makeBoundingBox.bind(i), a._staticEmptyObject = {}, a.staticEmptyObject = function () {
      return a._staticEmptyObject;
    }, a.extend = null != Object.assign ? Object.assign.bind(Object) : function (e) {
      for (var t = arguments, n = 1; n < t.length; n++) {
        var r = t[n];if (null != r) for (var i = Object.keys(r), a = 0; a < i.length; a++) {
          var o = i[a];e[o] = r[o];
        }
      }return e;
    }, a.assign = a.extend, a.default = function (e, t) {
      return void 0 === e ? t : e;
    }, a.removeFromArray = function (e, t, n) {
      for (var r = e.length; r >= 0 && (e[r] !== t || (e.splice(r, 1), n)); r--) {}
    }, a.clearArray = function (e) {
      e.splice(0, e.length);
    }, a.push = function (e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];e.push(r);
      }
    }, a.getPrefixedProperty = function (e, t, n) {
      return n && (t = this.prependCamel(n, t)), e[t];
    }, a.setPrefixedProperty = function (e, t, n, r) {
      n && (t = this.prependCamel(n, t)), e[t] = r;
    }, [n(21), n(22), { memoize: n(13) }, n(23), n(24), n(25), n(27)].forEach(function (e) {
      a.extend(a, e);
    }), e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.arePositionsSame = function (e, t) {
      return e.x === t.x && e.y === t.y;
    }, r.copyPosition = function (e) {
      return { x: e.x, y: e.y };
    }, r.modelToRenderedPosition = function (e, t, n) {
      return { x: e.x * t + n.x, y: e.y * t + n.y };
    }, r.renderedToModelPosition = function (e, t, n) {
      return { x: (e.x - n.x) / t, y: (e.y - n.y) / t };
    }, r.array2point = function (e) {
      return { x: e[0], y: e[1] };
    }, r.deg2rad = function (e) {
      return Math.PI * e / 180;
    }, r.getAngleFromDisp = function (e, t) {
      return Math.atan2(t, e) - Math.PI / 2;
    }, r.log2 = Math.log2 || function (e) {
      return Math.log(e) / Math.log(2);
    }, r.signum = function (e) {
      return e > 0 ? 1 : e < 0 ? -1 : 0;
    }, r.dist = function (e, t) {
      return Math.sqrt(r.sqdist(e, t));
    }, r.sqdist = function (e, t) {
      var n = t.x - e.x,
          r = t.y - e.y;return n * n + r * r;
    }, r.qbezierAt = function (e, t, n, r) {
      return (1 - r) * (1 - r) * e + 2 * (1 - r) * r * t + r * r * n;
    }, r.qbezierPtAt = function (e, t, n, i) {
      return { x: r.qbezierAt(e.x, t.x, n.x, i), y: r.qbezierAt(e.y, t.y, n.y, i) };
    }, r.lineAt = function (e, t, n, i) {
      var a = { x: t.x - e.x, y: t.y - e.y },
          o = r.dist(e, t),
          s = { x: a.x / o, y: a.y / o };return n = null == n ? 0 : n, i = null != i ? i : n * o, { x: e.x + s.x * i, y: e.y + s.y * i };
    }, r.lineAtDist = function (e, t, n) {
      return r.lineAt(e, t, void 0, n);
    }, r.triangleAngle = function (e, t, n) {
      var i = r.dist(t, n),
          a = r.dist(e, n),
          o = r.dist(e, t);return Math.acos((i * i + a * a - o * o) / (2 * i * a));
    }, r.bound = function (e, t, n) {
      return Math.max(e, Math.min(n, t));
    }, r.makeBoundingBox = function (e) {
      if (null == e) return { x1: 1 / 0, y1: 1 / 0, x2: -1 / 0, y2: -1 / 0, w: 0, h: 0 };if (null != e.x1 && null != e.y1) {
        if (null != e.x2 && null != e.y2 && e.x2 >= e.x1 && e.y2 >= e.y1) return { x1: e.x1, y1: e.y1, x2: e.x2, y2: e.y2, w: e.x2 - e.x1, h: e.y2 - e.y1 };if (null != e.w && null != e.h && e.w >= 0 && e.h >= 0) return { x1: e.x1, y1: e.y1, x2: e.x1 + e.w, y2: e.y1 + e.h, w: e.w, h: e.h };
      }
    }, r.updateBoundingBox = function (e, t) {
      e.x1 = Math.min(e.x1, t.x1), e.x2 = Math.max(e.x2, t.x2), e.w = e.x2 - e.x1, e.y1 = Math.min(e.y1, t.y1), e.y2 = Math.max(e.y2, t.y2), e.h = e.y2 - e.y1;
    }, r.expandBoundingBoxByPoint = function (e, t, n) {
      e.x1 = Math.min(e.x1, t), e.x2 = Math.max(e.x2, t), e.w = e.x2 - e.x1, e.y1 = Math.min(e.y1, n), e.y2 = Math.max(e.y2, n), e.h = e.y2 - e.y1;
    }, r.expandBoundingBox = function (e, t) {
      return e.x1 -= t, e.x2 += t, e.y1 -= t, e.y2 += t, e.w = e.x2 - e.x1, e.h = e.y2 - e.y1, e;
    }, r.boundingBoxesIntersect = function (e, t) {
      return !(e.x1 > t.x2) && !(t.x1 > e.x2) && !(e.x2 < t.x1) && !(t.x2 < e.x1) && !(e.y2 < t.y1) && !(t.y2 < e.y1) && !(e.y1 > t.y2) && !(t.y1 > e.y2);
    }, r.inBoundingBox = function (e, t, n) {
      return e.x1 <= t && t <= e.x2 && e.y1 <= n && n <= e.y2;
    }, r.pointInBoundingBox = function (e, t) {
      return this.inBoundingBox(e, t.x, t.y);
    }, r.boundingBoxInBoundingBox = function (e, t) {
      return r.inBoundingBox(e, t.x1, t.y1) && r.inBoundingBox(e, t.x2, t.y2);
    }, r.roundRectangleIntersectLine = function (e, t, n, r, i, a, o) {
      var s = this.getRoundRectangleRadius(i, a),
          l = i / 2,
          u = a / 2,
          c = void 0,
          d = n - l + s - o,
          h = r - u - o,
          p = n + l - s + o,
          f = h;if (c = this.finiteLinesIntersect(e, t, n, r, d, h, p, f, !1), c.length > 0) return c;var v = n + l + o,
          g = r - u + s - o,
          y = v,
          m = r + u - s + o;if (c = this.finiteLinesIntersect(e, t, n, r, v, g, y, m, !1), c.length > 0) return c;var b = n - l + s - o,
          x = r + u + o,
          w = n + l - s + o,
          E = x;if (c = this.finiteLinesIntersect(e, t, n, r, b, x, w, E, !1), c.length > 0) return c;var P = n - l - o,
          C = r - u + s - o,
          S = P,
          T = r + u - s + o;if (c = this.finiteLinesIntersect(e, t, n, r, P, C, S, T, !1), c.length > 0) return c;var D = void 0,
          k = n - l + s,
          _ = r - u + s;if (D = this.intersectLineCircle(e, t, n, r, k, _, s + o), D.length > 0 && D[0] <= k && D[1] <= _) return [D[0], D[1]];var M = n + l - s,
          I = r - u + s;if (D = this.intersectLineCircle(e, t, n, r, M, I, s + o), D.length > 0 && D[0] >= M && D[1] <= I) return [D[0], D[1]];var N = n + l - s,
          B = r + u - s;if (D = this.intersectLineCircle(e, t, n, r, N, B, s + o), D.length > 0 && D[0] >= N && D[1] >= B) return [D[0], D[1]];var z = n - l + s,
          L = r + u - s;return D = this.intersectLineCircle(e, t, n, r, z, L, s + o), D.length > 0 && D[0] <= z && D[1] >= L ? [D[0], D[1]] : [];
    }, r.inLineVicinity = function (e, t, n, r, i, a, o) {
      var s = o,
          l = Math.min(n, i),
          u = Math.max(n, i),
          c = Math.min(r, a),
          d = Math.max(r, a);return l - s <= e && e <= u + s && c - s <= t && t <= d + s;
    }, r.inBezierVicinity = function (e, t, n, r, i, a, o, s, l) {
      var u = { x1: Math.min(n, o, i) - l, x2: Math.max(n, o, i) + l, y1: Math.min(r, s, a) - l, y2: Math.max(r, s, a) + l };return !(e < u.x1 || e > u.x2 || t < u.y1 || t > u.y2);
    }, r.solveQuadratic = function (e, t, n, r) {
      n -= r;var i = t * t - 4 * e * n;if (i < 0) return [];var a = Math.sqrt(i),
          o = 2 * e;return [(-t + a) / o, (-t - a) / o];
    }, r.solveCubic = function (e, t, n, r, i) {
      t /= e, n /= e, r /= e;var a = void 0,
          o = void 0,
          s = void 0,
          l = void 0,
          u = void 0,
          c = void 0,
          d = void 0,
          h = void 0;return o = (3 * n - t * t) / 9, s = -27 * r + t * (9 * n - t * t * 2), s /= 54, a = o * o * o + s * s, i[1] = 0, d = t / 3, a > 0 ? (u = s + Math.sqrt(a), u = u < 0 ? -Math.pow(-u, 1 / 3) : Math.pow(u, 1 / 3), c = s - Math.sqrt(a), c = c < 0 ? -Math.pow(-c, 1 / 3) : Math.pow(c, 1 / 3), i[0] = -d + u + c, d += (u + c) / 2, i[4] = i[2] = -d, d = Math.sqrt(3) * (-c + u) / 2, i[3] = d, void (i[5] = -d)) : (i[5] = i[3] = 0, 0 === a ? (h = s < 0 ? -Math.pow(-s, 1 / 3) : Math.pow(s, 1 / 3), i[0] = 2 * h - d, void (i[4] = i[2] = -(h + d))) : (o = -o, l = o * o * o, l = Math.acos(s / Math.sqrt(l)), h = 2 * Math.sqrt(o), i[0] = -d + h * Math.cos(l / 3), i[2] = -d + h * Math.cos((l + 2 * Math.PI) / 3), void (i[4] = -d + h * Math.cos((l + 4 * Math.PI) / 3))));
    }, r.sqdistToQuadraticBezier = function (e, t, n, r, i, a, o, s) {
      var l = 1 * n * n - 4 * n * i + 2 * n * o + 4 * i * i - 4 * i * o + o * o + r * r - 4 * r * a + 2 * r * s + 4 * a * a - 4 * a * s + s * s,
          u = 9 * n * i - 3 * n * n - 3 * n * o - 6 * i * i + 3 * i * o + 9 * r * a - 3 * r * r - 3 * r * s - 6 * a * a + 3 * a * s,
          c = 3 * n * n - 6 * n * i + n * o - n * e + 2 * i * i + 2 * i * e - o * e + 3 * r * r - 6 * r * a + r * s - r * t + 2 * a * a + 2 * a * t - s * t,
          d = 1 * n * i - n * n + n * e - i * e + r * a - r * r + r * t - a * t,
          h = [];this.solveCubic(l, u, c, d, h);for (var p = [], f = 0; f < 6; f += 2) {
        Math.abs(h[f + 1]) < 1e-7 && h[f] >= 0 && h[f] <= 1 && p.push(h[f]);
      }p.push(1), p.push(0);for (var v = -1, g = void 0, y = void 0, m = void 0, b = 0; b < p.length; b++) {
        g = Math.pow(1 - p[b], 2) * n + 2 * (1 - p[b]) * p[b] * i + p[b] * p[b] * o, y = Math.pow(1 - p[b], 2) * r + 2 * (1 - p[b]) * p[b] * a + p[b] * p[b] * s, m = Math.pow(g - e, 2) + Math.pow(y - t, 2), v >= 0 ? m < v && (v = m) : v = m;
      }return v;
    }, r.sqdistToFiniteLine = function (e, t, n, r, i, a) {
      var o = [e - n, t - r],
          s = [i - n, a - r],
          l = s[0] * s[0] + s[1] * s[1],
          u = o[0] * o[0] + o[1] * o[1],
          c = o[0] * s[0] + o[1] * s[1],
          d = c * c / l;return c < 0 ? u : d > l ? (e - i) * (e - i) + (t - a) * (t - a) : u - d;
    }, r.pointInsidePolygonPoints = function (e, t, n) {
      for (var r = void 0, i = void 0, a = void 0, o = void 0, s = 0, l = 0; l < n.length / 2; l++) {
        if (r = n[2 * l], i = n[2 * l + 1], l + 1 < n.length / 2 ? (a = n[2 * (l + 1)], o = n[2 * (l + 1) + 1]) : (a = n[2 * (l + 1 - n.length / 2)], o = n[2 * (l + 1 - n.length / 2) + 1]), r == e && a == e) ;else {
          if (!(r >= e && e >= a || r <= e && e <= a)) continue;(e - r) / (a - r) * (o - i) + i > t && s++;
        }
      }return s % 2 != 0;
    }, r.pointInsidePolygon = function (e, t, n, i, a, o, s, l, u) {
      var c = new Array(n.length),
          d = void 0;null != l[0] ? (d = Math.atan(l[1] / l[0]), l[0] < 0 ? d += Math.PI / 2 : d = -d - Math.PI / 2) : d = l;for (var h = Math.cos(-d), p = Math.sin(-d), f = 0; f < c.length / 2; f++) {
        c[2 * f] = o / 2 * (n[2 * f] * h - n[2 * f + 1] * p), c[2 * f + 1] = s / 2 * (n[2 * f + 1] * h + n[2 * f] * p), c[2 * f] += i, c[2 * f + 1] += a;
      }var v = void 0;if (u > 0) {
        var g = this.expandPolygon(c, -u);v = this.joinLines(g);
      } else v = c;return r.pointInsidePolygonPoints(e, t, v);
    }, r.joinLines = function (e) {
      for (var t = new Array(e.length / 2), n = void 0, r = void 0, i = void 0, a = void 0, o = void 0, s = void 0, l = void 0, u = void 0, c = 0; c < e.length / 4; c++) {
        n = e[4 * c], r = e[4 * c + 1], i = e[4 * c + 2], a = e[4 * c + 3], c < e.length / 4 - 1 ? (o = e[4 * (c + 1)], s = e[4 * (c + 1) + 1], l = e[4 * (c + 1) + 2], u = e[4 * (c + 1) + 3]) : (o = e[0], s = e[1], l = e[2], u = e[3]);var d = this.finiteLinesIntersect(n, r, i, a, o, s, l, u, !0);t[2 * c] = d[0], t[2 * c + 1] = d[1];
      }return t;
    }, r.expandPolygon = function (e, t) {
      for (var n = new Array(2 * e.length), r = void 0, i = void 0, a = void 0, o = void 0, s = 0; s < e.length / 2; s++) {
        r = e[2 * s], i = e[2 * s + 1], s < e.length / 2 - 1 ? (a = e[2 * (s + 1)], o = e[2 * (s + 1) + 1]) : (a = e[0], o = e[1]);var l = o - i,
            u = -(a - r),
            c = Math.sqrt(l * l + u * u),
            d = l / c,
            h = u / c;n[4 * s] = r + d * t, n[4 * s + 1] = i + h * t, n[4 * s + 2] = a + d * t, n[4 * s + 3] = o + h * t;
      }return n;
    }, r.intersectLineEllipse = function (e, t, n, r, i, a) {
      var o = n - e,
          s = r - t;o /= i, s /= a;var l = Math.sqrt(o * o + s * s),
          u = l - 1;if (u < 0) return [];var c = u / l;return [(n - e) * c + e, (r - t) * c + t];
    }, r.checkInEllipse = function (e, t, n, r, i, a, o) {
      return e -= i, t -= a, e /= n / 2 + o, t /= r / 2 + o, e * e + t * t <= 1;
    }, r.intersectLineCircle = function (e, t, n, r, i, a, o) {
      var s = [n - e, r - t],
          l = [e - i, t - a],
          u = s[0] * s[0] + s[1] * s[1],
          c = 2 * (l[0] * s[0] + l[1] * s[1]),
          d = l[0] * l[0] + l[1] * l[1] - o * o,
          h = c * c - 4 * u * d;if (h < 0) return [];var p = (-c + Math.sqrt(h)) / (2 * u),
          f = (-c - Math.sqrt(h)) / (2 * u),
          v = Math.min(p, f),
          g = Math.max(p, f),
          y = [];if (v >= 0 && v <= 1 && y.push(v), g >= 0 && g <= 1 && y.push(g), 0 === y.length) return [];var m = y[0] * s[0] + e,
          b = y[0] * s[1] + t;if (y.length > 1) {
        if (y[0] == y[1]) return [m, b];return [m, b, y[1] * s[0] + e, y[1] * s[1] + t];
      }return [m, b];
    }, r.findCircleNearPoint = function (e, t, n, r, i) {
      var a = r - e,
          o = i - t,
          s = Math.sqrt(a * a + o * o);return [e + a / s * n, t + o / s * n];
    }, r.findMaxSqDistanceToOrigin = function (e) {
      for (var t = 1e-6, n = void 0, r = 0; r < e.length / 2; r++) {
        (n = e[2 * r] * e[2 * r] + e[2 * r + 1] * e[2 * r + 1]) > t && (t = n);
      }return t;
    }, r.midOfThree = function (e, t, n) {
      return t <= e && e <= n || n <= e && e <= t ? e : e <= t && t <= n || n <= t && t <= e ? t : n;
    }, r.finiteLinesIntersect = function (e, t, n, r, i, a, o, s, l) {
      var u = e - i,
          c = n - e,
          d = o - i,
          h = t - a,
          p = r - t,
          f = s - a,
          v = d * h - f * u,
          g = c * h - p * u,
          y = f * c - d * p;if (0 !== y) {
        var m = v / y,
            b = g / y;return -.001 <= m && m <= 1.001 && -.001 <= b && b <= 1.001 ? [e + m * c, t + m * p] : l ? [e + m * c, t + m * p] : [];
      }return 0 === v || 0 === g ? this.midOfThree(e, n, o) === o ? [o, s] : this.midOfThree(e, n, i) === i ? [i, a] : this.midOfThree(i, o, n) === n ? [n, r] : [] : [];
    }, r.polygonIntersectLine = function (e, t, n, i, a, o, s, l) {
      var u = [],
          c = void 0,
          d = new Array(n.length),
          h = !0;5 === arguments.length && (h = !1);var p = void 0;if (h) {
        for (var f = 0; f < d.length / 2; f++) {
          d[2 * f] = n[2 * f] * o + i, d[2 * f + 1] = n[2 * f + 1] * s + a;
        }if (l > 0) {
          var v = r.expandPolygon(d, -l);p = r.joinLines(v);
        } else p = d;
      } else p = n;for (var g = void 0, y = void 0, m = void 0, b = void 0, x = 0; x < p.length / 2; x++) {
        g = p[2 * x], y = p[2 * x + 1], x < p.length / 2 - 1 ? (m = p[2 * (x + 1)], b = p[2 * (x + 1) + 1]) : (m = p[0], b = p[1]), c = this.finiteLinesIntersect(e, t, i, a, g, y, m, b), 0 !== c.length && u.push(c[0], c[1]);
      }return u;
    }, r.shortenIntersection = function (e, t, n) {
      var r = [e[0] - t[0], e[1] - t[1]],
          i = Math.sqrt(r[0] * r[0] + r[1] * r[1]),
          a = (i - n) / i;return a < 0 && (a = 1e-5), [t[0] + a * r[0], t[1] + a * r[1]];
    }, r.generateUnitNgonPointsFitToSquare = function (e, t) {
      var n = r.generateUnitNgonPoints(e, t);return n = r.fitPolygonToSquare(n);
    }, r.fitPolygonToSquare = function (e) {
      for (var t = void 0, n = void 0, r = e.length / 2, i = 1 / 0, a = 1 / 0, o = -1 / 0, s = -1 / 0, l = 0; l < r; l++) {
        t = e[2 * l], n = e[2 * l + 1], i = Math.min(i, t), o = Math.max(o, t), a = Math.min(a, n), s = Math.max(s, n);
      }for (var u = 2 / (o - i), c = 2 / (s - a), d = 0; d < r; d++) {
        t = e[2 * d] = e[2 * d] * u, n = e[2 * d + 1] = e[2 * d + 1] * c, i = Math.min(i, t), o = Math.max(o, t), a = Math.min(a, n), s = Math.max(s, n);
      }if (a < -1) for (var h = 0; h < r; h++) {
        n = e[2 * h + 1] = e[2 * h + 1] + (-1 - a);
      }return e;
    }, r.generateUnitNgonPoints = function (e, t) {
      var n = 1 / e * 2 * Math.PI,
          r = e % 2 == 0 ? Math.PI / 2 + n / 2 : Math.PI / 2;r += t;for (var i = new Array(2 * e), a = void 0, o = 0; o < e; o++) {
        a = o * n + r, i[2 * o] = Math.cos(a), i[2 * o + 1] = Math.sin(-a);
      }return i;
    }, r.getRoundRectangleRadius = function (e, t) {
      return Math.min(e / 4, t / 4, 8);
    }, r.getCutRectangleCornerLength = function () {
      return 8;
    }, r.bezierPtsToQuadCoeff = function (e, t, n) {
      return [e - 2 * t + n, 2 * (t - e), e];
    }, r.getBarrelCurveConstants = function (e, t) {
      return { heightOffset: Math.min(15, .05 * t), widthOffset: Math.min(100, .25 * e), ctrlPtOffsetPct: .05 };
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    e.exports = "undefined" == typeof window ? null : window;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = {};[n(44), n(46), n(47)].forEach(function (e) {
      r.assign(i, e);
    }), e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return typeof e === "undefined" ? "undefined" : _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
    },
        i = function e(t) {
      if (!(this instanceof e)) return new e(t);this.id = "Thenable/1.0.7", this.state = 0, this.fulfillValue = void 0, this.rejectReason = void 0, this.onFulfilled = [], this.onRejected = [], this.proxy = { then: this.then.bind(this) }, "function" == typeof t && t.call(this, this.fulfill.bind(this), this.reject.bind(this));
    };i.prototype = { fulfill: function fulfill(e) {
        return a(this, 1, "fulfillValue", e);
      }, reject: function reject(e) {
        return a(this, 2, "rejectReason", e);
      }, then: function then(e, t) {
        var n = this,
            r = new i();return n.onFulfilled.push(l(e, r, "fulfill")), n.onRejected.push(l(t, r, "reject")), o(n), r.proxy;
      } };var a = function a(e, t, n, r) {
      return 0 === e.state && (e.state = t, e[n] = r, o(e)), e;
    },
        o = function o(e) {
      1 === e.state ? s(e, "onFulfilled", e.fulfillValue) : 2 === e.state && s(e, "onRejected", e.rejectReason);
    },
        s = function s(e, t, n) {
      if (0 !== e[t].length) {
        var r = e[t];e[t] = [];var i = function i() {
          for (var e = 0; e < r.length; e++) {
            r[e](n);
          }
        };"function" == typeof setImmediate ? setImmediate(i) : setTimeout(i, 0);
      }
    },
        l = function l(e, t, n) {
      return function (r) {
        if ("function" != typeof e) t[n].call(t, r);else {
          var i;try {
            i = e(r);
          } catch (e) {
            return void t.reject(e);
          }u(t, i);
        }
      };
    },
        u = function e(t, n) {
      if (t === n || t.proxy === n) return void t.reject(new TypeError("cannot resolve promise with itself"));var i;if ("object" === (void 0 === n ? "undefined" : r(n)) && null !== n || "function" == typeof n) try {
        i = n.then;
      } catch (e) {
        return void t.reject(e);
      }if ("function" != typeof i) t.fulfill(n);else {
        var a = !1;try {
          i.call(n, function (r) {
            a || (a = !0, r === n ? t.reject(new TypeError("circular thenable chain")) : e(t, r));
          }, function (e) {
            a || (a = !0, t.reject(e));
          });
        } catch (e) {
          a || t.reject(e);
        }
      }
    };i.all = function (e) {
      return new i(function (t, n) {
        for (var r = new Array(e.length), i = 0, a = function a(n, _a) {
          r[n] = _a, ++i === e.length && t(r);
        }, o = 0; o < e.length; o++) {
          !function (t) {
            var r = e[t];null != r && null != r.then ? r.then(function (e) {
              a(t, e);
            }, function (e) {
              n(e);
            }) : a(t, r);
          }(o);
        }
      });
    }, i.resolve = function (e) {
      return new i(function (t, n) {
        t(e);
      });
    }, i.reject = function (e) {
      return new i(function (t, n) {
        n(e);
      });
    }, e.exports = "undefined" != typeof Promise ? Promise : i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(10),
        o = function o(e) {
      var t = this;if (t._private = { selectorText: e, invalid: !0 }, null == e || r.string(e) && e.match(/^\s*$/)) t.length = 0;else if ("*" === e || "edge" === e || "node" === e) t[0] = a(), t[0].group = "*" === e ? e : e + "s", t[0].groupOnly = !0, t[0].length = 1, t._private.invalid = !1, t.length = 1;else if (r.elementOrCollection(e)) {
        var n = e.collection();t[0] = a(), t[0].collection = n, t[0].length = 1, t.length = 1;
      } else if (r.fn(e)) t[0] = a(), t[0].filter = e, t[0].length = 1, t.length = 1;else {
        if (!r.string(e)) return void i.error("A selector must be created from a string; found ", e);if (!t.parse(e)) return;
      }t._private.invalid = !1;
    },
        s = o.prototype;s.valid = function () {
      return !this._private.invalid;
    }, s.invalid = function () {
      return this._private.invalid;
    }, s.text = function () {
      return this._private.selectorText;
    }, s.size = function () {
      return this.length;
    }, s.eq = function (e) {
      return this[e];
    }, s.sameText = function (e) {
      return this.text() === e.text();
    }, s.toString = s.selector = function () {
      if (null != this._private.toStringCache) return this._private.toStringCache;var e = void 0,
          t = "",
          n = function n(e) {
        return null == e ? "" : e;
      },
          i = function i(e) {
        return r.string(e) ? '"' + e + '"' : n(e);
      },
          a = function a(e) {
        return " " + e + " ";
      };for (e = 0; e < this.length; e++) {
        var o = this[e];t += function t(r) {
          var o = "",
              s = void 0,
              l = void 0;r.subject === r && (o += "$");var u = n(r.group);for (o += u.substring(0, u.length - 1), s = 0; s < r.data.length; s++) {
            var c = r.data[s];c.value ? o += "[" + c.field + a(n(c.operator)) + i(c.value) + "]" : o += "[" + n(c.operator) + c.field + "]";
          }for (s = 0; s < r.meta.length; s++) {
            var d = r.meta[s];o += "[[" + d.field + a(n(d.operator)) + i(d.value) + "]]";
          }for (s = 0; s < r.colonSelectors.length; s++) {
            l = r.colonSelectors[e], o += l;
          }for (s = 0; s < r.ids.length; s++) {
            l = "#" + r.ids[e], o += l;
          }for (s = 0; s < r.classes.length; s++) {
            l = "." + r.classes[s], o += l;
          }if (null != r.source && null != r.target && (o = t(r.source) + " -> " + t(r.target)), null != r.connectedNodes) {
            var h = r.connectedNodes;o = t(h[0]) + " <-> " + t(h[1]);
          }return null != r.parent && (o = t(r.parent) + " > " + o), null != r.ancestor && (o = t(r.ancestor) + " " + o), null != r.child && (o += " > " + t(r.child)), null != r.descendant && (o += " " + t(r.descendant)), o;
        }(o), this.length > 1 && e < this.length - 1 && (t += ", ");
      }return this._private.toStringCache = t, t;
    }, [n(50), n(53)].forEach(function (e) {
      return i.assign(s, e);
    }), e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = n(28),
        o = n(8),
        s = n(14),
        l = { generate: function generate(e, t, n) {
        for (var i = null != n ? n : r.uuid(); e.hasElementWithId(i);) {
          i = r.uuid();
        }return i;
      } },
        u = function u(e, t, n) {
      if (void 0 === e || !i.core(e)) return void r.error("A collection must have a reference to the core");var u = new a(),
          c = !1;if (t) {
        if (t.length > 0 && i.plainObject(t[0]) && !i.element(t[0])) {
          c = !0;for (var d = [], h = new o(), p = 0, f = t.length; p < f; p++) {
            var v = t[p];null == v.data && (v.data = {});var g = v.data;if (null == g.id) g.id = l.generate(e, v);else if (e.hasElementWithId(g.id) || h.has(g.id)) continue;var y = new s(e, v, !1);d.push(y), h.add(g.id);
          }t = d;
        }
      } else t = [];this.length = 0;for (var m = 0, b = t.length; m < b; m++) {
        var x = t[m];if (null != x) {
          var w = x._private.data.id;(null == n || n.unique && !u.has(w)) && (u.set(w, { index: this.length, ele: x }), this[this.length] = x, this.length++);
        }
      }this._private = { cy: e, map: u }, c && this.restore();
    },
        c = s.prototype = u.prototype;c.instanceString = function () {
      return "collection";
    }, c.spawn = function (e, t, n) {
      return i.core(e) || (n = t, t = e, e = this.cy()), new u(e, t, n);
    }, c.spawnSelf = function () {
      return this.spawn(this);
    }, c.cy = function () {
      return this._private.cy;
    }, c.renderer = function () {
      return this._private.cy.renderer();
    }, c.element = function () {
      return this[0];
    }, c.collection = function () {
      return i.collection(this) ? this : new u(this._private.cy, [this]);
    }, c.unique = function () {
      return new u(this._private.cy, this, { unique: !0 });
    }, c.hasElementWithId = function (e) {
      return this._private.map.has(e);
    }, c.getElementById = function (e) {
      var t = this._private.cy,
          n = this._private.map.get(e);return n ? n.ele : new u(t);
    }, c.$id = c.getElementById, c.poolIndex = function () {
      var e = this._private.cy,
          t = e._private.elements,
          n = this._private.data.id;return t._private.map.get(n).index;
    }, c.json = function (e) {
      var t = this.element(),
          n = this.cy();if (null == t && e) return this;if (null != t) {
        var a = t._private;if (i.plainObject(e)) {
          n.startBatch(), e.data && t.data(e.data), e.position && t.position(e.position);var o = function o(n, r, i) {
            var o = e[n];null != o && o !== a[n] && (o ? t[r]() : t[i]());
          };return o("removed", "remove", "restore"), o("selected", "select", "unselect"), o("selectable", "selectify", "unselectify"), o("locked", "lock", "unlock"), o("grabbable", "grabify", "ungrabify"), null != e.classes && t.classes(e.classes), n.endBatch(), this;
        }if (void 0 === e) {
          var s = { data: r.copy(a.data), position: r.copy(a.position), group: a.group, removed: a.removed, selected: a.selected, selectable: a.selectable, locked: a.locked, grabbable: a.grabbable, classes: null };s.classes = "";var l = 0;return a.classes.forEach(function (e) {
            return s.classes += 0 == l++ ? e : " " + e;
          }), s;
        }
      }
    }, c.jsons = function () {
      for (var e = [], t = 0; t < this.length; t++) {
        var n = this[t],
            r = n.json();e.push(r);
      }return e;
    }, c.clone = function () {
      for (var e = this.cy(), t = [], n = 0; n < this.length; n++) {
        var r = this[n],
            i = r.json(),
            a = new s(e, i, !1);t.push(a);
      }return new u(e, t);
    }, c.copy = c.clone, c.restore = function (e) {
      var t = this,
          n = t.cy(),
          o = n._private;void 0 === e && (e = !0);for (var s = [], c = [], d = void 0, h = 0, p = t.length; h < p; h++) {
        var f = t[h];f.removed() && (f.isNode() ? s.push(f) : c.push(f));
      }d = s.concat(c);var v = void 0,
          g = function g() {
        d.splice(v, 1), v--;
      };for (v = 0; v < d.length; v++) {
        var y = d[v],
            m = y._private,
            b = m.data;if (y.clearTraversalCache(), void 0 === b.id) b.id = l.generate(n, y);else if (i.number(b.id)) b.id = "" + b.id;else {
          if (i.emptyString(b.id) || !i.string(b.id)) {
            r.error("Can not create element with invalid string ID `" + b.id + "`"), g();continue;
          }if (n.hasElementWithId(b.id)) {
            r.error("Can not create second element with ID `" + b.id + "`"), g();continue;
          }
        }var x = b.id;if (y.isNode()) {
          var w = m.position;null == w.x && (w.x = 0), null == w.y && (w.y = 0);
        }if (y.isEdge()) {
          for (var E = y, P = ["source", "target"], C = P.length, S = !1, T = 0; T < C; T++) {
            var D = P[T],
                k = b[D];i.number(k) && (k = b[D] = "" + b[D]), null == k || "" === k ? (r.error("Can not create edge `" + x + "` with unspecified " + D), S = !0) : n.hasElementWithId(k) || (r.error("Can not create edge `" + x + "` with nonexistant " + D + " `" + k + "`"), S = !0);
          }if (S) {
            g();continue;
          }var _ = n.getElementById(b.source),
              M = n.getElementById(b.target);_._private.edges.push(E), M._private.edges.push(E), E._private.source = _, E._private.target = M;
        }m.map = new a(), m.map.set(x, { ele: y, index: 0 }), m.removed = !1, n.addToPool(y);
      }for (var I = 0; I < s.length; I++) {
        var N = s[I],
            B = N._private.data;i.number(B.parent) && (B.parent = "" + B.parent);var z = B.parent;if (null != z) {
          var L = n.getElementById(z);if (L.empty()) B.parent = void 0;else {
            for (var A = !1, O = L; !O.empty();) {
              if (N.same(O)) {
                A = !0, B.parent = void 0;break;
              }O = O.parent();
            }A || (L[0]._private.children.push(N), N._private.parent = L[0], o.hasCompoundNodes = !0);
          }
        }
      }if (d.length > 0) {
        for (var R = new u(n, d), V = 0; V < R.length; V++) {
          var q = R[V];q.isNode() || (q.parallelEdges().clearTraversalCache(), q.source().clearTraversalCache(), q.target().clearTraversalCache());
        }var F = void 0;F = o.hasCompoundNodes ? n.collection().merge(R).merge(R.connectedNodes()).merge(R.parent()) : R, F.dirtyCompoundBoundsCache().updateStyle(e), e ? R.emitAndNotify("add") : R.emit("add");
      }return t;
    }, c.removed = function () {
      var e = this[0];return e && e._private.removed;
    }, c.inside = function () {
      var e = this[0];return e && !e._private.removed;
    }, c.remove = function (e) {
      function t(e) {
        for (var t = e._private.edges, n = 0; n < t.length; n++) {
          i(t[n]);
        }
      }function n(e) {
        for (var t = e._private.children, n = 0; n < t.length; n++) {
          i(t[n]);
        }
      }function i(e) {
        var r = c[e.id()];e.removed() || r || (c[e.id()] = !0, e.isNode() ? (l.push(e), t(e), n(e)) : l.unshift(e));
      }function a(e, t) {
        var n = e._private.edges;r.removeFromArray(n, t), e.clearTraversalCache();
      }var o = this,
          s = [],
          l = [],
          c = {},
          d = o._private.cy;void 0 === e && (e = !0);for (var h = 0, p = o.length; h < p; h++) {
        i(o[h]);
      }var f = [];f.ids = {}, o.dirtyCompoundBoundsCache(), d.removeFromPool(l);for (var v = 0; v < l.length; v++) {
        var g = l[v];if (g._private.removed = !0, s.push(g), g.isEdge()) {
          var y = g.source()[0],
              m = g.target()[0];a(y, g), a(m, g), function (e) {
            e.parallelEdges().clearTraversalCache();
          }(g);
        } else {
          var b = g.parent();0 !== b.length && function (e, t) {
            t = t[0], e = e[0];var n = e._private.children,
                i = e.id();r.removeFromArray(n, t), f.ids[i] || (f.ids[i] = !0, f.push(e));
          }(b, g);
        }
      }var x = d._private.elements;d._private.hasCompoundNodes = !1;for (var w = 0; w < x.length; w++) {
        if (x[w].isParent()) {
          d._private.hasCompoundNodes = !0;break;
        }
      }var E = new u(this.cy(), s);E.size() > 0 && (e && this.cy().notify({ type: "remove", eles: E }), E.emit("remove"));for (var P = 0; P < f.length; P++) {
        var C = f[P];C.removed() || C.updateStyle();
      }return new u(d, s);
    }, c.move = function (e) {
      var t = this._private.cy;if (void 0 !== e.source || void 0 !== e.target) {
        var n = e.source,
            r = e.target,
            i = t.hasElementWithId(n),
            a = t.hasElementWithId(r);if (i || a) {
          var o = this.jsons();this.remove();for (var s = 0; s < o.length; s++) {
            var l = o[s],
                u = this[s];"edges" === l.group && (i && (l.data.source = n), a && (l.data.target = r), l.scratch = u._private.scratch);
          }return t.add(o);
        }
      } else if (void 0 !== e.parent) {
        var c = e.parent,
            d = null === c || t.hasElementWithId(c);if (d) {
          var h = this.jsons(),
              p = this.descendants(),
              f = p.union(p.union(this).connectedEdges()).jsons();this.remove();for (var v = 0; v < h.length; v++) {
            var g = h[v],
                y = this[v];"nodes" === g.group && (g.data.parent = null === c ? void 0 : c, g.scratch = y._private.scratch);
          }return t.add(h.concat(f));
        }
      }return this;
    }, [n(29), n(43), n(48), n(49), n(54), n(55), n(56), n(57), n(62), n(63), n(64), n(7), n(65), n(66), n(67), n(68), n(69)].forEach(function (e) {
      r.extend(c, e);
    }), e.exports = u;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }var i = function () {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }return function (t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
        a = ("function" == typeof Symbol && Symbol.iterator, function () {
      function e(t) {
        if (r(this, e), this._obj = Object.create(null), null != t) {
          var n = void 0;n = null != t.instanceString && t.instanceString() === this.instanceString() ? t.toArray() : t;for (var i = 0; i < n.length; i++) {
            this.add(n[i]);
          }
        }
      }return i(e, [{ key: "instanceString", value: function value() {
          return "set";
        } }, { key: "add", value: function value(e) {
          this._obj[e] = 1;
        } }, { key: "delete", value: function value(e) {
          this._obj[e] = 0;
        } }, { key: "clear", value: function value() {
          this._obj = Object.create(null);
        } }, { key: "has", value: function value(e) {
          return 1 === this._obj[e];
        } }, { key: "toArray", value: function value() {
          var e = this;return Object.keys(this._obj).filter(function (t) {
            return e.has(t);
          });
        } }, { key: "forEach", value: function value(e, t) {
          return this.toArray().forEach(e, t);
        } }, { key: "size", get: function get() {
          return this.toArray().length;
        } }]), e;
    }());e.exports = a;
  }, function (e, t, n) {
    "use strict";
    e.exports = n(32);
  }, function (e, t, n) {
    "use strict";
    var r = function r() {
      return { classes: [], colonSelectors: [], data: [], group: null, ids: [], meta: [], collection: null, filter: null, parent: null, ancestor: null, subject: null, child: null, descendant: null };
    };e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      i.assign(this, l, e), this.listeners = [], this.emitting = 0;
    }var i = n(1),
        a = n(0),
        o = n(16),
        s = /^([^.]+)(\.(?:[^.]+))?$/,
        l = { qualifierCompare: function qualifierCompare(e, t) {
        return e === t;
      }, eventMatches: function eventMatches() {
        return !0;
      }, eventFields: function eventFields() {
        return {};
      }, callbackContext: function callbackContext(e) {
        return e;
      }, beforeEmit: function beforeEmit() {}, afterEmit: function afterEmit() {}, bubble: function bubble() {
        return !1;
      }, parent: function parent() {
        return null;
      }, context: void 0 },
        u = r.prototype,
        c = function c(e, t, n, r, o, l, u) {
      a.fn(r) && (o = r, r = null), u && (l = null == l ? u : i.assign({}, l, u));for (var c = n.split(/\s+/), d = 0; d < c.length; d++) {
        var h = c[d];if (!a.emptyString(h)) {
          var p = h.match(s);if (p) {
            if (!1 === t(e, h, p[1], p[2] ? p[2] : null, r, o, l)) break;
          }
        }
      }
    },
        d = function d(e, t) {
      return new o(t.type, i.assign(t, e.eventFields(e.context)));
    },
        h = function h(e, t, n) {
      if (a.event(n)) return void t(e, n);if (a.plainObject(n)) return void t(e, d(e, n));for (var r = n.split(/\s+/), i = 0; i < r.length; i++) {
        var o = r[i];if (!a.emptyString(o)) {
          var l = o.match(s);if (l) {
            var u = l[1],
                c = l[2] ? l[2] : null;t(e, d(e, { type: u, namespace: c, target: e.context }));
          }
        }
      }
    };u.on = u.addListener = function (e, t, n, r, i) {
      return c(this, function (e, t, n, r, i, o, s) {
        a.fn(o) && e.listeners.push({ event: t, callback: o, type: n, namespace: r, qualifier: i, conf: s });
      }, e, t, n, r, i), this;
    }, u.one = function (e, t, n, r) {
      return this.on(e, t, n, r, { one: !0 });
    }, u.removeListener = u.off = function (e, t, n, r) {
      var a = this;0 !== this.emitting && (this.listeners = i.copyArray(this.listeners));for (var o = this.listeners, s = o.length - 1; s >= 0; s--) {
        !function (i) {
          var s = o[i];c(a, function (e, t, n, r, a, l) {
            if (s.type === n && (!r || s.namespace === r) && (!a || e.qualifierCompare(s.qualifier, a)) && (!l || s.callback === l)) return o.splice(i, 1), !1;
          }, e, t, n, r);
        }(s);
      }return this;
    }, u.emit = u.trigger = function (e, t, n) {
      var r = this.listeners,
          o = r.length;return this.emitting++, a.array(t) || (t = [t]), h(this, function (e, a) {
        null != n && (r = [{ event: a.event, type: a.type, namespace: a.namespace, callback: n }], o = r.length);for (var s = 0; s < o; s++) {
          !function (n) {
            var o = r[n];if (o.type === a.type && (!o.namespace || o.namespace === a.namespace || ".*" === o.namespace) && e.eventMatches(e.context, o, a)) {
              var s = [a];null != t && i.push(s, t), e.beforeEmit(e.context, o, a), o.conf && o.conf.one && (e.listeners = e.listeners.filter(function (e) {
                return e !== o;
              }));var l = e.callbackContext(e.context, o, a),
                  u = o.callback.apply(l, s);e.afterEmit(e.context, o, a), !1 === u && (a.stopPropagation(), a.preventDefault());
            }
          }(s);
        }e.bubble(e.context) && !a.isPropagationStopped() && e.parent(e.context).emit(a, t);
      }, e), this.emitting--, this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(3),
        i = n(1),
        a = n(7),
        o = n(0),
        s = n(5),
        l = n(4),
        u = function u(e) {
      var t = this;e = i.extend({}, e);var n = e.container;n && !o.htmlElement(n) && o.htmlElement(n[0]) && (n = n[0]);var l = n ? n._cyreg : null;(l = l || {}) && l.cy && (l.cy.destroy(), l = {});var u = l.readies = l.readies || [];n && (n._cyreg = l), l.cy = t;var c = void 0 !== r && void 0 !== n && !e.headless,
          d = e;d.layout = i.extend({ name: c ? "grid" : "null" }, d.layout), d.renderer = i.extend({ name: c ? "canvas" : "null" }, d.renderer);var h = function h(e, t, n) {
        return void 0 !== t ? t : void 0 !== n ? n : e;
      },
          p = this._private = { container: n, ready: !1, options: d, elements: new a(this), listeners: [], aniEles: new a(this), scratch: {}, layout: null, renderer: null, destroyed: !1, notificationsEnabled: !0, minZoom: 1e-50, maxZoom: 1e50, zoomingEnabled: h(!0, d.zoomingEnabled), userZoomingEnabled: h(!0, d.userZoomingEnabled), panningEnabled: h(!0, d.panningEnabled), userPanningEnabled: h(!0, d.userPanningEnabled), boxSelectionEnabled: h(!0, d.boxSelectionEnabled), autolock: h(!1, d.autolock, d.autolockNodes), autoungrabify: h(!1, d.autoungrabify, d.autoungrabifyNodes), autounselectify: h(!1, d.autounselectify), styleEnabled: void 0 === d.styleEnabled ? c : d.styleEnabled, zoom: o.number(d.zoom) ? d.zoom : 1, pan: { x: o.plainObject(d.pan) && o.number(d.pan.x) ? d.pan.x : 0, y: o.plainObject(d.pan) && o.number(d.pan.y) ? d.pan.y : 0 }, animation: { current: [], queue: [] }, hasCompoundNodes: !1 };this.createEmitter();var f = d.selectionType;p.selectionType = void 0 === f || "additive" !== f && "single" !== f ? "single" : f, o.number(d.minZoom) && o.number(d.maxZoom) && d.minZoom < d.maxZoom ? (p.minZoom = d.minZoom, p.maxZoom = d.maxZoom) : o.number(d.minZoom) && void 0 === d.maxZoom ? p.minZoom = d.minZoom : o.number(d.maxZoom) && void 0 === d.minZoom && (p.maxZoom = d.maxZoom);p.styleEnabled && t.setStyle([]), t.initRenderer(i.extend({ hideEdgesOnViewport: d.hideEdgesOnViewport, textureOnViewport: d.textureOnViewport, wheelSensitivity: o.number(d.wheelSensitivity) && d.wheelSensitivity > 0 ? d.wheelSensitivity : 1, motionBlur: void 0 !== d.motionBlur && d.motionBlur, motionBlurOpacity: void 0 === d.motionBlurOpacity ? .05 : d.motionBlurOpacity, pixelRatio: o.number(d.pixelRatio) && d.pixelRatio > 0 ? d.pixelRatio : void 0, desktopTapThreshold: void 0 === d.desktopTapThreshold ? 4 : d.desktopTapThreshold, touchTapThreshold: void 0 === d.touchTapThreshold ? 8 : d.touchTapThreshold }, d.renderer));var v = function v(e, n, r) {
        t.notifications(!1);var a = t.mutableElements();a.length > 0 && a.remove(), null != e && (o.plainObject(e) || o.array(e)) && t.add(e), t.one("layoutready", function (e) {
          t.notifications(!0), t.emit(e), t.notify({ type: "load", eles: t.mutableElements() }), t.one("load", n), t.emit("load");
        }).one("layoutstop", function () {
          t.one("done", r), t.emit("done");
        });var s = i.extend({}, t._private.options.layout);s.eles = t.elements(), t.layout(s).run();
      };!function (e, t) {
        if (e.some(o.promise)) return s.all(e).then(t);t(e);
      }([d.style, d.elements], function (e) {
        var n = e[0],
            r = e[1];p.styleEnabled && t.style().append(n), v(r, function () {
          t.startAnimationLoop(), p.ready = !0, o.fn(d.ready) && t.on("ready", d.ready);for (var e = 0; e < u.length; e++) {
            var n = u[e];t.on("ready", n);
          }l && (l.readies = []), t.emit("ready");
        }, d.done);
      });
    },
        c = u.prototype;i.extend(c, { instanceString: function instanceString() {
        return "core";
      }, isReady: function isReady() {
        return this._private.ready;
      }, isDestroyed: function isDestroyed() {
        return this._private.destroyed;
      }, ready: function ready(e) {
        return this.isReady() ? this.emitter().emit("ready", [], e) : this.on("ready", e), this;
      }, destroy: function destroy() {
        var e = this;if (!e.isDestroyed()) return e.stopAnimationLoop(), e.destroyRenderer(), this.emit("destroy"), e._private.destroyed = !0, e;
      }, hasElementWithId: function hasElementWithId(e) {
        return this._private.elements.hasElementWithId(e);
      }, getElementById: function getElementById(e) {
        return this._private.elements.getElementById(e);
      }, selectionType: function selectionType() {
        return this._private.selectionType;
      }, hasCompoundNodes: function hasCompoundNodes() {
        return this._private.hasCompoundNodes;
      }, headless: function headless() {
        return "null" === this._private.options.renderer.name;
      }, styleEnabled: function styleEnabled() {
        return this._private.styleEnabled;
      }, addToPool: function addToPool(e) {
        return this._private.elements.merge(e), this;
      }, removeFromPool: function removeFromPool(e) {
        return this._private.elements.unmerge(e), this;
      }, container: function container() {
        return this._private.container;
      }, options: function options() {
        return i.copy(this._private.options);
      }, json: function json(e) {
        var t = this,
            n = t._private,
            r = t.mutableElements();if (o.plainObject(e)) {
          if (t.startBatch(), e.elements) {
            var a = {},
                s = function s(e, n) {
              for (var r = 0; r < e.length; r++) {
                var o = e[r],
                    s = o.data.id,
                    l = t.getElementById(s);a[s] = !0, 0 !== l.length ? l.json(o) : n ? t.add(i.extend({ group: n }, o)) : t.add(o);
              }
            };if (o.array(e.elements)) s(e.elements);else for (var l = ["nodes", "edges"], u = 0; u < l.length; u++) {
              var c = l[u],
                  d = e.elements[c];o.array(d) && s(d, c);
            }r.stdFilter(function (e) {
              return !a[e.id()];
            }).remove();
          }e.style && t.style(e.style), null != e.zoom && e.zoom !== n.zoom && t.zoom(e.zoom), e.pan && (e.pan.x === n.pan.x && e.pan.y === n.pan.y || t.pan(e.pan));for (var h = ["minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "panningEnabled", "userPanningEnabled", "boxSelectionEnabled", "autolock", "autoungrabify", "autounselectify"], p = 0; p < h.length; p++) {
            var f = h[p];null != e[f] && t[f](e[f]);
          }return t.endBatch(), this;
        }if (void 0 === e) {
          var v = {};return v.elements = {}, r.forEach(function (e) {
            var t = e.group();v.elements[t] || (v.elements[t] = []), v.elements[t].push(e.json());
          }), this._private.styleEnabled && (v.style = t.style().json()), v.zoomingEnabled = t._private.zoomingEnabled, v.userZoomingEnabled = t._private.userZoomingEnabled, v.zoom = t._private.zoom, v.minZoom = t._private.minZoom, v.maxZoom = t._private.maxZoom, v.panningEnabled = t._private.panningEnabled, v.userPanningEnabled = t._private.userPanningEnabled, v.pan = i.copy(t._private.pan), v.boxSelectionEnabled = t._private.boxSelectionEnabled, v.renderer = i.copy(t._private.options.renderer), v.hideEdgesOnViewport = t._private.options.hideEdgesOnViewport, v.textureOnViewport = t._private.options.textureOnViewport, v.wheelSensitivity = t._private.options.wheelSensitivity, v.motionBlur = t._private.options.motionBlur, v;
        }
      }, scratch: l.data({ field: "scratch", bindingEvent: "scratch", allowBinding: !0, allowSetting: !0, settingEvent: "scratch", settingTriggersEvent: !0, triggerFnName: "trigger", allowGetting: !0 }), removeScratch: l.removeData({ field: "scratch", event: "scratch", triggerFnName: "trigger", triggerEvent: !0 }) }), c.$id = c.getElementById, [n(70), n(71), n(79), n(80), n(81), n(82), n(83), n(84), n(85), n(94)].forEach(function (e) {
      i.extend(c, e);
    }), e.exports = u;
  }, function (e, t, n) {
    "use strict";
    e.exports = function (e, t) {
      t || (t = function t() {
        if (1 === arguments.length) return arguments[0];if (0 === arguments.length) return "undefined";for (var e = [], t = 0; t < arguments.length; t++) {
          e.push(arguments[t]);
        }return e.join("$");
      });var n = function n() {
        var r = this,
            i = arguments,
            a = void 0,
            o = t.apply(r, i),
            s = n.cache;return (a = s[o]) || (a = s[o] = e.apply(r, i)), a;
      };return n.cache = {}, n;
    };
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = n(8),
        o = function o(e, t, n) {
      if (n = !(void 0 !== n && !n), void 0 === e || void 0 === t || !i.core(e)) return void r.error("An element must have a core reference and parameters set");var o = t.group;if (null == o && (o = t.data && null != t.data.source && null != t.data.target ? "edges" : "nodes"), "nodes" !== o && "edges" !== o) return void r.error("An element must be of type `nodes` or `edges`; you specified `" + o + "`");this.length = 1, this[0] = this;var s = this._private = { cy: e, single: !0, data: t.data || {}, position: t.position || {}, autoWidth: void 0, autoHeight: void 0, autoPadding: void 0, compoundBoundsClean: !1, listeners: [], group: o, style: {}, rstyle: {}, styleCxts: [], removed: !0, selected: !!t.selected, selectable: void 0 === t.selectable || !!t.selectable, locked: !!t.locked, grabbed: !1, grabbable: void 0 === t.grabbable || !!t.grabbable, active: !1, classes: new a(), animation: { current: [], queue: [] }, rscratch: {}, scratch: t.scratch || {}, edges: [], children: [], parent: null, traversalCache: {}, backgrounding: !1 };if (t.renderedPosition) {
        var l = t.renderedPosition,
            u = e.pan(),
            c = e.zoom();s.position = { x: (l.x - u.x) / c, y: (l.y - u.y) / c };
      }if (i.string(t.classes)) for (var d = t.classes.split(/\s+/), h = 0, p = d.length; h < p; h++) {
        var f = d[h];f && "" !== f && s.classes.add(f);
      }(t.style || t.css) && e.style().applyBypass(this, t.style || t.css), this.createEmitter(), (void 0 === n || n) && this.restore();
    };e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = [{ selector: ":selected", matches: function matches(e) {
        return e.selected();
      } }, { selector: ":unselected", matches: function matches(e) {
        return !e.selected();
      } }, { selector: ":selectable", matches: function matches(e) {
        return e.selectable();
      } }, { selector: ":unselectable", matches: function matches(e) {
        return !e.selectable();
      } }, { selector: ":locked", matches: function matches(e) {
        return e.locked();
      } }, { selector: ":unlocked", matches: function matches(e) {
        return !e.locked();
      } }, { selector: ":visible", matches: function matches(e) {
        return e.visible();
      } }, { selector: ":hidden", matches: function matches(e) {
        return !e.visible();
      } }, { selector: ":transparent", matches: function matches(e) {
        return e.transparent();
      } }, { selector: ":grabbed", matches: function matches(e) {
        return e.grabbed();
      } }, { selector: ":free", matches: function matches(e) {
        return !e.grabbed();
      } }, { selector: ":removed", matches: function matches(e) {
        return e.removed();
      } }, { selector: ":inside", matches: function matches(e) {
        return !e.removed();
      } }, { selector: ":grabbable", matches: function matches(e) {
        return e.grabbable();
      } }, { selector: ":ungrabbable", matches: function matches(e) {
        return !e.grabbable();
      } }, { selector: ":animated", matches: function matches(e) {
        return e.animated();
      } }, { selector: ":unanimated", matches: function matches(e) {
        return !e.animated();
      } }, { selector: ":parent", matches: function matches(e) {
        return e.isParent();
      } }, { selector: ":childless", matches: function matches(e) {
        return e.isChildless();
      } }, { selector: ":child", matches: function matches(e) {
        return e.isChild();
      } }, { selector: ":orphan", matches: function matches(e) {
        return e.isOrphan();
      } }, { selector: ":nonorphan", matches: function matches(e) {
        return e.isChild();
      } }, { selector: ":loop", matches: function matches(e) {
        return e.isLoop();
      } }, { selector: ":simple", matches: function matches(e) {
        return e.isSimple();
      } }, { selector: ":active", matches: function matches(e) {
        return e.active();
      } }, { selector: ":inactive", matches: function matches(e) {
        return !e.active();
      } }, { selector: ":backgrounding", matches: function matches(e) {
        return e.backgrounding();
      } }, { selector: ":nonbackgrounding", matches: function matches(e) {
        return !e.backgrounding();
      } }].sort(function (e, t) {
      return r.sort.descending(e.selector, t.selector);
    }),
        a = function e(t, n) {
      return (e.lookup = e.lookup || function () {
        for (var e = {}, t = void 0, n = 0; n < i.length; n++) {
          t = i[n], e[t.selector] = t.matches;
        }return e;
      }())[t](n);
    },
        o = "(" + i.map(function (e) {
      return e.selector;
    }).join("|") + ")";e.exports = { stateSelectors: i, stateSelectorMatches: a, stateSelectorRegex: o };
  }, function (e, t, n) {
    "use strict";
    function r() {
      return !1;
    }function i() {
      return !0;
    } /*!
      Event object based on jQuery events, MIT license
      https://jquery.org/license/
      https://tldrlegal.com/license/mit-license
      https://github.com/jquery/jquery/blob/master/src/event.js
      */
    var a = function a(e, t) {
      this.recycle(e, t);
    };a.prototype = { instanceString: function instanceString() {
        return "event";
      }, recycle: function recycle(e, t) {
        if (this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = r, null != e && e.preventDefault ? (this.type = e.type, this.isDefaultPrevented = e.defaultPrevented ? i : r) : null != e && e.type ? t = e : this.type = e, null != t && (this.originalEvent = t.originalEvent, this.type = null != t.type ? t.type : this.type, this.cy = t.cy, this.target = t.target, this.position = t.position, this.renderedPosition = t.renderedPosition, this.namespace = t.namespace, this.layout = t.layout), null != this.cy && null != this.position && null == this.renderedPosition) {
          var n = this.position,
              a = this.cy.zoom(),
              o = this.cy.pan();this.renderedPosition = { x: n.x * a + o.x, y: n.y * a + o.y };
        }this.timeStamp = e && e.timeStamp || Date.now();
      }, preventDefault: function preventDefault() {
        this.isDefaultPrevented = i;var e = this.originalEvent;e && e.preventDefault && e.preventDefault();
      }, stopPropagation: function stopPropagation() {
        this.isPropagationStopped = i;var e = this.originalEvent;e && e.stopPropagation && e.stopPropagation();
      }, stopImmediatePropagation: function stopImmediatePropagation() {
        this.isImmediatePropagationStopped = i, this.stopPropagation();
      }, isDefaultPrevented: r, isPropagationStopped: r, isImmediatePropagationStopped: r }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = function i(e, t) {
      function n(e) {
        var t = e.pstyle("z-compound-depth");return "auto" === t.value ? o ? e.zDepth() : 0 : "bottom" === t.value ? -1 : "top" === t.value ? r.MAX_INT : 0;
      }function i(e) {
        return "auto" === e.pstyle("z-index-compare").value && e.isNode() ? 1 : 0;
      }var a = e.cy(),
          o = a.hasCompoundNodes(),
          s = n(e) - n(t);if (0 !== s) return s;var l = i(e) - i(t);if (0 !== l) return l;var u = e.pstyle("z-index").value - t.pstyle("z-index").value;return 0 !== u ? u : e.poolIndex() - t.poolIndex();
    };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(6),
        o = function e(t) {
      return this instanceof e ? r.core(t) ? (this._private = { cy: t, coreStyle: {} }, this.length = 0, void this.resetToDefault()) : void i.error("A style must have a core reference") : new e(t);
    },
        s = o.prototype;s.instanceString = function () {
      return "style";
    }, s.clear = function () {
      for (var e = 0; e < this.length; e++) {
        this[e] = void 0;
      }return this.length = 0, this._private.newStyle = !0, this;
    }, s.resetToDefault = function () {
      return this.clear(), this.addDefaultStylesheet(), this;
    }, s.core = function () {
      return this._private.coreStyle;
    }, s.selector = function (e) {
      var t = "core" === e ? null : new a(e),
          n = this.length++;return this[n] = { selector: t, properties: [], mappedProperties: [], index: n }, this;
    }, s.css = function () {
      var e = this,
          t = arguments;switch (t.length) {case 1:
          for (var n = t[0], r = 0; r < e.properties.length; r++) {
            var a = e.properties[r],
                o = n[a.name];void 0 === o && (o = n[i.dash2camel(a.name)]), void 0 !== o && this.cssRule(a.name, o);
          }break;case 2:
          this.cssRule(t[0], t[1]);}return this;
    }, s.style = s.css, s.cssRule = function (e, t) {
      var n = this.parse(e, t);if (n) {
        var r = this.length - 1;this[r].properties.push(n), this[r].properties[n.name] = n, n.name.match(/pie-(\d+)-background-size/) && n.value && (this._private.hasPie = !0), n.mapped && this[r].mappedProperties.push(n);!this[r].selector && (this._private.coreStyle[n.name] = n);
      }return this;
    }, s.append = function (e) {
      return r.stylesheet(e) ? e.appendToStyle(this) : r.array(e) ? this.appendFromJson(e) : r.string(e) && this.appendFromString(e), this;
    }, o.fromJson = function (e, t) {
      var n = new o(e);return n.fromJson(t), n;
    }, o.fromString = function (e, t) {
      return new o(e).fromString(t);
    }, [n(86), n(87), n(88), n(89), n(90), n(91), n(92), n(93)].forEach(function (e) {
      i.extend(s, e);
    }), o.types = s.types, o.properties = s.properties, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(1);e.exports = { setupDequeueing: function setupDequeueing(e) {
        return function () {
          var t = this,
              n = this.renderer;if (!t.dequeueingSetup) {
            t.dequeueingSetup = !0;var i = r.debounce(function () {
              n.redrawHint("eles", !0), n.redrawHint("drag", !0), n.redraw();
            }, e.deqRedrawThreshold),
                a = function a(_a2, o) {
              for (var s = r.performanceNow(), l = n.averageRedrawTime, u = n.lastRedrawTime, c = [], d = n.cy.extent(), h = n.getPixelRatio();;) {
                var p = r.performanceNow(),
                    f = p - s,
                    v = p - o;if (u < 1e3 / 60) {
                  var g = 1e3 / 60 - (_a2 ? l : 0);if (v >= e.deqFastCost * g) break;
                } else if (_a2) {
                  if (f >= e.deqCost * u || f >= e.deqAvgCost * l) break;
                } else if (v >= e.deqNoDrawCost * (1e3 / 60)) break;var y = e.deq(t, h, d);if (!(y.length > 0)) break;for (var m = 0; m < y.length; m++) {
                  c.push(y[m]);
                }
              }c.length > 0 && (e.onDeqd(t, c), !_a2 && e.shouldRedraw(t, c, h, d) && i());
            },
                o = e.priority || r.noop;n.beforeRender(a, o(t));
          }
        };
      } };
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(12),
        a = n(95),
        o = n(138),
        s = function s(e) {
      return void 0 === e && (e = {}), r.plainObject(e) ? new i(e) : r.string(e) ? a.apply(a, arguments) : void 0;
    };s.use = function (e) {
      var t = Array.prototype.slice.call(arguments, 1);return t.unshift(s), e.apply(null, t), this;
    }, s.version = n(139), s.stylesheet = s.Stylesheet = o, e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = { hex2tuple: function hex2tuple(e) {
        if ((4 === e.length || 7 === e.length) && "#" === e[0]) {
          var t = 4 === e.length,
              n = void 0,
              r = void 0,
              i = void 0;return t ? (n = parseInt(e[1] + e[1], 16), r = parseInt(e[2] + e[2], 16), i = parseInt(e[3] + e[3], 16)) : (n = parseInt(e[1] + e[2], 16), r = parseInt(e[3] + e[4], 16), i = parseInt(e[5] + e[6], 16)), [n, r, i];
        }
      }, hsl2tuple: function hsl2tuple(e) {
        function t(e, t, n) {
          return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? e + 6 * (t - e) * n : n < .5 ? t : n < 2 / 3 ? e + (t - e) * (2 / 3 - n) * 6 : e;
        }var n = void 0,
            r = void 0,
            i = void 0,
            a = void 0,
            o = void 0,
            s = void 0,
            l = void 0,
            u = void 0,
            c = new RegExp("^" + this.regex.hsla + "$").exec(e);if (c) {
          if (r = parseInt(c[1]), r < 0 ? r = (360 - -1 * r % 360) % 360 : r > 360 && (r %= 360), r /= 360, (i = parseFloat(c[2])) < 0 || i > 100) return;if (i /= 100, (a = parseFloat(c[3])) < 0 || a > 100) return;if (a /= 100, void 0 !== (o = c[4]) && ((o = parseFloat(o)) < 0 || o > 1)) return;if (0 === i) s = l = u = Math.round(255 * a);else {
            var d = a < .5 ? a * (1 + i) : a + i - a * i,
                h = 2 * a - d;s = Math.round(255 * t(h, d, r + 1 / 3)), l = Math.round(255 * t(h, d, r)), u = Math.round(255 * t(h, d, r - 1 / 3));
          }n = [s, l, u, o];
        }return n;
      }, rgb2tuple: function rgb2tuple(e) {
        var t = void 0,
            n = new RegExp("^" + this.regex.rgba + "$").exec(e);if (n) {
          t = [];for (var r = [], i = 1; i <= 3; i++) {
            var a = n[i];if ("%" === a[a.length - 1] && (r[i] = !0), a = parseFloat(a), r[i] && (a = a / 100 * 255), a < 0 || a > 255) return;t.push(Math.floor(a));
          }var o = r[1] || r[2] || r[3],
              s = r[1] && r[2] && r[3];if (o && !s) return;var l = n[4];if (void 0 !== l) {
            if ((l = parseFloat(l)) < 0 || l > 1) return;t.push(l);
          }
        }return t;
      }, colorname2tuple: function colorname2tuple(e) {
        return this.colors[e.toLowerCase()];
      }, color2tuple: function color2tuple(e) {
        return (r.array(e) ? e : null) || this.colorname2tuple(e) || this.hex2tuple(e) || this.rgb2tuple(e) || this.hsl2tuple(e);
      }, colors: { transparent: [0, 0, 0, 0], aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], grey: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] } };
  }, function (e, t, n) {
    "use strict";
    var r = n(0);e.exports = { mapEmpty: function mapEmpty(e) {
        return null == e || 0 === Object.keys(e).length;
      }, pushMap: function pushMap(e) {
        var t = this.getMap(e);null == t ? this.setMap(this.extend({}, e, { value: [e.value] })) : t.push(e.value);
      }, setMap: function setMap(e) {
        for (var t = e.map, n = e.keys, i = n.length, a = 0; a < i; a++) {
          var o = n[a];r.plainObject(o) && this.error("Tried to set map with object key"), a < n.length - 1 ? (null == t[o] && (t[o] = {}), t = t[o]) : t[o] = e.value;
        }
      }, getMap: function getMap(e) {
        for (var t = e.map, n = e.keys, i = n.length, a = 0; a < i; a++) {
          var o = n[a];if (r.plainObject(o) && this.error("Tried to get map with object key"), null == (t = t[o])) return t;
        }return t;
      }, deleteMap: function deleteMap(e) {
        for (var t = e.map, n = e.keys, i = n.length, a = e.keepChildren, o = 0; o < i; o++) {
          var s = n[o];r.plainObject(s) && this.error("Tried to delete map with object key");if (o === e.keys.length - 1) {
            if (a) for (var l = Object.keys(t), u = 0; u < l.length; u++) {
              var c = l[u];a[c] || (t[c] = void 0);
            } else t[s] = void 0;
          } else t = t[s];
        }
      } };
  }, function (e, t, n) {
    "use strict";
    var r = "(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))";e.exports = { regex: { number: r, rgba: "rgb[a]?\\(((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)(?:\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)", rgbaNoBackRefs: "rgb[a]?\\((?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%]?)(?:\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)", hsla: "hsl[a]?\\(((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?)))\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])(?:\\s*,\\s*((?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)", hslaNoBackRefs: "hsl[a]?\\((?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?)))\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))[%])(?:\\s*,\\s*(?:(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))))?\\)", hex3: "\\#[0-9a-fA-F]{3}", hex6: "\\#[0-9a-fA-F]{6}" } };
  }, function (e, t, n) {
    "use strict";
    var r = n(13),
        i = n(0);e.exports = { camel2dash: r(function (e) {
        return e.replace(/([A-Z])/g, function (e) {
          return "-" + e.toLowerCase();
        });
      }), dash2camel: r(function (e) {
        return e.replace(/(-\w)/g, function (e) {
          return e[1].toUpperCase();
        });
      }), prependCamel: r(function (e, t) {
        return e + t[0].toUpperCase() + t.substring(1);
      }, function (e, t) {
        return e + "$" + t;
      }), capitalize: function capitalize(e) {
        return i.emptyString(e) ? e : e.charAt(0).toUpperCase() + e.substring(1);
      } };
  }, function (e, t, n) {
    "use strict";
    var r = n(3),
        i = r ? r.performance : null,
        a = {},
        o = i && i.now ? function () {
      return i.now();
    } : function () {
      return Date.now();
    },
        s = function () {
      if (r) {
        if (r.requestAnimationFrame) return function (e) {
          r.requestAnimationFrame(e);
        };if (r.mozRequestAnimationFrame) return function (e) {
          r.mozRequestAnimationFrame(e);
        };if (r.webkitRequestAnimationFrame) return function (e) {
          r.webkitRequestAnimationFrame(e);
        };if (r.msRequestAnimationFrame) return function (e) {
          r.msRequestAnimationFrame(e);
        };
      }return function (e) {
        e && setTimeout(function () {
          e(o());
        }, 1e3 / 60);
      };
    }();a.requestAnimationFrame = function (e) {
      s(e);
    }, a.performanceNow = o, a.debounce = n(26), a.now = function () {
      return Date.now();
    }, e.exports = a;
  }, function (e, t) {
    function n(e, t, n) {
      function i(t) {
        var n = v,
            r = g;return v = g = void 0, C = t, m = e.apply(r, n);
      }function a(e) {
        return C = e, b = setTimeout(c, t), S ? i(e) : m;
      }function l(e) {
        var n = e - P,
            r = e - C,
            i = t - n;return T ? w(i, y - r) : i;
      }function u(e) {
        var n = e - P,
            r = e - C;return void 0 === P || n >= t || n < 0 || T && r >= y;
      }function c() {
        var e = E();if (u(e)) return d(e);b = setTimeout(c, l(e));
      }function d(e) {
        return b = void 0, D && v ? i(e) : (v = g = void 0, m);
      }function h() {
        void 0 !== b && clearTimeout(b), C = 0, v = P = g = b = void 0;
      }function p() {
        return void 0 === b ? m : d(E());
      }function f() {
        var e = E(),
            n = u(e);if (v = arguments, g = this, P = e, n) {
          if (void 0 === b) return a(P);if (T) return b = setTimeout(c, t), i(P);
        }return void 0 === b && (b = setTimeout(c, t)), m;
      }var v,
          g,
          y,
          m,
          b,
          P,
          C = 0,
          S = !1,
          T = !1,
          D = !0;if ("function" != typeof e) throw new TypeError(s);return t = o(t) || 0, r(n) && (S = !!n.leading, T = "maxWait" in n, y = T ? x(o(n.maxWait) || 0, t) : y, D = "trailing" in n ? !!n.trailing : D), f.cancel = h, f.flush = p, f;
    }function r(e) {
      var t = typeof e === "undefined" ? "undefined" : _typeof(e);return !!e && ("object" == t || "function" == t);
    }function i(e) {
      return !!e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e));
    }function a(e) {
      return "symbol" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || i(e) && b.call(e) == u;
    }function o(e) {
      if ("number" == typeof e) return e;if (a(e)) return l;if (r(e)) {
        var t = "function" == typeof e.valueOf ? e.valueOf() : e;e = r(t) ? t + "" : t;
      }if ("string" != typeof e) return 0 === e ? e : +e;e = e.replace(c, "");var n = h.test(e);return n || p.test(e) ? f(e.slice(2), n ? 2 : 8) : d.test(e) ? l : +e;
    }var s = "Expected a function",
        l = NaN,
        u = "[object Symbol]",
        c = /^\s+|\s+$/g,
        d = /^[-+]0x[0-9a-f]+$/i,
        h = /^0b[01]+$/i,
        p = /^0o[0-7]+$/i,
        f = parseInt,
        v = "object" == (typeof global === "undefined" ? "undefined" : _typeof(global)) && global && global.Object === Object && global,
        g = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
        y = v || g || Function("return this")(),
        m = Object.prototype,
        b = m.toString,
        x = Math.max,
        w = Math.min,
        E = function E() {
      return y.Date.now();
    };e.exports = n;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      return e < t ? -1 : e > t ? 1 : 0;
    }function i(e, t) {
      return -1 * r(e, t);
    }e.exports = { sort: { ascending: r, descending: i } };
  }, function (e, t, n) {
    "use strict";
    function r() {
      this._obj = {};
    }var i = r.prototype;i.set = function (e, t) {
      this._obj[e] = t;
    }, i.delete = function (e) {
      this._obj[e] = null;
    }, i.has = function (e) {
      return null != this._obj[e];
    }, i.get = function (e) {
      return this._obj[e];
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = {};[n(30), n(31), n(34), n(35), n(36), n(37), n(38), n(39), n(40), n(41), n(42)].forEach(function (e) {
      r.extend(i, e);
    }), e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = function i(e) {
      return e = { bfs: e.bfs || !e.dfs, dfs: e.dfs || !e.bfs }, function (t, n, i) {
        var a;r.plainObject(t) && !r.elementOrCollection(t) && (a = t, t = a.roots || a.root, n = a.visit, i = a.directed), i = 2 !== arguments.length || r.fn(n) ? i : n, n = r.fn(n) ? n : function () {};for (var o, s = this._private.cy, l = t = r.string(t) ? this.filter(t) : t, u = [], c = [], d = {}, h = {}, p = {}, f = 0, v = this.nodes(), g = this.edges(), y = 0; y < l.length; y++) {
          l[y].isNode() && (u.unshift(l[y]), e.bfs && (p[l[y].id()] = !0, c.push(l[y])), h[l[y].id()] = 0);
        }for (; 0 !== u.length;) {
          var l = e.bfs ? u.shift() : u.pop();if (e.dfs) {
            if (p[l.id()]) continue;p[l.id()] = !0, c.push(l);
          }var m,
              b = h[l.id()],
              x = d[l.id()],
              w = null == x ? void 0 : x.connectedNodes().not(l)[0];if (!0 === (m = n(l, x, w, f++, b))) {
            o = l;break;
          }if (!1 === m) break;for (var E = l.connectedEdges(i ? function (e) {
            return e.data("source") === l.id();
          } : void 0).intersect(g), y = 0; y < E.length; y++) {
            var P = E[y],
                C = P.connectedNodes(function (e) {
              return e.id() !== l.id();
            }).intersect(v);0 === C.length || p[C.id()] || (C = C[0], u.push(C), e.bfs && (p[C.id()] = !0, c.push(C)), d[C.id()] = P, h[C.id()] = h[l.id()] + 1);
          }
        }for (var S = [], y = 0; y < c.length; y++) {
          var T = c[y],
              D = d[T.id()];D && S.push(D), S.push(T);
        }return { path: s.collection(S, { unique: !0 }), found: s.collection(o) };
      };
    },
        a = { breadthFirstSearch: i({ bfs: !0 }), depthFirstSearch: i({ dfs: !0 }) };a.bfs = a.breadthFirstSearch, a.dfs = a.depthFirstSearch, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(9),
        a = { dijkstra: function dijkstra(e, t, n) {
        var a;r.plainObject(e) && !r.elementOrCollection(e) && (a = e, e = a.root, t = a.weight, n = a.directed);var o = this._private.cy;t = r.fn(t) ? t : function () {
          return 1;
        };for (var s = r.string(e) ? this.filter(e)[0] : e[0], l = {}, u = {}, c = {}, d = this.edges().filter(function (e) {
          return !e.isLoop();
        }), h = this.nodes(), p = function p(e) {
          return l[e.id()];
        }, f = new i(function (e, t) {
          return p(e) - p(t);
        }), v = 0; v < h.length; v++) {
          var g = h[v];l[g.id()] = g.same(s) ? 0 : 1 / 0, f.push(g);
        }for (; f.size() > 0;) {
          var y = f.pop(),
              m = p(y),
              b = y.id();if (c[b] = m, m !== 1 / 0) for (var x = y.neighborhood().intersect(h), v = 0; v < x.length; v++) {
            var w = x[v],
                E = w.id(),
                P = function (e, r) {
              for (var i, a = (n ? e.edgesTo(r) : e.edgesWith(r)).intersect(d), o = 1 / 0, s = 0; s < a.length; s++) {
                var l = a[s],
                    u = t(l);(u < o || !i) && (o = u, i = l);
              }return { edge: i, dist: o };
            }(y, w),
                C = m + P.dist;C < p(w) && (!function (e, t) {
              l[e.id()] = t, f.updateItem(e);
            }(w, C), u[E] = { node: y, edge: P.edge });
          }
        }return { distanceTo: function distanceTo(e) {
            var t = r.string(e) ? h.filter(e)[0] : e[0];return c[t.id()];
          }, pathTo: function pathTo(e) {
            var t = r.string(e) ? h.filter(e)[0] : e[0],
                n = [],
                i = t;if (t.length > 0) for (n.unshift(t); u[i.id()];) {
              var a = u[i.id()];n.unshift(a.edge), n.unshift(a.node), i = a.node;
            }return o.collection(n);
          } };
      } };e.exports = a;
  }, function (e, t, n) {
    e.exports = n(33);
  }, function (e, t, n) {
    var r, i, a;(function () {
      var n, o, s, l, u, c, d, h, p, f, v, g, y, m, b;s = Math.floor, f = Math.min, o = function o(e, t) {
        return e < t ? -1 : e > t ? 1 : 0;
      }, p = function p(e, t, n, r, i) {
        var a;if (null == n && (n = 0), null == i && (i = o), n < 0) throw new Error("lo must be non-negative");for (null == r && (r = e.length); n < r;) {
          a = s((n + r) / 2), i(t, e[a]) < 0 ? r = a : n = a + 1;
        }return [].splice.apply(e, [n, n - n].concat(t)), t;
      }, c = function c(e, t, n) {
        return null == n && (n = o), e.push(t), m(e, 0, e.length - 1, n);
      }, u = function u(e, t) {
        var n, r;return null == t && (t = o), n = e.pop(), e.length ? (r = e[0], e[0] = n, b(e, 0, t)) : r = n, r;
      }, h = function h(e, t, n) {
        var r;return null == n && (n = o), r = e[0], e[0] = t, b(e, 0, n), r;
      }, d = function d(e, t, n) {
        var r;return null == n && (n = o), e.length && n(e[0], t) < 0 && (r = [e[0], t], t = r[0], e[0] = r[1], b(e, 0, n)), t;
      }, l = function l(e, t) {
        var n, r, i, a, l, u;for (null == t && (t = o), a = function () {
          u = [];for (var t = 0, n = s(e.length / 2); 0 <= n ? t < n : t > n; 0 <= n ? t++ : t--) {
            u.push(t);
          }return u;
        }.apply(this).reverse(), l = [], r = 0, i = a.length; r < i; r++) {
          n = a[r], l.push(b(e, n, t));
        }return l;
      }, y = function y(e, t, n) {
        var r;if (null == n && (n = o), -1 !== (r = e.indexOf(t))) return m(e, 0, r, n), b(e, r, n);
      }, v = function v(e, t, n) {
        var r, i, a, s, u;if (null == n && (n = o), i = e.slice(0, t), !i.length) return i;for (l(i, n), u = e.slice(t), a = 0, s = u.length; a < s; a++) {
          r = u[a], d(i, r, n);
        }return i.sort(n).reverse();
      }, g = function g(e, t, n) {
        var r, i, a, s, c, d, h, v, g;if (null == n && (n = o), 10 * t <= e.length) {
          if (a = e.slice(0, t).sort(n), !a.length) return a;for (i = a[a.length - 1], h = e.slice(t), s = 0, d = h.length; s < d; s++) {
            r = h[s], n(r, i) < 0 && (p(a, r, 0, null, n), a.pop(), i = a[a.length - 1]);
          }return a;
        }for (l(e, n), g = [], c = 0, v = f(t, e.length); 0 <= v ? c < v : c > v; 0 <= v ? ++c : --c) {
          g.push(u(e, n));
        }return g;
      }, m = function m(e, t, n, r) {
        var i, a, s;for (null == r && (r = o), i = e[n]; n > t && (s = n - 1 >> 1, a = e[s], r(i, a) < 0);) {
          e[n] = a, n = s;
        }return e[n] = i;
      }, b = function b(e, t, n) {
        var r, i, a, s, l;for (null == n && (n = o), i = e.length, l = t, a = e[t], r = 2 * t + 1; r < i;) {
          s = r + 1, s < i && !(n(e[r], e[s]) < 0) && (r = s), e[t] = e[r], t = r, r = 2 * t + 1;
        }return e[t] = a, m(e, l, t, n);
      }, n = function () {
        function e(e) {
          this.cmp = null != e ? e : o, this.nodes = [];
        }return e.push = c, e.pop = u, e.replace = h, e.pushpop = d, e.heapify = l, e.updateItem = y, e.nlargest = v, e.nsmallest = g, e.prototype.push = function (e) {
          return c(this.nodes, e, this.cmp);
        }, e.prototype.pop = function () {
          return u(this.nodes, this.cmp);
        }, e.prototype.peek = function () {
          return this.nodes[0];
        }, e.prototype.contains = function (e) {
          return -1 !== this.nodes.indexOf(e);
        }, e.prototype.replace = function (e) {
          return h(this.nodes, e, this.cmp);
        }, e.prototype.pushpop = function (e) {
          return d(this.nodes, e, this.cmp);
        }, e.prototype.heapify = function () {
          return l(this.nodes, this.cmp);
        }, e.prototype.updateItem = function (e) {
          return y(this.nodes, e, this.cmp);
        }, e.prototype.clear = function () {
          return this.nodes = [];
        }, e.prototype.empty = function () {
          return 0 === this.nodes.length;
        }, e.prototype.size = function () {
          return this.nodes.length;
        }, e.prototype.clone = function () {
          var t;return t = new e(), t.nodes = this.nodes.slice(0), t;
        }, e.prototype.toArray = function () {
          return this.nodes.slice(0);
        }, e.prototype.insert = e.prototype.push, e.prototype.top = e.prototype.peek, e.prototype.front = e.prototype.peek, e.prototype.has = e.prototype.contains, e.prototype.copy = e.prototype.clone, e;
      }(), function (n, o) {
        i = [], r = o, void 0 !== (a = "function" == typeof r ? r.apply(t, i) : r) && (e.exports = a);
      }(0, function () {
        return n;
      });
    }).call(this);
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = { kruskal: function kruskal(e) {
        function t(e) {
          for (var t = 0; t < a.length; t++) {
            var n = a[t];if (n.anySame(e)) return { eles: n, index: t };
          }
        }var n = this.cy();e = r.fn(e) ? e : function () {
          return 1;
        };for (var i = n.collection(n, []), a = [], o = this.nodes(), s = 0; s < o.length; s++) {
          a.push(o[s].collection());
        }for (var l = this.edges(), u = l.toArray().sort(function (t, n) {
          return e(t) - e(n);
        }), s = 0; s < u.length; s++) {
          var c = u[s],
              d = c.source()[0],
              h = c.target()[0],
              p = t(d),
              f = t(h);p.index !== f.index && (i = i.add(c), a[p.index] = p.eles.add(f.eles), a.splice(f.index, 1));
        }return o.add(i);
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = { aStar: function aStar(e) {
        var t = this;e = e || {};var n = this._private.cy;if (null != e && null != e.root) {
          var i = r.string(e.root) ? this.filter(e.root)[0] : e.root[0];if (null != e.goal) {
            var a = r.string(e.goal) ? this.filter(e.goal)[0] : e.goal[0];if (null != e.heuristic && r.fn(e.heuristic)) var o = e.heuristic;else var o = function o() {
              return 0;
            };if (null != e.weight && r.fn(e.weight)) var s = e.weight;else var s = function s(e) {
              return 1;
            };if (null != e.directed) var l = e.directed;else var l = !1;var u = i.id(),
                c = a.id(),
                d = [],
                h = [u],
                p = {},
                f = {},
                v = {},
                g = {};v[u] = 0, g[u] = o(i);for (var y = 0; h.length > 0;) {
              var m = function (e, t) {
                if (0 !== e.length) {
                  for (var n = 0, r = t[e[0]], i = 1; i < e.length; i++) {
                    var a = t[e[i]];a < r && (r = a, n = i);
                  }return n;
                }
              }(h, g),
                  b = n.getElementById(h[m]),
                  x = b.id();if (y++, x == c) {
                var w = function e(t, r, i, a) {
                  if (t == r) return a.unshift(n.getElementById(r)), a;if (r in i) {
                    var o = i[r],
                        s = f[r];return a.unshift(n.getElementById(s)), a.unshift(n.getElementById(r)), e(t, o, i, a);
                  }
                }(u, c, p, []);return { found: !0, distance: v[x], path: t.spawn(w), steps: y };
              }d.push(x), h.splice(m, 1);for (var E = b._private.edges, P = 0; P < E.length; P++) {
                var C = E[P];if (this.hasElementWithId(C.id()) && (!l || C.data("source") === x)) {
                  var S = C.source(),
                      T = C.target(),
                      D = S.id() !== x ? S : T,
                      k = D.id();if (this.hasElementWithId(k) && -1 == d.indexOf(k)) {
                    var _ = v[x] + s(C);-1 != h.indexOf(k) ? _ < v[k] && (v[k] = _, g[k] = _ + o(D), p[k] = x) : (v[k] = _, g[k] = _ + o(D), h.push(k), p[k] = x, f[k] = C.id());
                  }
                }
              }
            }return { found: !1, distance: void 0, path: void 0, steps: y };
          }
        }
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = { floydWarshall: function floydWarshall(e) {
        e = e || {};var t = this.cy();if (null != e.weight && r.fn(e.weight)) var n = e.weight;else var n = function n(e) {
          return 1;
        };if (null != e.directed) var i = e.directed;else var i = !1;for (var a = this.edges().stdFilter(function (e) {
          return !e.isLoop();
        }), o = this.nodes(), s = o.length, l = {}, u = 0; u < s; u++) {
          l[o[u].id()] = u;
        }for (var c = [], u = 0; u < s; u++) {
          for (var d = new Array(s), h = 0; h < s; h++) {
            d[h] = u == h ? 0 : 1 / 0;
          }c.push(d);
        }var p = [],
            f = [],
            v = function v(e) {
          for (var t = 0; t < s; t++) {
            for (var n = new Array(s), r = 0; r < s; r++) {
              n[r] = void 0;
            }e.push(n);
          }
        };v(p), v(f);for (var u = 0; u < a.length; u++) {
          var g = l[a[u].source().id()],
              y = l[a[u].target().id()],
              m = n(a[u]);c[g][y] > m && (c[g][y] = m, p[g][y] = y, f[g][y] = a[u]);
        }if (!i) for (var u = 0; u < a.length; u++) {
          var g = l[a[u].target().id()],
              y = l[a[u].source().id()],
              m = n(a[u]);c[g][y] > m && (c[g][y] = m, p[g][y] = y, f[g][y] = a[u]);
        }for (var b = 0; b < s; b++) {
          for (var u = 0; u < s; u++) {
            for (var h = 0; h < s; h++) {
              c[u][b] + c[b][h] < c[u][h] && (c[u][h] = c[u][b] + c[b][h], p[u][h] = p[u][b]);
            }
          }
        }for (var x = [], u = 0; u < s; u++) {
          x.push(o[u].id());
        }return { distance: function distance(e, n) {
            if (r.string(e)) var i = t.filter(e)[0].id();else var i = e.id();if (r.string(n)) var a = t.filter(n)[0].id();else var a = n.id();return c[l[i]][l[a]];
          }, path: function path(e, n) {
            if (r.string(e)) var i = t.filter(e)[0].id();else var i = e.id();if (r.string(n)) var a = t.filter(n)[0].id();else var a = n.id();var o = function (e, n, r, i, a) {
              if (e === n) return t.getElementById(i[e]);if (void 0 !== r[e][n]) {
                for (var o = [t.getElementById(i[e])], s = e; e !== n;) {
                  s = e, e = r[e][n];var l = a[s][e];o.push(l), o.push(t.getElementById(i[e]));
                }return o;
              }
            }(l[i], l[a], p, x, f);return t.collection(o);
          } };
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = { bellmanFord: function bellmanFord(e) {
        var t = this;if (e = e || {}, null != e.weight && r.fn(e.weight)) var n = e.weight;else var n = function n(e) {
          return 1;
        };if (null != e.directed) var a = e.directed;else var a = !1;if (null != e.root) {
          if (r.string(e.root)) var o = this.filter(e.root)[0];else var o = e.root[0];for (var s = this._private.cy, l = this.edges().stdFilter(function (e) {
            return !e.isLoop();
          }), u = this.nodes(), c = u.length, d = {}, h = 0; h < c; h++) {
            d[u[h].id()] = h;
          }for (var p = [], f = [], v = [], h = 0; h < c; h++) {
            u[h].id() === o.id() ? p[h] = 0 : p[h] = 1 / 0, f[h] = void 0;
          }for (var g = !1, h = 1; h < c; h++) {
            g = !1;for (var y = 0; y < l.length; y++) {
              var m = d[l[y].source().id()],
                  b = d[l[y].target().id()],
                  x = n(l[y]),
                  w = p[m] + x;if (w < p[b] && (p[b] = w, f[b] = m, v[b] = l[y], g = !0), !a) {
                var w = p[b] + x;w < p[m] && (p[m] = w, f[m] = b, v[m] = l[y], g = !0);
              }
            }if (!g) break;
          }if (g) for (var y = 0; y < l.length; y++) {
            var m = d[l[y].source().id()],
                b = d[l[y].target().id()],
                x = n(l[y]);if (p[m] + x < p[b]) return i.error("Graph contains a negative weight cycle for Bellman-Ford"), { pathTo: void 0, distanceTo: void 0, hasNegativeWeightCycle: !0 };
          }for (var E = [], h = 0; h < c; h++) {
            E.push(u[h].id());
          }return { distanceTo: function distanceTo(e) {
              if (r.string(e)) var t = s.filter(e)[0].id();else var t = e.id();return p[d[t]];
            }, pathTo: function pathTo(e) {
              if (r.string(e)) var n = s.filter(e)[0].id();else var n = e.id();var i = [],
                  a = function (e, t, n, r, i, a) {
                for (;;) {
                  if (i.push(s.getElementById(r[n])), i.push(a[n]), t === n) return i;var o = e[n];if (void 0 === o) return;n = o;
                }
              }(f, d[o.id()], d[n], E, i, v);return null != a && a.reverse(), t.spawn(a);
            }, hasNegativeWeightCycle: !1 };
        }
      } };e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = { kargerStein: function kargerStein(e) {
        var t = this;e = e || {};var n = function n(e, t, _n) {
          for (var r = _n[e], i = r[1], a = r[2], o = t[i], s = t[a], l = _n.filter(function (e) {
            return (t[e[1]] !== o || t[e[2]] !== s) && (t[e[1]] !== s || t[e[2]] !== o);
          }), u = 0; u < l.length; u++) {
            var c = l[u];c[1] === s ? (l[u] = c.slice(0), l[u][1] = o) : c[2] === s && (l[u] = c.slice(0), l[u][2] = o);
          }for (var u = 0; u < t.length; u++) {
            t[u] === s && (t[u] = o);
          }return l;
        },
            i = function e(t, r, i, a) {
          if (i <= a) return r;var o = Math.floor(Math.random() * r.length);return e(t, n(o, t, r), i - 1, a);
        },
            a = this._private.cy,
            o = this.edges().stdFilter(function (e) {
          return !e.isLoop();
        }),
            s = this.nodes(),
            l = s.length,
            u = o.length,
            c = Math.ceil(Math.pow(Math.log(l) / Math.LN2, 2)),
            d = Math.floor(l / Math.sqrt(2));if (l < 2) return void r.error("At least 2 nodes are required for Karger-Stein algorithm");for (var h = {}, p = 0; p < l; p++) {
          h[s[p].id()] = p;
        }for (var f = [], p = 0; p < u; p++) {
          var v = o[p];f.push([p, h[v.source().id()], h[v.target().id()]]);
        }for (var g, y = 1 / 0, m = [], p = 0; p < l; p++) {
          m.push(p);
        }for (var b = 0; b <= c; b++) {
          var x = m.slice(0),
              w = i(x, f, l, d),
              E = x.slice(0),
              P = i(x, w, d, 2),
              C = i(E, w, d, 2);P.length <= C.length && P.length < y ? (y = P.length, g = [P, x]) : C.length <= P.length && C.length < y && (y = C.length, g = [C, E]);
        }for (var S = g[0].map(function (e) {
          return o[e[0]];
        }), T = [], D = [], k = g[1][0], p = 0; p < g[1].length; p++) {
          g[1][p] === k ? T.push(s[p]) : D.push(s[p]);
        }return { cut: t.spawn(a, S), partition1: t.spawn(T), partition2: t.spawn(D) };
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = { pageRank: function pageRank(e) {
        e = e || {};if (null != e && null != e.dampingFactor) var t = e.dampingFactor;else var t = .8;if (null != e && null != e.precision) var n = e.precision;else var n = 1e-6;if (null != e && null != e.iterations) var i = e.iterations;else var i = 200;if (null != e && null != e.weight && r.fn(e.weight)) var a = e.weight;else var a = function a(e) {
          return 1;
        };for (var o = this._private.cy, s = this.edges().stdFilter(function (e) {
          return !e.isLoop();
        }), l = this.nodes(), u = l.length, c = s.length, d = {}, h = 0; h < u; h++) {
          d[l[h].id()] = h;
        }for (var p = [], f = [], v = (1 - t) / u, h = 0; h < u; h++) {
          for (var g = [], y = 0; y < u; y++) {
            g.push(0);
          }p.push(g), f.push(0);
        }for (var h = 0; h < c; h++) {
          var m = s[h],
              b = d[m.source().id()],
              x = d[m.target().id()],
              w = a(m);p[x][b] += w, f[b] += w;
        }for (var E = 1 / u + v, y = 0; y < u; y++) {
          if (0 === f[y]) for (var h = 0; h < u; h++) {
            p[h][y] = E;
          } else for (var h = 0; h < u; h++) {
            p[h][y] = p[h][y] / f[y] + v;
          }
        }for (var P, C = [], S = [], h = 0; h < u; h++) {
          C.push(1), S.push(0);
        }for (var T = 0; T < i; T++) {
          for (var D = S.slice(0), h = 0; h < u; h++) {
            for (var y = 0; y < u; y++) {
              D[h] += p[h][y] * C[y];
            }
          }!function (e) {
            for (var t = e.length, n = 0, r = 0; r < t; r++) {
              n += e[r];
            }for (var r = 0; r < t; r++) {
              e[r] = e[r] / n;
            }
          }(D), P = C, C = D;for (var k = 0, h = 0; h < u; h++) {
            k += Math.pow(P[h] - C[h], 2);
          }if (k < n) break;
        }return { rank: function rank(e) {
            if (r.string(e)) var t = o.filter(e)[0].id();else var t = e.id();return C[d[t]];
          } };
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = { degreeCentralityNormalized: function degreeCentralityNormalized(e) {
        e = e || {};var t = this.cy();if (null != e.directed) var n = e.directed;else var n = !1;var a = this.nodes(),
            o = a.length;if (n) {
          for (var s = {}, l = {}, u = 0, c = 0, d = 0; d < o; d++) {
            var h = a[d],
                p = this.degreeCentrality(i.extend({}, e, { root: h }));u < p.indegree && (u = p.indegree), c < p.outdegree && (c = p.outdegree), s[h.id()] = p.indegree, l[h.id()] = p.outdegree;
          }return { indegree: function indegree(e) {
              if (0 == u) return 0;if (r.string(e)) var e = t.filter(e)[0].id();else var e = e.id();return s[e] / u;
            }, outdegree: function outdegree(e) {
              if (0 == c) return 0;if (r.string(e)) var e = t.filter(e)[0].id();else var e = e.id();return l[e] / c;
            } };
        }for (var f = {}, v = 0, d = 0; d < o; d++) {
          var h = a[d],
              p = this.degreeCentrality(i.extend({}, e, { root: h }));v < p.degree && (v = p.degree), f[h.id()] = p.degree;
        }return { degree: function degree(e) {
            if (0 == v) return 0;if (r.string(e)) var e = t.filter(e)[0].id();else var e = e.id();return f[e] / v;
          } };
      }, degreeCentrality: function degreeCentrality(e) {
        e = e || {};var t = this;if (null != e && null != e.root) {
          var n = r.string(e.root) ? this.filter(e.root)[0] : e.root[0];if (null != e.weight && r.fn(e.weight)) var i = e.weight;else var i = function i(e) {
            return 1;
          };if (null != e.directed) var a = e.directed;else var a = !1;if (null != e.alpha && r.number(e.alpha)) var o = e.alpha;else o = 0;if (a) {
            for (var s = n.connectedEdges('edge[target = "' + n.id() + '"]').intersection(t), l = n.connectedEdges('edge[source = "' + n.id() + '"]').intersection(t), u = s.length, c = l.length, d = 0, h = 0, p = 0; p < s.length; p++) {
              var f = s[p];d += i(f);
            }for (var p = 0; p < l.length; p++) {
              var f = l[p];h += i(f);
            }return { indegree: Math.pow(u, 1 - o) * Math.pow(d, o), outdegree: Math.pow(c, 1 - o) * Math.pow(h, o) };
          }for (var v = n.connectedEdges().intersection(t), g = v.length, y = 0, p = 0; p < v.length; p++) {
            var f = v[p];y += i(f);
          }return { degree: Math.pow(g, 1 - o) * Math.pow(y, o) };
        }
      } };a.dc = a.degreeCentrality, a.dcn = a.degreeCentralityNormalised = a.degreeCentralityNormalized, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = { closenessCentralityNormalized: function closenessCentralityNormalized(e) {
        e = e || {};var t = this.cy(),
            n = e.harmonic;void 0 === n && (n = !0);for (var i = {}, a = 0, o = this.nodes(), s = this.floydWarshall({ weight: e.weight, directed: e.directed }), l = 0; l < o.length; l++) {
          for (var u = 0, c = 0; c < o.length; c++) {
            if (l != c) {
              var d = s.distance(o[l], o[c]);u += n ? 1 / d : d;
            }
          }n || (u = 1 / u), a < u && (a = u), i[o[l].id()] = u;
        }return { closeness: function closeness(e) {
            if (0 == a) return 0;if (r.string(e)) var e = t.filter(e)[0].id();else var e = e.id();return i[e] / a;
          } };
      }, closenessCentrality: function closenessCentrality(e) {
        if (e = e || {}, null != e.root) {
          if (r.string(e.root)) var t = this.filter(e.root)[0];else var t = e.root[0];if (null != e.weight && r.fn(e.weight)) var n = e.weight;else var n = function n() {
            return 1;
          };if (null != e.directed && r.bool(e.directed)) var i = e.directed;else var i = !1;var a = e.harmonic;void 0 === a && (a = !0);for (var o = this.dijkstra({ root: t, weight: n, directed: i }), s = 0, l = this.nodes(), u = 0; u < l.length; u++) {
            if (l[u].id() != t.id()) {
              var c = o.distanceTo(l[u]);s += a ? 1 / c : c;
            }
          }return a ? s : 1 / s;
        }
      } };i.cc = i.closenessCentrality, i.ccn = i.closenessCentralityNormalised = i.closenessCentralityNormalized, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(9),
        a = { betweennessCentrality: function betweennessCentrality(e) {
        e = e || {};var t, n;r.fn(e.weight) ? (n = e.weight, t = !0) : t = !1;for (var a = null != e.directed && e.directed, o = this._private.cy, s = this.nodes(), l = {}, u = {}, c = 0, d = { set: function set(e, t) {
            u[e] = t, t > c && (c = t);
          }, get: function get(e) {
            return u[e];
          } }, h = 0; h < s.length; h++) {
          var p = s[h],
              f = p.id();l[f] = a ? p.outgoers().nodes() : p.openNeighborhood().nodes(), d.set(f, 0);
        }for (var v = 0; v < s.length; v++) {
          for (var g = s[v].id(), y = [], m = {}, b = {}, x = {}, w = new i(function (e, t) {
            return x[e] - x[t];
          }), h = 0; h < s.length; h++) {
            var f = s[h].id();m[f] = [], b[f] = 0, x[f] = 1 / 0;
          }for (b[g] = 1, x[g] = 0, w.push(g); !w.empty();) {
            var p = w.pop();if (y.push(p), t) for (var E = 0; E < l[p].length; E++) {
              var P,
                  C = l[p][E],
                  S = o.getElementById(p);P = S.edgesTo(C).length > 0 ? S.edgesTo(C)[0] : C.edgesTo(S)[0];var T = n(P);C = C.id(), x[C] > x[p] + T && (x[C] = x[p] + T, w.nodes.indexOf(C) < 0 ? w.push(C) : w.updateItem(C), b[C] = 0, m[C] = []), x[C] == x[p] + T && (b[C] = b[C] + b[p], m[C].push(p));
            } else for (var E = 0; E < l[p].length; E++) {
              var C = l[p][E].id();x[C] == 1 / 0 && (w.push(C), x[C] = x[p] + 1), x[C] == x[p] + 1 && (b[C] = b[C] + b[p], m[C].push(p));
            }
          }for (var D = {}, h = 0; h < s.length; h++) {
            D[s[h].id()] = 0;
          }for (; y.length > 0;) {
            for (var C = y.pop(), E = 0; E < m[C].length; E++) {
              var p = m[C][E];D[p] = D[p] + b[p] / b[C] * (1 + D[C]), C != s[v].id() && d.set(C, d.get(C) + D[C]);
            }
          }
        }var k = { betweenness: function betweenness(e) {
            if (r.string(e)) var e = o.filter(e).id();else var e = e.id();return d.get(e);
          }, betweennessNormalized: function betweennessNormalized(e) {
            if (0 == c) return 0;if (r.string(e)) var e = o.filter(e).id();else var e = e.id();return d.get(e) / c;
          } };return k.betweennessNormalised = k.betweennessNormalized, k;
      } };a.bc = a.betweennessCentrality, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(4),
        i = { animate: r.animate(), animation: r.animation(), animated: r.animated(), clearQueue: r.clearQueue(), delay: r.delay(), delayAnimation: r.delayAnimation(), stop: r.stop() };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(45),
        a = n(2),
        o = n(0),
        s = { animated: function animated() {
        return function () {
          var e = this,
              t = void 0 !== e.length,
              n = t ? e : [e];if (!(this._private.cy || this).styleEnabled()) return !1;var r = n[0];return r ? r._private.animation.current.length > 0 : void 0;
        };
      }, clearQueue: function clearQueue() {
        return function () {
          var e = this,
              t = void 0 !== e.length,
              n = t ? e : [e];if (!(this._private.cy || this).styleEnabled()) return this;for (var r = 0; r < n.length; r++) {
            n[r]._private.animation.queue = [];
          }return this;
        };
      }, delay: function delay() {
        return function (e, t) {
          return (this._private.cy || this).styleEnabled() ? this.animate({ delay: e, duration: e, complete: t }) : this;
        };
      }, delayAnimation: function delayAnimation() {
        return function (e, t) {
          return (this._private.cy || this).styleEnabled() ? this.animation({ delay: e, duration: e, complete: t }) : this;
        };
      }, animation: function animation() {
        return function (e, t) {
          var n = this,
              s = void 0 !== n.length,
              l = s ? n : [n],
              u = this._private.cy || this,
              c = !s,
              d = !c;if (!u.styleEnabled()) return this;var h = u.style();if (e = r.assign({}, e, t), 0 === Object.keys(e).length) return new i(l[0], e);switch (void 0 === e.duration && (e.duration = 400), e.duration) {case "slow":
              e.duration = 600;break;case "fast":
              e.duration = 200;}if (d && (e.style = h.getPropsList(e.style || e.css), e.css = void 0), d && null != e.renderedPosition) {
            var p = e.renderedPosition,
                f = u.pan(),
                v = u.zoom();e.position = a.renderedToModelPosition(p, v, f);
          }if (c && null != e.panBy) {
            var g = e.panBy,
                y = u.pan();e.pan = { x: y.x + g.x, y: y.y + g.y };
          }var m = e.center || e.centre;if (c && null != m) {
            var b = u.getCenterPan(m.eles, e.zoom);null != b && (e.pan = b);
          }if (c && null != e.fit) {
            var x = e.fit,
                w = u.getFitViewport(x.eles || x.boundingBox, x.padding);null != w && (e.pan = w.pan, e.zoom = w.zoom);
          }if (c && o.plainObject(e.zoom)) {
            var E = u.getZoomedViewport(e.zoom);null != E && (E.zoomed && (e.zoom = E.zoom), E.panned && (e.pan = E.pan));
          }return new i(l[0], e);
        };
      }, animate: function animate() {
        return function (e, t) {
          var n = this,
              i = void 0 !== n.length,
              a = i ? n : [n];if (!(this._private.cy || this).styleEnabled()) return this;t && (e = r.extend({}, e, t));for (var o = 0; o < a.length; o++) {
            var s = a[o],
                l = s.animated() && (void 0 === e.queue || e.queue);s.animation(e, l ? { queue: !0 } : void 0).play();
          }return this;
        };
      }, stop: function stop() {
        return function (e, t) {
          var n = this,
              r = void 0 !== n.length,
              i = r ? n : [n],
              a = this._private.cy || this;if (!a.styleEnabled()) return this;for (var o = 0; o < i.length; o++) {
            for (var s = i[o], l = s._private, u = l.animation.current, c = 0; c < u.length; c++) {
              var d = u[c],
                  h = d._private;t && (h.duration = 0);
            }e && (l.animation.queue = []), t || (l.animation.current = []);
          }return a.notify({ eles: this, type: "draw" }), this;
        };
      } };e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = n(5),
        o = function o(e, t, n) {
      var a = this._private = r.extend({ duration: 1e3 }, t, n);a.target = e, a.style = a.style || a.css, a.started = !1, a.playing = !1, a.hooked = !1, a.applying = !1, a.progress = 0, a.completes = [], a.frames = [], a.complete && i.fn(a.complete) && a.completes.push(a.complete), this.length = 1, this[0] = this;
    },
        s = o.prototype;r.extend(s, { instanceString: function instanceString() {
        return "animation";
      }, hook: function hook() {
        var e = this._private;if (!e.hooked) {
          var t = void 0,
              n = e.target._private.animation;t = e.queue ? n.queue : n.current, t.push(this), i.elementOrCollection(e.target) && e.target.cy().addToAnimationPool(e.target), e.hooked = !0;
        }return this;
      }, play: function play() {
        var e = this._private;return 1 === e.progress && (e.progress = 0), e.playing = !0, e.started = !1, e.stopped = !1, this.hook(), this;
      }, playing: function playing() {
        return this._private.playing;
      }, apply: function apply() {
        var e = this._private;return e.applying = !0, e.started = !1, e.stopped = !1, this.hook(), this;
      }, applying: function applying() {
        return this._private.applying;
      }, pause: function pause() {
        var e = this._private;return e.playing = !1, e.started = !1, this;
      }, stop: function stop() {
        var e = this._private;return e.playing = !1, e.started = !1, e.stopped = !0, this;
      }, rewind: function rewind() {
        return this.progress(0);
      }, fastforward: function fastforward() {
        return this.progress(1);
      }, time: function time(e) {
        var t = this._private;return void 0 === e ? t.progress * t.duration : this.progress(e / t.duration);
      }, progress: function progress(e) {
        var t = this._private,
            n = t.playing;return void 0 === e ? t.progress : (n && this.pause(), t.progress = e, t.started = !1, n && this.play(), this);
      }, completed: function completed() {
        return 1 === this._private.progress;
      }, reverse: function reverse() {
        var e = this._private,
            t = e.playing;t && this.pause(), e.progress = 1 - e.progress, e.started = !1;var n = function n(t, _n2) {
          var r = e[t];null != r && (e[t] = e[_n2], e[_n2] = r);
        };if (n("zoom", "startZoom"), n("pan", "startPan"), n("position", "startPosition"), e.style) for (var r = 0; r < e.style.length; r++) {
          var i = e.style[r],
              a = i.name,
              o = e.startStyle[a];e.startStyle[a] = i, e.style[r] = o;
        }return t && this.play(), this;
      }, promise: function promise(e) {
        var t = this._private,
            n = void 0;switch (e) {case "frame":
            n = t.frames;break;default:case "complete":case "completed":
            n = t.completes;}return new a(function (e, t) {
          n.push(function () {
            e();
          });
        });
      } }), s.complete = s.completed, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n) {
      return t in e ? Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = n, e;
    }var i = n(1),
        a = n(0),
        o = { data: function data(e) {
        var t = { field: "data", bindingEvent: "data", allowBinding: !1, allowSetting: !1, allowGetting: !1, settingEvent: "data", settingTriggersEvent: !1, triggerFnName: "trigger", immutableKeys: {}, updateStyle: !1, beforeGet: function beforeGet(e) {}, beforeSet: function beforeSet(e, t) {}, onSet: function onSet(e) {}, canSet: function canSet(e) {
            return !0;
          } };return e = i.extend({}, t, e), function (t, n) {
          var i = e,
              o = this,
              s = void 0 !== o.length,
              l = s ? o : [o],
              u = s ? o[0] : o;if (a.string(t)) {
            if (i.allowGetting && void 0 === n) {
              var c = void 0;return u && (i.beforeGet(u), c = u._private[i.field][t]), c;
            }if (i.allowSetting && void 0 !== n) {
              if (!i.immutableKeys[t]) {
                var d = r({}, t, n);i.beforeSet(o, d);for (var h = 0, p = l.length; h < p; h++) {
                  var f = l[h];i.canSet(f) && (f._private[i.field][t] = n);
                }i.updateStyle && o.updateStyle(), i.onSet(o), i.settingTriggersEvent && o[i.triggerFnName](i.settingEvent);
              }
            }
          } else if (i.allowSetting && a.plainObject(t)) {
            var v = t,
                g = void 0,
                y = void 0,
                m = Object.keys(v);i.beforeSet(o, v);for (var b = 0; b < m.length; b++) {
              g = m[b], y = v[g];var x = !i.immutableKeys[g];if (x) for (var w = 0; w < l.length; w++) {
                var E = l[w];i.canSet(E) && (E._private[i.field][g] = y);
              }
            }i.updateStyle && o.updateStyle(), i.onSet(o), i.settingTriggersEvent && o[i.triggerFnName](i.settingEvent);
          } else if (i.allowBinding && a.fn(t)) {
            var P = t;o.on(i.bindingEvent, P);
          } else if (i.allowGetting && void 0 === t) {
            var C = void 0;return u && (i.beforeGet(u), C = u._private[i.field]), C;
          }return o;
        };
      }, removeData: function removeData(e) {
        var t = { field: "data", event: "data", triggerFnName: "trigger", triggerEvent: !1, immutableKeys: {} };return e = i.extend({}, t, e), function (t) {
          var n = e,
              r = this,
              i = void 0 !== r.length,
              o = i ? r : [r];if (a.string(t)) {
            for (var s = t.split(/\s+/), l = s.length, u = 0; u < l; u++) {
              var c = s[u];if (!a.emptyString(c)) {
                if (!n.immutableKeys[c]) for (var d = 0, h = o.length; d < h; d++) {
                  o[d]._private[n.field][c] = void 0;
                }
              }
            }n.triggerEvent && r[n.triggerFnName](n.event);
          } else if (void 0 === t) {
            for (var p = 0, f = o.length; p < f; p++) {
              for (var v = o[p]._private[n.field], g = Object.keys(v), y = 0; y < g.length; y++) {
                var m = g[y],
                    b = !n.immutableKeys[m];b && (v[m] = void 0);
              }
            }n.triggerEvent && r[n.triggerFnName](n.event);
          }return r;
        };
      } };e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(5),
        i = { eventAliasesOn: function eventAliasesOn(e) {
        var t = e;t.addListener = t.listen = t.bind = t.on, t.unlisten = t.unbind = t.off = t.removeListener, t.trigger = t.emit, t.pon = t.promiseOn = function (e, t) {
          var n = this,
              i = Array.prototype.slice.call(arguments, 0);return new r(function (e, t) {
            var r = function r(t) {
              n.off.apply(n, o), e(t);
            },
                a = i.concat([r]),
                o = a.concat([]);n.on.apply(n, a);
          });
        };
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(8),
        i = { classes: function classes(e) {
        e = (e || "").match(/\S+/g) || [];for (var t = this, n = [], i = new r(e), a = 0; a < t.length; a++) {
          !function (e) {
            var a = t[e],
                o = a._private,
                s = o.classes,
                l = !1;i.forEach(function (e) {
              s.has(e) || (l = !0);
            }), l || s.forEach(function (e) {
              i.has(e) || (l = !0);
            }), l && (o.classes = new r(i), n.push(a));
          }(a);
        }return n.length > 0 && this.spawn(n).updateStyle().emit("class"), t;
      }, addClass: function addClass(e) {
        return this.toggleClass(e, !0);
      }, hasClass: function hasClass(e) {
        var t = this[0];return null != t && t._private.classes.has(e);
      }, toggleClass: function toggleClass(e, t) {
        for (var n = e.match(/\S+/g) || [], r = this, i = [], a = 0, o = r.length; a < o; a++) {
          for (var s = r[a], l = !1, u = 0; u < n.length; u++) {
            var c = n[u],
                d = s._private.classes,
                h = d.has(c),
                p = t || void 0 === t && !h;p ? (d.add(c), h || l || (i.push(s), l = !0)) : (d.delete(c), h && !l && (i.push(s), l = !0));
          }
        }return i.length > 0 && this.spawn(i).updateStyle().emit("class"), r;
      }, removeClass: function removeClass(e) {
        return this.toggleClass(e, !1);
      }, flashClass: function flashClass(e, t) {
        var n = this;if (null == t) t = 250;else if (0 === t) return n;return n.addClass(e), setTimeout(function () {
          n.removeClass(e);
        }, t), n;
      } };e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = (n(0), n(6)),
        i = { allAre: function allAre(e) {
        var t = new r(e);return this.every(function (e) {
          return t.matches(e);
        });
      }, is: function is(e) {
        var t = new r(e);return this.some(function (e) {
          return t.matches(e);
        });
      }, some: function some(e, t) {
        for (var n = 0; n < this.length; n++) {
          if (t ? e.apply(t, [this[n], n, this]) : e(this[n], n, this)) return !0;
        }return !1;
      }, every: function every(e, t) {
        for (var n = 0; n < this.length; n++) {
          if (!(t ? e.apply(t, [this[n], n, this]) : e(this[n], n, this))) return !1;
        }return !0;
      }, same: function same(e) {
        return e = this.cy().collection(e), this.length === e.length && this.every(function (t) {
          return e.hasElementWithId(t.id());
        });
      }, anySame: function anySame(e) {
        return e = this.cy().collection(e), this.some(function (t) {
          return e.hasElementWithId(t.id());
        });
      }, allAreNeighbors: function allAreNeighbors(e) {
        e = this.cy().collection(e);var t = this.neighborhood();return e.every(function (e) {
          return t.hasElementWithId(e.id());
        });
      }, contains: function contains(e) {
        e = this.cy().collection(e);var t = this;return e.every(function (e) {
          return t.hasElementWithId(e.id());
        });
      } };i.allAreNeighbours = i.allAreNeighbors, i.has = i.contains, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(51),
        a = n(10),
        o = function o(e) {
      for (var t = void 0, n = void 0, r = void 0, a = 0; a < i.length; a++) {
        var o = i[a],
            s = o.name,
            l = e.match(o.regexObj);if (null != l) {
          n = l, t = o, r = s;var u = l[0];e = e.substring(u.length);break;
        }
      }return { expr: t, match: n, name: r, remaining: e };
    },
        s = function s(e) {
      var t = e.match(/^\s+/);if (t) {
        var n = t[0];e = e.substring(n.length);
      }return e;
    },
        l = function l(e) {
      var t = this,
          n = t._private.selectorText = e,
          i = t[0] = a();for (t.length = 1, n = s(n);;) {
        var l = o(n);if (null == l.expr) return r.error("The selector `" + e + "`is invalid"), !1;var u = l.match.slice(1),
            c = l.expr.populate(t, i, u);if (!1 === c) return !1;if (null != c && (i = c), n = l.remaining, n.match(/^\s*$/)) break;
      }for (var d = 0; d < t.length; d++) {
        var h = t[d];if (null != h.subject) {
          for (; h.subject !== h;) {
            if (null != h.parent) {
              var p = h.parent,
                  f = h;f.parent = null, p.child = f, h = p;
            } else {
              if (null == h.ancestor) return h.source || h.target || h.connectedNodes ? (r.error("The selector `" + t.text() + "` can not contain a subject selector that applies to the source or target of an edge selector"), !1) : (r.error("When adjusting references for the selector `" + t.text() + "`, neither parent nor ancestor was found"), !1);var v = h.ancestor,
                  g = h;g.ancestor = null, v.descendant = g, h = v;
            }
          }t[d] = h.subject;
        }
      }return !0;
    };e.exports = { parse: l };
  }, function (e, t, n) {
    "use strict";
    var r = function () {
      function e(e, t) {
        var n = [],
            r = !0,
            i = !1,
            a = void 0;try {
          for (var o, s = e[Symbol.iterator](); !(r = (o = s.next()).done) && (n.push(o.value), !t || n.length !== t); r = !0) {}
        } catch (e) {
          i = !0, a = e;
        } finally {
          try {
            !r && s.return && s.return();
          } finally {
            if (i) throw a;
          }
        }return n;
      }return function (t, n) {
        if (Array.isArray(t)) return t;if (Symbol.iterator in Object(t)) return e(t, n);throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(),
        i = n(15),
        a = i.stateSelectorRegex,
        o = n(52),
        s = n(1),
        l = n(10),
        u = function u(e) {
      return e.replace(new RegExp("\\\\(" + o.metaChar + ")", "g"), function (e, t) {
        return t;
      });
    },
        c = function c(e, t, n) {
      t === e[e.length - 1] && (e[e.length - 1] = n);
    },
        d = [{ name: "group", query: !0, regex: "(" + o.group + ")", populate: function populate(e, t, n) {
        var i = r(n, 1),
            a = i[0];t.group = "*" === a ? a : a + "s";
      } }, { name: "state", query: !0, regex: a, populate: function populate(e, t, n) {
        var i = r(n, 1),
            a = i[0];t.colonSelectors.push(a);
      } }, { name: "id", query: !0, regex: "\\#(" + o.id + ")", populate: function populate(e, t, n) {
        var i = r(n, 1),
            a = i[0];t.ids.push(u(a));
      } }, { name: "className", query: !0, regex: "\\.(" + o.className + ")", populate: function populate(e, t, n) {
        var i = r(n, 1),
            a = i[0];t.classes.push(u(a));
      } }, { name: "dataExists", query: !0, regex: "\\[\\s*(" + o.variable + ")\\s*\\]", populate: function populate(e, t, n) {
        var i = r(n, 1),
            a = i[0];t.data.push({ field: u(a) });
      } }, { name: "dataCompare", query: !0, regex: "\\[\\s*(" + o.variable + ")\\s*(" + o.comparatorOp + ")\\s*(" + o.value + ")\\s*\\]", populate: function populate(e, t, n) {
        var i = r(n, 3),
            a = i[0],
            s = i[1],
            l = i[2];l = null != new RegExp("^" + o.string + "$").exec(l) ? l.substring(1, l.length - 1) : parseFloat(l), t.data.push({ field: u(a), operator: s, value: l });
      } }, { name: "dataBool", query: !0, regex: "\\[\\s*(" + o.boolOp + ")\\s*(" + o.variable + ")\\s*\\]", populate: function populate(e, t, n) {
        var i = r(n, 2),
            a = i[0],
            o = i[1];t.data.push({ field: u(o), operator: a });
      } }, { name: "metaCompare", query: !0, regex: "\\[\\[\\s*(" + o.meta + ")\\s*(" + o.comparatorOp + ")\\s*(" + o.number + ")\\s*\\]\\]", populate: function populate(e, t, n) {
        var i = r(n, 3),
            a = i[0],
            o = i[1],
            s = i[2];t.meta.push({ field: u(a), operator: o, value: parseFloat(s) });
      } }, { name: "nextQuery", separator: !0, regex: o.separator, populate: function populate(e) {
        var t = e[e.length++] = l();return e.currentSubject = null, t;
      } }, { name: "directedEdge", separator: !0, regex: o.directedEdge, populate: function populate(e, t) {
        var n = l(),
            r = t,
            i = l();return n.group = "edges", n.target = i, n.source = r, n.subject = e.currentSubject, c(e, t, n), i;
      } }, { name: "undirectedEdge", separator: !0, regex: o.undirectedEdge, populate: function populate(e, t) {
        var n = l(),
            r = t,
            i = l();return n.group = "edges", n.connectedNodes = [r, i], n.subject = e.currentSubject, c(e, t, n), i;
      } }, { name: "child", separator: !0, regex: o.child, populate: function populate(e, t) {
        var n = l();return n.parent = t, n.subject = e.currentSubject, c(e, t, n), n;
      } }, { name: "descendant", separator: !0, regex: o.descendant, populate: function populate(e, t) {
        var n = l();return n.ancestor = t, n.subject = e.currentSubject, c(e, t, n), n;
      } }, { name: "subject", modifier: !0, regex: o.subject, populate: function populate(e, t) {
        if (null != e.currentSubject && t.subject != t) return s.error("Redefinition of subject in selector `" + e.toString() + "`"), !1;e.currentSubject = t, t.subject = t, e[e.length - 1].subject = t;
      } }];d.forEach(function (e) {
      return e.regexObj = new RegExp("^" + e.regex);
    }), e.exports = d;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = { metaChar: "[\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]", comparatorOp: "=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=", boolOp: "\\?|\\!|\\^", string: '"(?:\\\\"|[^"])*"|' + "'(?:\\\\'|[^'])*'", number: r.regex.number, meta: "degree|indegree|outdegree", separator: "\\s*,\\s*", descendant: "\\s+", child: "\\s+>\\s+", subject: "\\$", group: "node|edge|\\*", directedEdge: "\\s+->\\s+", undirectedEdge: "\\s+<->\\s+" };i.variable = "(?:[\\w-]|(?:\\\\" + i.metaChar + "))+", i.value = i.string + "|" + i.number, i.className = i.variable, i.id = i.variable, function () {
      var e = void 0,
          t = void 0,
          n = void 0;for (e = i.comparatorOp.split("|"), n = 0; n < e.length; n++) {
        t = e[n], i.comparatorOp += "|@" + t;
      }for (e = i.comparatorOp.split("|"), n = 0; n < e.length; n++) {
        t = e[n], t.indexOf("!") >= 0 || "=" !== t && (i.comparatorOp += "|\\!" + t);
      }
    }(), e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(15),
        i = r.stateSelectorMatches,
        a = n(0),
        o = function o(e, t) {
      for (var n = !0, r = 0; r < e[t.name].length; r++) {
        var i = e[t.name][r],
            o = i.operator,
            s = i.value,
            l = i.field,
            u = void 0,
            c = t.fieldValue(l);if (null != o && null != s) {
          var d = a.string(c) || a.number(c) ? "" + c : "",
              h = "" + s,
              p = !1;o.indexOf("@") >= 0 && (d = d.toLowerCase(), h = h.toLowerCase(), o = o.replace("@", ""), p = !0);var f = !1;o.indexOf("!") >= 0 && (o = o.replace("!", ""), f = !0), p && (s = h.toLowerCase(), c = d.toLowerCase());var v = !1;switch (o) {case "*=":
              u = d.indexOf(h) >= 0;break;case "$=":
              u = d.indexOf(h, d.length - h.length) >= 0;break;case "^=":
              u = 0 === d.indexOf(h);break;case "=":
              u = c === s;break;case ">":
              v = !0, u = c > s;break;case ">=":
              v = !0, u = c >= s;break;case "<":
              v = !0, u = c < s;break;case "<=":
              v = !0, u = c <= s;break;default:
              u = !1;}!f || null == c && v || (u = !u);
        } else if (null != o) switch (o) {case "?":
            u = !!c;break;case "!":
            u = !c;break;case "^":
            u = void 0 === c;} else u = void 0 !== c;if (!u) {
          n = !1;break;
        }
      }return n;
    },
        s = function s(e, t, n) {
      if (null != e) {
        var r = !1;if (!t) return !1;n = n();for (var i = 0; i < n.length; i++) {
          if (l(e, n[i])) {
            r = !0;break;
          }
        }return r;
      }return !0;
    },
        l = function l(e, t) {
      if (e.groupOnly) return "*" === e.group || e.group === t.group();if (null != e.group && "*" != e.group && e.group != t.group()) return !1;var n = t.cy(),
          r = void 0,
          a = !0;for (r = 0; r < e.colonSelectors.length; r++) {
        var l = e.colonSelectors[r];if (!(a = i(l, t))) break;
      }if (!a) return !1;var u = !0;for (r = 0; r < e.ids.length; r++) {
        var c = e.ids[r],
            d = t.id();if (!(u = u && c == d)) break;
      }if (!u) return !1;var h = !0;for (r = 0; r < e.classes.length; r++) {
        var p = e.classes[r];if (!(h = h && t.hasClass(p))) break;
      }if (!h) return !1;if (!o(e, { name: "data", fieldValue: function fieldValue(e) {
          return t.data(e);
        } })) return !1;if (!o(e, { name: "meta", fieldValue: function fieldValue(e) {
          return t[e]();
        } })) return !1;if (null != e.collection) {
        if (!e.collection.hasElementWithId(t.id())) return !1;
      }if (null != e.filter && t.collection().some(e.filter)) return !1;var f = n.hasCompoundNodes(),
          v = function v() {
        return t.source();
      },
          g = function g() {
        return t.target();
      };if (!s(e.parent, f, function () {
        return t.parent();
      })) return !1;if (!s(e.ancestor, f, function () {
        return t.parents();
      })) return !1;if (!s(e.child, f, function () {
        return t.children();
      })) return !1;if (!s(e.descendant, f, function () {
        return t.descendants();
      })) return !1;if (!s(e.source, !0, v)) return !1;if (!s(e.target, !0, g)) return !1;if (e.connectedNodes) {
        var y = e.connectedNodes[0],
            m = e.connectedNodes[1];if (s(y, !0, v) && s(m, !0, g)) ;else if (!s(y, !0, g) || !s(m, !0, v)) return !1;
      }return !0;
    },
        u = function u(e) {
      var t = this,
          n = e.cy();if (t.invalid()) return n.collection();if (1 === t.length && 1 === t[0].length && 1 === t[0].ids.length) return e.getElementById(t[0].ids[0]).collection();var r = function r(e) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];if (l(r, e)) return !0;
        }return !1;
      };return null == t.text() && (r = function r() {
        return !0;
      }), e.filter(r);
    },
        c = function c(e) {
      var t = this;if (t.invalid()) return !1;for (var n = 0; n < t.length; n++) {
        var r = t[n];if (l(r, e)) return !0;
      }return !1;
    };e.exports = { matches: c, filter: u };
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n, r) {
      for (var i = [], a = new s(), o = e.cy(), l = o.hasCompoundNodes(), u = 0; u < e.length; u++) {
        var c = e[u];n ? i.push(c) : l && r(i, a, c);
      }for (; i.length > 0;) {
        var d = i.shift();t(d), a.add(d.id()), l && r(i, a, d);
      }return e;
    }function i(e, t, n) {
      if (n.isParent()) for (var r = n._private.children, i = 0; i < r.length; i++) {
        var a = r[i];t.has(a.id()) || e.push(a);
      }
    }function a(e, t, n) {
      if (n.isChild()) {
        var r = n._private.parent;t.has(r.id()) || e.push(r);
      }
    }function o(e, t, n) {
      a(e, t, n), i(e, t, n);
    }var s = n(8),
        l = { parent: function parent(e) {
        var t = [];if (1 === this.length) {
          var n = this[0]._private.parent;if (n) return n;
        }for (var r = 0; r < this.length; r++) {
          var i = this[r],
              a = i._private.parent;a && t.push(a);
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, parents: function parents(e) {
        for (var t = [], n = this.parent(); n.nonempty();) {
          for (var r = 0; r < n.length; r++) {
            var i = n[r];t.push(i);
          }n = n.parent();
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, commonAncestors: function commonAncestors(e) {
        for (var t = void 0, n = 0; n < this.length; n++) {
          var r = this[n],
              i = r.parents();t = t || i, t = t.intersect(i);
        }return t.filter(e);
      }, orphans: function orphans(e) {
        return this.stdFilter(function (e) {
          return e.isOrphan();
        }).filter(e);
      }, nonorphans: function nonorphans(e) {
        return this.stdFilter(function (e) {
          return e.isChild();
        }).filter(e);
      }, children: function children(e) {
        for (var t = [], n = 0; n < this.length; n++) {
          var r = this[n];t = t.concat(r._private.children);
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, siblings: function siblings(e) {
        return this.parent().children().not(this).filter(e);
      }, isParent: function isParent() {
        var e = this[0];if (e) return e.isNode() && 0 !== e._private.children.length;
      }, isChildless: function isChildless() {
        var e = this[0];if (e) return e.isNode() && 0 === e._private.children.length;
      }, isChild: function isChild() {
        var e = this[0];if (e) return e.isNode() && null != e._private.parent;
      }, isOrphan: function isOrphan() {
        var e = this[0];if (e) return e.isNode() && null == e._private.parent;
      }, descendants: function descendants(e) {
        function t(e) {
          for (var r = 0; r < e.length; r++) {
            var i = e[r];n.push(i), i.children().nonempty() && t(i.children());
          }
        }var n = [];return t(this.children()), this.spawn(n, { unique: !0 }).filter(e);
      } };l.forEachDown = function (e) {
      return r(this, e, !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i);
    }, l.forEachUp = function (e) {
      return r(this, e, !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], a);
    }, l.forEachUpAndDown = function (e) {
      return r(this, e, !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], o);
    }, l.ancestors = l.parents, e.exports = l;
  }, function (e, t, n) {
    "use strict";
    var r = n(4),
        i = void 0,
        a = void 0;i = a = { data: r.data({ field: "data", bindingEvent: "data", allowBinding: !0, allowSetting: !0, settingEvent: "data", settingTriggersEvent: !0, triggerFnName: "trigger", allowGetting: !0, immutableKeys: { id: !0, source: !0, target: !0, parent: !0 }, updateStyle: !0 }), removeData: r.removeData({ field: "data", event: "data", triggerFnName: "trigger", triggerEvent: !0, immutableKeys: { id: !0, source: !0, target: !0, parent: !0 }, updateStyle: !0 }), scratch: r.data({ field: "scratch", bindingEvent: "scratch", allowBinding: !0, allowSetting: !0, settingEvent: "scratch", settingTriggersEvent: !0, triggerFnName: "trigger", allowGetting: !0, updateStyle: !0 }), removeScratch: r.removeData({ field: "scratch", event: "scratch", triggerFnName: "trigger", triggerEvent: !0, updateStyle: !0 }), rscratch: r.data({ field: "rscratch", allowBinding: !1, allowSetting: !0, settingTriggersEvent: !1, allowGetting: !0 }), removeRscratch: r.removeData({ field: "rscratch", triggerEvent: !1 }), id: function id() {
        var e = this[0];if (e) return e._private.data.id;
      } }, i.attr = i.data, i.removeAttr = i.removeData, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      return function (t) {
        var n = this;if (void 0 === t && (t = !0), 0 !== n.length && n.isNode() && !n.removed()) {
          for (var r = 0, i = n[0], a = i._private.edges, o = 0; o < a.length; o++) {
            var s = a[o];!t && s.isLoop() || (r += e(i, s));
          }return r;
        }
      };
    }function i(e, t) {
      return function (n) {
        for (var r = void 0, i = this.nodes(), a = 0; a < i.length; a++) {
          var o = i[a],
              s = o[e](n);void 0 === s || void 0 !== r && !t(s, r) || (r = s);
        }return r;
      };
    }var a = n(1),
        o = {};a.extend(o, { degree: r(function (e, t) {
        return t.source().same(t.target()) ? 2 : 1;
      }), indegree: r(function (e, t) {
        return t.target().same(e) ? 1 : 0;
      }), outdegree: r(function (e, t) {
        return t.source().same(e) ? 1 : 0;
      }) }), a.extend(o, { minDegree: i("degree", function (e, t) {
        return e < t;
      }), maxDegree: i("degree", function (e, t) {
        return e > t;
      }), minIndegree: i("indegree", function (e, t) {
        return e < t;
      }), maxIndegree: i("indegree", function (e, t) {
        return e > t;
      }), minOutdegree: i("outdegree", function (e, t) {
        return e < t;
      }), maxOutdegree: i("outdegree", function (e, t) {
        return e > t;
      }) }), a.extend(o, { totalDegree: function totalDegree(e) {
        for (var t = 0, n = this.nodes(), r = 0; r < n.length; r++) {
          t += n[r].degree(e);
        }return t;
      } }), e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(58),
        a = n(59),
        o = n(60),
        s = n(61);e.exports = r.assign({}, i, a, o, s);
  }, function (e, t, n) {
    "use strict";
    var r = n(4),
        i = n(0),
        a = n(2),
        o = void 0,
        s = void 0,
        l = function l(e, t) {
      for (var n = 0; n < e.length; n++) {
        var r = e[n];if (r.isParent() && !r.locked()) {
          var i = r._private.position,
              a = { x: t.x - i.x, y: t.y - i.y };e.children().shift(a);
        }
      }
    };o = s = { position: r.data({ field: "position", bindingEvent: "position", allowBinding: !0, allowSetting: !0, settingEvent: "position", settingTriggersEvent: !0, triggerFnName: "emitAndNotify", allowGetting: !0, validKeys: ["x", "y"], beforeGet: function beforeGet(e) {
          e.updateCompoundBounds();
        }, beforeSet: l, onSet: function onSet(e) {
          e.dirtyCompoundBoundsCache();
        }, canSet: function canSet(e) {
          return !e.locked();
        } }), silentPosition: r.data({ field: "position", bindingEvent: "position", allowBinding: !1, allowSetting: !0, settingEvent: "position", settingTriggersEvent: !1, triggerFnName: "trigger", allowGetting: !1, validKeys: ["x", "y"], beforeSet: l, onSet: function onSet(e) {
          e.dirtyCompoundBoundsCache();
        }, canSet: function canSet(e) {
          return !e.locked();
        } }), positions: function positions(e, t) {
        if (i.plainObject(e)) t ? this.silentPosition(e) : this.position(e);else if (i.fn(e)) {
          var n = e,
              r = this.cy();r.startBatch();for (var a = 0; a < this.length; a++) {
            var o = this[a],
                s = void 0;(s = n(o, a)) && (t ? o.silentPosition(s) : o.position(s));
          }r.endBatch();
        }return this;
      }, silentPositions: function silentPositions(e) {
        return this.positions(e, !0);
      }, shift: function shift(e, t) {
        var n = void 0;if (i.plainObject(e) ? n = e : i.string(e) && i.number(t) && (n = { x: 0, y: 0 }, n[e] = t), null != n) for (var r = 0; r < this.length; r++) {
          var a = this[r],
              o = a.position();a.position({ x: o.x + n.x, y: o.y + n.y });
        }return this;
      }, renderedPosition: function renderedPosition(e, t) {
        var n = this[0],
            r = this.cy(),
            o = r.zoom(),
            s = r.pan(),
            l = i.plainObject(e) ? e : void 0,
            u = void 0 !== l || void 0 !== t && i.string(e);if (n && n.isNode()) {
          if (!u) {
            var c = n.position();return l = a.modelToRenderedPosition(c, o, s), void 0 === e ? l : l[e];
          }for (var d = 0; d < this.length; d++) {
            var h = this[d];void 0 !== t ? h.position(e, (t - s[e]) / o) : void 0 !== l && h.position(a.renderedToModelPosition(l, o, s));
          }
        } else if (!u) return;return this;
      }, relativePosition: function relativePosition(e, t) {
        var n = this[0],
            r = this.cy(),
            a = i.plainObject(e) ? e : void 0,
            o = void 0 !== a || void 0 !== t && i.string(e),
            s = r.hasCompoundNodes();if (n && n.isNode()) {
          if (!o) {
            var l = n.position(),
                u = s ? n.parent() : null,
                c = u && u.length > 0,
                d = c;c && (u = u[0]);var h = d ? u.position() : { x: 0, y: 0 };return a = { x: l.x - h.x, y: l.y - h.y }, void 0 === e ? a : a[e];
          }for (var p = 0; p < this.length; p++) {
            var f = this[p],
                v = s ? f.parent() : null,
                g = v && v.length > 0,
                y = g;g && (v = v[0]);var m = y ? v.position() : { x: 0, y: 0 };void 0 !== t ? f.position(e, t + m[e]) : void 0 !== a && f.position({ x: a.x + m.x, y: a.y + m.y });
          }
        } else if (!o) return;return this;
      } }, o.modelPosition = o.point = o.position, o.modelPositions = o.points = o.positions, o.renderedPoint = o.renderedPosition, o.relativePoint = o.relativePosition, e.exports = s;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      return { includeNodes: a.default(e.includeNodes, b.includeNodes), includeEdges: a.default(e.includeEdges, b.includeEdges), includeLabels: a.default(e.includeLabels, b.includeLabels), includeOverlays: a.default(e.includeOverlays, b.includeOverlays), useCache: a.default(e.useCache, b.useCache) };
    }var i = n(0),
        a = n(1),
        o = n(2),
        s = void 0,
        l = void 0;s = l = {}, l.renderedBoundingBox = function (e) {
      var t = this.boundingBox(e),
          n = this.cy(),
          r = n.zoom(),
          i = n.pan(),
          a = t.x1 * r + i.x,
          o = t.x2 * r + i.x,
          s = t.y1 * r + i.y,
          l = t.y2 * r + i.y;return { x1: a, x2: o, y1: s, y2: l, w: o - a, h: l - s };
    }, l.dirtyCompoundBoundsCache = function () {
      var e = this.cy();return e.styleEnabled() && e.hasCompoundNodes() ? (this.forEachUp(function (e) {
        e._private.compoundBoundsClean = !1, e.isParent() && e.emit("bounds");
      }), this) : this;
    }, l.updateCompoundBounds = function () {
      var e = this.cy();if (!e.styleEnabled() || !e.hasCompoundNodes()) return this;if (e.batching()) return this;for (var t = [], n = 0; n < this.length; n++) {
        var r = this[n],
            i = r._private;i.compoundBoundsClean || (!function (e) {
          function n(e, t, n) {
            var r = 0,
                i = 0,
                a = t + n;return e > 0 && a > 0 && (r = t / a * e, i = n / a * e), { biasDiff: r, biasComplementDiff: i };
          }if (e.isParent()) {
            var r = e._private,
                i = e.children(),
                a = "include" === e.pstyle("compound-sizing-wrt-labels").value,
                o = { width: { val: e.pstyle("min-width").pfValue, left: e.pstyle("min-width-bias-left"), right: e.pstyle("min-width-bias-right") }, height: { val: e.pstyle("min-height").pfValue, top: e.pstyle("min-height-bias-top"), bottom: e.pstyle("min-height-bias-bottom") } },
                s = i.boundingBox({ includeLabels: a, includeOverlays: !1, useCache: !1 }),
                l = r.position;0 !== s.w && 0 !== s.h || (s = { w: e.pstyle("width").pfValue, h: e.pstyle("height").pfValue }, s.x1 = l.x - s.w / 2, s.x2 = l.x + s.w / 2, s.y1 = l.y - s.h / 2, s.y2 = l.y + s.h / 2);var u = o.width.left.value;"px" === o.width.left.units && o.width.val > 0 && (u = 100 * u / o.width.val);var c = o.width.right.value;"px" === o.width.right.units && o.width.val > 0 && (c = 100 * c / o.width.val);var d = o.height.top.value;"px" === o.height.top.units && o.height.val > 0 && (d = 100 * d / o.height.val);var h = o.height.bottom.value;"px" === o.height.bottom.units && o.height.val > 0 && (h = 100 * h / o.height.val);var p = n(o.width.val - s.w, u, c),
                f = p.biasDiff,
                v = p.biasComplementDiff,
                g = n(o.height.val - s.h, d, h),
                y = g.biasDiff,
                m = g.biasComplementDiff;r.autoPadding = function (e, t, n, r) {
              if ("%" !== n.units) return "px" === n.units ? n.pfValue : 0;switch (r) {case "width":
                  return e > 0 ? n.pfValue * e : 0;case "height":
                  return t > 0 ? n.pfValue * t : 0;case "average":
                  return e > 0 && t > 0 ? n.pfValue * (e + t) / 2 : 0;case "min":
                  return e > 0 && t > 0 ? e > t ? n.pfValue * t : n.pfValue * e : 0;case "max":
                  return e > 0 && t > 0 ? e > t ? n.pfValue * e : n.pfValue * t : 0;default:
                  return 0;}
            }(s.w, s.h, e.pstyle("padding"), e.pstyle("padding-relative-to").value), r.autoWidth = Math.max(s.w, o.width.val), l.x = (-f + s.x1 + s.x2 + v) / 2, r.autoHeight = Math.max(s.h, o.height.val), l.y = (-y + s.y1 + s.y2 + m) / 2, t.push(e);
          }
        }(r), e._private.batchingStyle || (i.compoundBoundsClean = !0));
      }return this;
    };var u = function u(e) {
      return e === 1 / 0 || e === -1 / 0 ? 0 : e;
    },
        c = function c(e, t, n, r, i) {
      r - t != 0 && i - n != 0 && null != t && null != n && null != r && null != i && (e.x1 = t < e.x1 ? t : e.x1, e.x2 = r > e.x2 ? r : e.x2, e.y1 = n < e.y1 ? n : e.y1, e.y2 = i > e.y2 ? i : e.y2);
    },
        d = function d(e, t) {
      return c(e, t.x1, t.y1, t.x2, t.y2);
    },
        h = function h(e, t, n) {
      return a.getPrefixedProperty(e, t, n);
    },
        p = function p(e, t, n) {
      if (!t.cy().headless()) {
        var r = t._private,
            i = r.rstyle,
            a = i.arrowWidth / 2,
            o = t.pstyle(n + "-arrow-shape").value,
            s = void 0,
            l = void 0;"none" !== o && ("source" === n ? (s = i.srcX, l = i.srcY) : "target" === n ? (s = i.tgtX, l = i.tgtY) : (s = i.midX, l = i.midY), c(e, s - a, l - a, s + a, l + a));
      }
    },
        f = function f(e, t, n) {
      if (!t.cy().headless()) {
        var r = void 0;r = n ? n + "-" : "";var i = t._private,
            a = i.rstyle;if (t.pstyle(r + "label").strValue) {
          var o = t.pstyle("text-halign"),
              s = t.pstyle("text-valign"),
              l = h(a, "labelWidth", n),
              u = h(a, "labelHeight", n),
              d = h(a, "labelX", n),
              p = h(a, "labelY", n),
              f = t.pstyle(r + "text-margin-x").pfValue,
              v = t.pstyle(r + "text-margin-y").pfValue,
              g = t.isEdge(),
              y = t.pstyle(r + "text-rotation"),
              m = t.pstyle("text-outline-width").pfValue,
              b = t.pstyle("text-border-width").pfValue,
              x = b / 2,
              w = t.pstyle("text-background-padding").pfValue,
              E = u + 2 * w,
              P = l + 2 * w,
              C = P / 2,
              S = E / 2,
              T = void 0,
              D = void 0,
              k = void 0,
              _ = void 0;if (g) T = d - C, D = d + C, k = p - S, _ = p + S;else {
            switch (o.value) {case "left":
                T = d - P, D = d;break;case "center":
                T = d - C, D = d + C;break;case "right":
                T = d, D = d + P;}switch (s.value) {case "top":
                k = p - E, _ = p;break;case "center":
                k = p - S, _ = p + S;break;case "bottom":
                k = p, _ = p + E;}
          }var M = g && "autorotate" === y.strValue,
              I = null != y.pfValue && 0 !== y.pfValue;if (M || I) {
            var N = M ? h(i.rstyle, "labelAngle", n) : y.pfValue,
                B = Math.cos(N),
                z = Math.sin(N),
                L = function L(e, t) {
              return e -= d, t -= p, { x: e * B - t * z + d, y: e * z + t * B + p };
            },
                A = L(T, k),
                O = L(T, _),
                R = L(D, k),
                V = L(D, _);T = Math.min(A.x, O.x, R.x, V.x), D = Math.max(A.x, O.x, R.x, V.x), k = Math.min(A.y, O.y, R.y, V.y), _ = Math.max(A.y, O.y, R.y, V.y);
          }T += f - Math.max(m, x), D += f + Math.max(m, x), k += v - Math.max(m, x), _ += v + Math.max(m, x), c(e, T, k, D, _);
        }return e;
      }
    },
        v = function v(e, t) {
      var n = e._private.cy,
          r = n.styleEnabled(),
          i = n.headless(),
          a = { x1: 1 / 0, y1: 1 / 0, x2: -1 / 0, y2: -1 / 0 },
          s = e._private,
          l = r ? e.pstyle("display").value : "element",
          d = e.isNode(),
          h = e.isEdge(),
          v = void 0,
          g = void 0,
          y = void 0,
          m = void 0,
          b = void 0,
          x = void 0,
          w = "none" !== l;if (w) {
        var E = 0;r && t.includeOverlays && 0 !== e.pstyle("overlay-opacity").value && (E = e.pstyle("overlay-padding").value);var P = 0,
            C = 0;if (r && (P = e.pstyle("width").pfValue, C = P / 2), d && t.includeNodes) {
          var S = e.position();b = S.x, x = S.y;var T = e.outerWidth(),
              D = T / 2,
              k = e.outerHeight(),
              _ = k / 2;v = b - D - E, g = b + D + E, y = x - _ - E, m = x + _ + E, c(a, v, y, g, m);
        } else if (h && t.includeEdges) {
          var M = s.rstyle || {};if (r && !i && (v = Math.min(M.srcX, M.midX, M.tgtX), g = Math.max(M.srcX, M.midX, M.tgtX), y = Math.min(M.srcY, M.midY, M.tgtY), m = Math.max(M.srcY, M.midY, M.tgtY), v -= C, g += C, y -= C, m += C, c(a, v, y, g, m)), r && !i && "haystack" === e.pstyle("curve-style").strValue) {
            var I = M.haystackPts || [];if (v = I[0].x, y = I[0].y, g = I[1].x, m = I[1].y, v > g) {
              var N = v;v = g, g = N;
            }if (y > m) {
              var B = y;y = m, m = B;
            }c(a, v - C, y - C, g + C, m + C);
          } else {
            for (var z = M.bezierPts || M.linePts || [], L = 0; L < z.length; L++) {
              var A = z[L];v = A.x - C, g = A.x + C, y = A.y - C, m = A.y + C, c(a, v, y, g, m);
            }if (0 === z.length) {
              var O = e.source(),
                  R = O.position(),
                  V = e.target(),
                  q = V.position();if (v = R.x, g = q.x, y = R.y, m = q.y, v > g) {
                var F = v;v = g, g = F;
              }if (y > m) {
                var j = y;y = m, m = j;
              }v -= C, g += C, y -= C, m += C, c(a, v, y, g, m);
            }
          }
        }if (r && t.includeEdges && h && (p(a, e, "mid-source"), p(a, e, "mid-target"), p(a, e, "source"), p(a, e, "target")), r) {
          if ("yes" === e.pstyle("ghost").value) {
            var X = e.pstyle("ghost-offset-x").pfValue,
                Y = e.pstyle("ghost-offset-y").pfValue;c(a, a.x1 + X, a.y1 + Y, a.x2 + X, a.y2 + Y);
          }
        }r && (v = a.x1, g = a.x2, y = a.y1, m = a.y2, c(a, v - E, y - E, g + E, m + E)), r && t.includeLabels && (f(a, e, null), h && (f(a, e, "source"), f(a, e, "target")));
      }return a.x1 = u(a.x1), a.y1 = u(a.y1), a.x2 = u(a.x2), a.y2 = u(a.y2), a.w = u(a.x2 - a.x1), a.h = u(a.y2 - a.y1), a.w > 0 && a.h > 0 && w && o.expandBoundingBox(a, 1), a;
    },
        g = function g(e) {
      return e ? "t" : "f";
    },
        y = function y(e) {
      var t = "";return t += g(e.incudeNodes), t += g(e.includeEdges), t += g(e.includeLabels), t += g(e.includeOverlays);
    },
        m = function m(e, t) {
      var n = e._private,
          r = void 0,
          i = e.cy().headless(),
          a = t === b ? x : y(t);return t.useCache && !i && n.bbCache && n.bbCache[a] ? r = n.bbCache[a] : (r = v(e, t), i || (n.bbCache = n.bbCache || {}, n.bbCache[a] = r)), r;
    },
        b = { includeNodes: !0, includeEdges: !0, includeLabels: !0, includeOverlays: !0, useCache: !0 },
        x = y(b);l.boundingBox = function (e) {
      if (1 === this.length && this[0]._private.bbCache && (void 0 === e || void 0 === e.useCache || !0 === e.useCache)) return e = void 0 === e ? b : r(e), m(this[0], e);var t = { x1: 1 / 0, y1: 1 / 0, x2: -1 / 0, y2: -1 / 0 };e = e || a.staticEmptyObject();var n = r(e),
          i = this,
          o = i.cy(),
          s = o.styleEnabled();s && this.recalculateRenderedStyle(n.useCache), this.updateCompoundBounds();for (var l = {}, c = 0; c < i.length; c++) {
        var h = i[c];if (s && h.isEdge() && "bezier" === h.pstyle("curve-style").strValue && !l[h.id()]) {
          for (var p = h.parallelEdges(), f = 0; f < p.length; f++) {
            l[p[f].id()] = !0;
          }p.recalculateRenderedStyle(n.useCache);
        }d(t, m(h, n));
      }return t.x1 = u(t.x1), t.y1 = u(t.y1), t.x2 = u(t.x2), t.y2 = u(t.y2), t.w = u(t.x2 - t.x1), t.h = u(t.y2 - t.y1), t;
    }, l.boundingBoxAt = function (e) {
      var t = this.nodes();if (i.plainObject(e)) {
        var n = e;e = function e() {
          return n;
        };
      }for (var r = 0; r < t.length; r++) {
        var a = t[r],
            o = a._private,
            s = o.position,
            l = e.call(a, a, r);o.bbAtOldPos = { x: s.x, y: s.y }, l && (s.x = l.x, s.y = l.y);
      }this.emit("dirty"), t.dirtyCompoundBoundsCache().updateCompoundBounds();for (var u = this.boundingBox({ useCache: !1 }), c = 0; c < t.length; c++) {
        var d = t[c],
            h = d._private,
            p = d._private.position,
            f = h.bbAtOldPos;p.x = f.x, p.y = f.y;
      }return t.dirtyCompoundBoundsCache(), this.emit("dirty"), u;
    }, s.boundingbox = s.boundingBox, s.renderedBoundingbox = s.renderedBoundingBox, e.exports = l;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = void 0,
        a = void 0;i = a = {};var o = function o(e) {
      e.uppercaseName = r.capitalize(e.name), e.autoName = "auto" + e.uppercaseName, e.labelName = "label" + e.uppercaseName, e.outerName = "outer" + e.uppercaseName, e.uppercaseOuterName = r.capitalize(e.outerName), i[e.name] = function () {
        var t = this[0],
            n = t._private,
            r = n.cy,
            i = r._private.styleEnabled;if (t) {
          if (!i) return 1;if (t.isParent()) return t.updateCompoundBounds(), n[e.autoName] || 0;var a = t.pstyle(e.name);switch (a.strValue) {case "label":
              return t.recalculateRenderedStyle(), n.rstyle[e.labelName] || 0;default:
              return a.pfValue;}
        }
      }, i["outer" + e.uppercaseName] = function () {
        var t = this[0],
            n = t._private,
            r = n.cy,
            i = r._private.styleEnabled;if (t) {
          if (i) {
            return t[e.name]() + t.pstyle("border-width").pfValue + 2 * t.padding();
          }return 1;
        }
      }, i["rendered" + e.uppercaseName] = function () {
        var t = this[0];if (t) {
          return t[e.name]() * this.cy().zoom();
        }
      }, i["rendered" + e.uppercaseOuterName] = function () {
        var t = this[0];if (t) {
          return t[e.outerName]() * this.cy().zoom();
        }
      };
    };o({ name: "width" }), o({ name: "height" }), a.padding = function () {
      var e = this[0],
          t = e._private;return e.isParent() ? (e.updateCompoundBounds(), void 0 !== t.autoPadding ? t.autoPadding : e.pstyle("padding").pfValue) : e.pstyle("padding").pfValue;
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = function r(e, t) {
      if (e.isEdge()) return t(e.renderer());
    };e.exports = { controlPoints: function controlPoints() {
        var e = this;return r(this, function (t) {
          return t.getControlPoints(e);
        });
      }, segmentPoints: function segmentPoints() {
        var e = this;return r(this, function (t) {
          return t.getSegmentPoints(e);
        });
      }, sourceEndpoint: function sourceEndpoint() {
        var e = this;return r(this, function (t) {
          return t.getSourceEndpoint(e);
        });
      }, targetEndpoint: function targetEndpoint() {
        var e = this;return r(this, function (t) {
          return t.getTargetEndpoint(e);
        });
      }, midpoint: function midpoint() {
        var e = this;return r(this, function (t) {
          return t.getEdgeMidpoint(e);
        });
      } };
  }, function (e, t, n) {
    "use strict";
    var r = n(11),
        i = n(4),
        a = n(0),
        o = n(1),
        s = n(6),
        l = { qualifierCompare: function qualifierCompare(e, t) {
        return null == e || null == t ? null == e && null == t : e.sameText(t);
      }, eventMatches: function eventMatches(e, t, n) {
        var r = t.qualifier;return null == r || e !== n.target && a.element(n.target) && r.matches(n.target);
      }, eventFields: function eventFields(e) {
        return { cy: e.cy(), target: e };
      }, callbackContext: function callbackContext(e, t, n) {
        return null != t.qualifier ? n.target : e;
      }, beforeEmit: function beforeEmit(e, t) {
        t.conf && t.conf.once && t.conf.onceCollection.removeListener(t.event, t.qualifier, t.callback);
      }, bubble: function bubble() {
        return !0;
      }, parent: function parent(e) {
        return e.isChild() ? e.parent() : e.cy();
      } },
        u = function u(e) {
      return a.string(e) ? new s(e) : e;
    },
        c = { createEmitter: function createEmitter() {
        for (var e = 0; e < this.length; e++) {
          var t = this[e],
              n = t._private;n.emitter || (n.emitter = new r(o.assign({ context: t }, l)));
        }return this;
      }, emitter: function emitter() {
        return this._private.emitter;
      }, on: function on(e, t, n) {
        for (var r = 0; r < this.length; r++) {
          this[r].emitter().on(e, u(t), n);
        }return this;
      }, removeListener: function removeListener(e, t, n) {
        for (var r = 0; r < this.length; r++) {
          this[r].emitter().removeListener(e, u(t), n);
        }return this;
      }, one: function one(e, t, n) {
        for (var r = 0; r < this.length; r++) {
          this[r].emitter().one(e, u(t), n);
        }return this;
      }, once: function once(e, t, n) {
        for (var r = 0; r < this.length; r++) {
          this[r].emitter().on(e, u(t), n, { once: !0, onceCollection: this });
        }
      }, emit: function emit(e, t) {
        for (var n = 0; n < this.length; n++) {
          this[n].emitter().emit(e, t);
        }return this;
      }, emitAndNotify: function emitAndNotify(e, t) {
        if (0 !== this.length) return this.cy().notify({ type: e, eles: this }), this.emit(e, t), this;
      } };i.eventAliasesOn(c), e.exports = c;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(6),
        a = { nodes: function nodes(e) {
        return this.filter(function (e) {
          return e.isNode();
        }).filter(e);
      }, edges: function edges(e) {
        return this.filter(function (e) {
          return e.isEdge();
        }).filter(e);
      }, filter: function filter(e, t) {
        if (void 0 === e) return this;if (r.string(e) || r.elementOrCollection(e)) return new i(e).filter(this);if (r.fn(e)) {
          for (var n = this.spawn(), a = this, o = 0; o < a.length; o++) {
            var s = a[o];(t ? e.apply(t, [s, o, a]) : e(s, o, a)) && n.merge(s);
          }return n;
        }return this.spawn();
      }, not: function not(e) {
        if (e) {
          r.string(e) && (e = this.filter(e));for (var t = [], n = e._private.map, i = 0; i < this.length; i++) {
            var a = this[i];n.has(a.id()) || t.push(a);
          }return this.spawn(t);
        }return this;
      }, absoluteComplement: function absoluteComplement() {
        return this.cy().mutableElements().not(this);
      }, intersect: function intersect(e) {
        if (r.string(e)) {
          var t = e;return this.filter(t);
        }for (var n = [], i = this, a = e, o = this.length < e.length, s = o ? a._private.map : i._private.map, l = o ? i : a, u = 0; u < l.length; u++) {
          var c = l[u]._private.data.id,
              d = s.get(c);d && n.push(d.ele);
        }return this.spawn(n);
      }, xor: function xor(e) {
        var t = this._private.cy;r.string(e) && (e = t.$(e));var n = [],
            i = this,
            a = e,
            o = function o(e, t) {
          for (var r = 0; r < e.length; r++) {
            var i = e[r],
                a = i._private.data.id;t.hasElementWithId(a) || n.push(i);
          }
        };return o(i, a), o(a, i), this.spawn(n);
      }, diff: function diff(e) {
        var t = this._private.cy;r.string(e) && (e = t.$(e));var n = [],
            i = [],
            a = [],
            o = this,
            s = e,
            l = function l(e, t, n) {
          for (var r = 0; r < e.length; r++) {
            var i = e[r],
                o = i._private.data.id;t.hasElementWithId(o) ? a.push(i) : n.push(i);
          }
        };return l(o, s, n), l(s, o, i), { left: this.spawn(n, { unique: !0 }), right: this.spawn(i, { unique: !0 }), both: this.spawn(a, { unique: !0 }) };
      }, add: function add(e) {
        var t = this._private.cy;if (!e) return this;if (r.string(e)) {
          var n = e;e = t.mutableElements().filter(n);
        }for (var i = [], a = 0; a < this.length; a++) {
          i.push(this[a]);
        }for (var o = this._private.map, s = 0; s < e.length; s++) {
          !o.has(e[s].id()) && i.push(e[s]);
        }return this.spawn(i);
      }, merge: function merge(e) {
        var t = this._private,
            n = t.cy;if (!e) return this;if (e && r.string(e)) {
          var i = e;e = n.mutableElements().filter(i);
        }for (var a = t.map, o = 0; o < e.length; o++) {
          var s = e[o],
              l = s._private.data.id;if (!a.has(l)) {
            var u = this.length++;this[u] = s, a.set(l, { ele: s, index: u });
          } else {
            var c = a.get(l).index;this[c] = s, a.set(l, { ele: s, index: c });
          }
        }return this;
      }, unmergeOne: function unmergeOne(e) {
        e = e[0];var t = this._private,
            n = e._private.data.id,
            r = t.map,
            i = r.get(n);if (!i) return this;var a = i.index;this[a] = void 0, r.delete(n);var o = a === this.length - 1;if (this.length > 1 && !o) {
          var s = this.length - 1,
              l = this[s],
              u = l._private.data.id;this[s] = void 0, this[a] = l, r.set(u, { ele: l, index: a });
        }return this.length--, this;
      }, unmerge: function unmerge(e) {
        var t = this._private.cy;if (!e) return this;if (e && r.string(e)) {
          var n = e;e = t.mutableElements().filter(n);
        }for (var i = 0; i < e.length; i++) {
          this.unmergeOne(e[i]);
        }return this;
      }, map: function map(e, t) {
        for (var n = [], r = this, i = 0; i < r.length; i++) {
          var a = r[i],
              o = t ? e.apply(t, [a, i, r]) : e(a, i, r);n.push(o);
        }return n;
      }, reduce: function reduce(e, t) {
        for (var n = t, r = this, i = 0; i < r.length; i++) {
          n = e(n, r[i], i, r);
        }return n;
      }, max: function max(e, t) {
        for (var n = -1 / 0, r = void 0, i = this, a = 0; a < i.length; a++) {
          var o = i[a],
              s = t ? e.apply(t, [o, a, i]) : e(o, a, i);s > n && (n = s, r = o);
        }return { value: n, ele: r };
      }, min: function min(e, t) {
        for (var n = 1 / 0, r = void 0, i = this, a = 0; a < i.length; a++) {
          var o = i[a],
              s = t ? e.apply(t, [o, a, i]) : e(o, a, i);s < n && (n = s, r = o);
        }return { value: n, ele: r };
      } },
        o = a;o.u = o["|"] = o["+"] = o.union = o.or = o.add, o["\\"] = o["!"] = o["-"] = o.difference = o.relativeComplement = o.subtract = o.not, o.n = o["&"] = o["."] = o.and = o.intersection = o.intersect, o["^"] = o["(+)"] = o["(-)"] = o.symmetricDifference = o.symdiff = o.xor, o.fnFilter = o.filterFn = o.stdFilter = o.filter, o.complement = o.abscomp = o.absoluteComplement, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = { isNode: function isNode() {
        return "nodes" === this.group();
      }, isEdge: function isEdge() {
        return "edges" === this.group();
      }, isLoop: function isLoop() {
        return this.isEdge() && this.source().id() === this.target().id();
      }, isSimple: function isSimple() {
        return this.isEdge() && this.source().id() !== this.target().id();
      }, group: function group() {
        var e = this[0];if (e) return e._private.group;
      } };e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(17),
        a = n(1),
        o = { forEach: function forEach(e, t) {
        if (r.fn(e)) for (var n = 0; n < this.length; n++) {
          var i = this[n],
              a = t ? e.apply(t, [i, n, this]) : e(i, n, this);if (!1 === a) break;
        }return this;
      }, toArray: function toArray() {
        for (var e = [], t = 0; t < this.length; t++) {
          e.push(this[t]);
        }return e;
      }, slice: function slice(e, t) {
        var n = [],
            r = this.length;null == t && (t = r), null == e && (e = 0), e < 0 && (e = r + e), t < 0 && (t = r + t);for (var i = e; i >= 0 && i < t && i < r; i++) {
          n.push(this[i]);
        }return this.spawn(n);
      }, size: function size() {
        return this.length;
      }, eq: function eq(e) {
        return this[e] || this.spawn();
      }, first: function first() {
        return this[0] || this.spawn();
      }, last: function last() {
        return this[this.length - 1] || this.spawn();
      }, empty: function empty() {
        return 0 === this.length;
      }, nonempty: function nonempty() {
        return !this.empty();
      }, sort: function sort(e) {
        if (!r.fn(e)) return this;var t = this.toArray().sort(e);return this.spawn(t);
      }, sortByZIndex: function sortByZIndex() {
        return this.sort(i);
      }, zDepth: function zDepth() {
        var e = this[0];if (e) {
          var t = e._private;if ("nodes" === t.group) {
            var n = t.data.parent ? e.parents().size() : 0;return e.isParent() ? n : a.MAX_INT - 1;
          }var r = t.source,
              i = t.target,
              o = r.zDepth(),
              s = i.zDepth();return Math.max(o, s, 0);
        }
      } };o.each = o.forEach, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(5),
        o = n(2),
        s = { layoutDimensions: function layoutDimensions(e) {
        if (e = i.assign({ nodeDimensionsIncludeLabels: !0 }, e), e.nodeDimensionsIncludeLabels) {
          var t = this.boundingBox();return { w: t.w, h: t.h };
        }return { w: this.outerWidth(), h: this.outerHeight() };
      }, layoutPositions: function layoutPositions(e, t, n) {
        var s = this.nodes(),
            l = this.cy(),
            u = t.eles,
            c = function c(e, t) {
          return e.id() + "$" + t;
        },
            d = i.memoize(n, c);e.emit({ type: "layoutstart", layout: e }), e.animations = [];var h = function h(e, t, n) {
          var r = { x: t.x1 + t.w / 2, y: t.y1 + t.h / 2 },
              i = { x: (n.x - r.x) * e, y: (n.y - r.y) * e };return { x: r.x + i.x, y: r.y + i.y };
        },
            p = t.spacingFactor && 1 !== t.spacingFactor,
            f = function () {
          if (!p) return null;for (var e = o.makeBoundingBox(), t = 0; t < s.length; t++) {
            var n = s[t],
                r = d(n, t);o.expandBoundingBoxByPoint(e, r.x, r.y);
          }return e;
        }(),
            v = i.memoize(function (e, n) {
          var i = d(e, n),
              a = e.position();if (r.number(a.x) && r.number(a.y) || e.silentPosition({ x: 0, y: 0 }), p) {
            var o = Math.abs(t.spacingFactor);i = h(o, f, i);
          }return null != t.transform && (i = t.transform(e, i)), i;
        }, c);if (t.animate) {
          for (var g = 0; g < s.length; g++) {
            var y = s[g],
                m = v(y, g);if (null == t.animateFilter || t.animateFilter(y, g)) {
              var b = y.animation({ position: m, duration: t.animationDuration, easing: t.animationEasing });e.animations.push(b), b.play();
            } else y.position(m);
          }if (t.fit) {
            var x = l.animation({ fit: { boundingBox: u.boundingBoxAt(v), padding: t.padding }, duration: t.animationDuration, easing: t.animationEasing });e.animations.push(x), x.play();
          } else if (void 0 !== t.zoom && void 0 !== t.pan) {
            var w = l.animation({ zoom: t.zoom, pan: t.pan, duration: t.animationDuration, easing: t.animationEasing });e.animations.push(w), w.play();
          }e.one("layoutready", t.ready), e.emit({ type: "layoutready", layout: e }), a.all(e.animations.map(function (e) {
            return e.promise();
          })).then(function () {
            e.one("layoutstop", t.stop), e.emit({ type: "layoutstop", layout: e });
          });
        } else s.positions(v), t.fit && l.fit(t.eles, t.padding), null != t.zoom && l.zoom(t.zoom), t.pan && l.pan(t.pan), e.one("layoutready", t.ready), e.emit({ type: "layoutready", layout: e }), e.one("layoutstop", t.stop), e.emit({ type: "layoutstop", layout: e });return this;
      }, layout: function layout(e) {
        return this.cy().makeLayout(i.extend({}, e, { eles: this }));
      } };s.createLayout = s.makeLayout = s.layout, e.exports = s;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n) {
      var r,
          i = n._private,
          a = i.styleCache = i.styleCache || {};return null != (r = a[e]) ? r : r = a[e] = t(n);
    }function i(e, t) {
      return function (n) {
        return r(e, t, n);
      };
    }function a(e, t) {
      var n = function n(e) {
        return t.call(e);
      };return function () {
        var t = this[0];if (t) return r(e, n, t);
      };
    }function o(e, t) {
      var n = e._private,
          r = n.data.parent ? e.parents() : null;if (r) for (var i = 0; i < r.length; i++) {
        var a = r[i];if (!t(a)) return !1;
      }return !0;
    }function s(e) {
      var t = e.ok,
          n = e.edgeOkViaNode || e.ok,
          r = e.parentOk || e.ok;return function () {
        var e = this.cy();if (!e.styleEnabled()) return !0;var i = this[0],
            a = e.hasCompoundNodes();if (i) {
          var s = i._private;if (!t(i)) return !1;if (i.isNode()) return !a || o(i, r);var l = s.source,
              u = s.target;return n(l) && (!a || o(l, n)) && (l === u || n(u) && (!a || o(u, n)));
        }
      };
    }var l = n(0),
        u = { recalculateRenderedStyle: function recalculateRenderedStyle(e) {
        var t = this.cy(),
            n = t.renderer(),
            r = t.styleEnabled();return n && r && n.recalculateRenderedStyle(this, e), this;
      }, dirtyStyleCache: function dirtyStyleCache() {
        var e = this.cy(),
            t = function t(e) {
          return e._private.styleCache = {};
        };if (e.hasCompoundNodes()) {
          var n = void 0;n = this.spawnSelf().merge(this.descendants()).merge(this.parents()), n.merge(n.connectedEdges()), n.forEach(t);
        } else this.forEach(function (e) {
          t(e), e.connectedEdges().forEach(t);
        });return this;
      }, updateStyle: function updateStyle(e) {
        var t = this._private.cy;if (!t.styleEnabled()) return this;if (t._private.batchingStyle) {
          return t._private.batchStyleEles.merge(this), this;
        }var n = t.hasCompoundNodes(),
            r = t.style(),
            i = this;e = !(!e && void 0 !== e), n && (i = this.spawnSelf().merge(this.descendants()).merge(this.parents()));var a = r.apply(i);return a.dirtyStyleCache(), a.dirtyCompoundBoundsCache(), e ? a.emitAndNotify("style") : a.emit("style"), this;
      }, updateMappers: function updateMappers(e) {
        var t = this._private.cy,
            n = t.style();if (e = !(!e && void 0 !== e), !t.styleEnabled()) return this;var r = n.updateMappers(this);return r.dirtyStyleCache(), r.dirtyCompoundBoundsCache(), e ? r.emitAndNotify("style") : r.emit("style"), this;
      }, parsedStyle: function parsedStyle(e) {
        var t = this[0],
            n = t.cy();if (n.styleEnabled()) return t ? t._private.style[e] || n.style().getDefaultProperty(e) : void 0;
      }, numericStyle: function numericStyle(e) {
        var t = this[0];if (t.cy().styleEnabled() && t) {
          var n = t.pstyle(e);return void 0 !== n.pfValue ? n.pfValue : n.value;
        }
      }, numericStyleUnits: function numericStyleUnits(e) {
        var t = this[0];if (t.cy().styleEnabled()) return t ? t.pstyle(e).units : void 0;
      }, renderedStyle: function renderedStyle(e) {
        var t = this.cy();if (!t.styleEnabled()) return this;var n = this[0];return n ? t.style().getRenderedStyle(n, e) : void 0;
      }, style: function style(e, t) {
        var n = this.cy();if (!n.styleEnabled()) return this;var r = n.style();if (l.plainObject(e)) {
          var i = e;r.applyBypass(this, i, !1), this.dirtyStyleCache(), this.dirtyCompoundBoundsCache(), this.emitAndNotify("style");
        } else if (l.string(e)) {
          if (void 0 === t) {
            var a = this[0];return a ? r.getStylePropertyValue(a, e) : void 0;
          }r.applyBypass(this, e, t, !1), this.dirtyStyleCache(), this.dirtyCompoundBoundsCache(), this.emitAndNotify("style");
        } else if (void 0 === e) {
          var o = this[0];return o ? r.getRawStyle(o) : void 0;
        }return this;
      }, removeStyle: function removeStyle(e) {
        var t = this.cy();if (!t.styleEnabled()) return this;var n = t.style(),
            r = this;if (void 0 === e) for (var i = 0; i < r.length; i++) {
          var a = r[i];n.removeAllBypasses(a, !1);
        } else {
          e = e.split(/\s+/);for (var o = 0; o < r.length; o++) {
            var s = r[o];n.removeBypasses(s, e, !1);
          }
        }return this.dirtyStyleCache(), this.dirtyCompoundBoundsCache(), this.emitAndNotify("style"), this;
      }, show: function show() {
        return this.css("display", "element"), this;
      }, hide: function hide() {
        return this.css("display", "none"), this;
      }, effectiveOpacity: function effectiveOpacity() {
        var e = this.cy();if (!e.styleEnabled()) return 1;var t = e.hasCompoundNodes(),
            n = this[0];if (n) {
          var r = n._private,
              i = n.pstyle("opacity").value;if (!t) return i;var a = r.data.parent ? n.parents() : null;if (a) for (var o = 0; o < a.length; o++) {
            var s = a[o],
                l = s.pstyle("opacity").value;i *= l;
          }return i;
        }
      }, transparent: function transparent() {
        if (!this.cy().styleEnabled()) return !1;var e = this[0],
            t = e.cy().hasCompoundNodes();return e ? t ? 0 === e.effectiveOpacity() : 0 === e.pstyle("opacity").value : void 0;
      }, backgrounding: function backgrounding() {
        return !!this.cy().styleEnabled() && !!this[0]._private.backgrounding;
      } },
        c = i("eleTakesUpSpace", function (e) {
      return "element" === e.pstyle("display").value && 0 !== e.width() && (!e.isNode() || 0 !== e.height());
    });u.takesUpSpace = a("takesUpSpace", s({ ok: c }));var d = i("eleInteractive", function (e) {
      return "yes" === e.pstyle("events").value && "visible" === e.pstyle("visibility").value && c(e);
    }),
        h = i("parentInteractive", function (e) {
      return "visible" === e.pstyle("visibility").value && c(e);
    });u.interactive = a("interactive", s({ ok: d, parentOk: h, edgeOkViaNode: c })), u.noninteractive = function () {
      var e = this[0];if (e) return !e.interactive();
    };var p = i("eleVisible", function (e) {
      return "visible" === e.pstyle("visibility").value && 0 !== e.pstyle("opacity").pfValue && c(e);
    }),
        f = c;u.visible = a("visible", s({ ok: p, edgeOkViaNode: f })), u.hidden = function () {
      var e = this[0];if (e) return !e.visible();
    }, u.bypass = u.css = u.style, u.renderedCss = u.renderedStyle, u.removeBypass = u.removeCss = u.removeStyle, u.pstyle = u.parsedStyle, e.exports = u;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      return function () {
        var t = arguments,
            n = [];if (2 === t.length) {
          var r = t[0],
              i = t[1];this.on(e.event, r, i);
        } else if (1 === t.length) {
          var a = t[0];this.on(e.event, a);
        } else if (0 === t.length) {
          for (var o = 0; o < this.length; o++) {
            var s = this[o],
                l = !e.ableField || s._private[e.ableField],
                u = s._private[e.field] != e.value;if (e.overrideAble) {
              var c = e.overrideAble(s);if (void 0 !== c && (l = c, !c)) return this;
            }l && (s._private[e.field] = e.value, u && n.push(s));
          }var d = this.spawn(n);d.updateStyle(), d.emit(e.event);
        }return this;
      };
    }function i(e) {
      a[e.field] = function () {
        var t = this[0];if (t) {
          if (e.overrideField) {
            var n = e.overrideField(t);if (void 0 !== n) return n;
          }return t._private[e.field];
        }
      }, a[e.on] = r({ event: e.on, field: e.field, ableField: e.ableField, overrideAble: e.overrideAble, value: !0 }), a[e.off] = r({ event: e.off, field: e.field, ableField: e.ableField, overrideAble: e.overrideAble, value: !1 });
    }var a = {};i({ field: "locked", overrideField: function overrideField(e) {
        return !!e.cy().autolock() || void 0;
      }, on: "lock", off: "unlock" }), i({ field: "grabbable", overrideField: function overrideField(e) {
        return !e.cy().autoungrabify() && void 0;
      }, on: "grabify", off: "ungrabify" }), i({ field: "selected", ableField: "selectable", overrideAble: function overrideAble(e) {
        return !e.cy().autounselectify() && void 0;
      }, on: "select", off: "unselect" }), i({ field: "selectable", overrideField: function overrideField(e) {
        return !e.cy().autounselectify() && void 0;
      }, on: "selectify", off: "unselectify" }), a.deselect = a.unselect, a.grabbed = function () {
      var e = this[0];if (e) return e._private.grabbed;
    }, i({ field: "active", on: "activate", off: "unactivate" }), a.inactive = function () {
      var e = this[0];if (e) return !e._private.active;
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      return function (t) {
        for (var n = [], r = 0; r < this.length; r++) {
          var i = this[r],
              a = i._private[e.attr];a && n.push(a);
        }return this.spawn(n, { unique: !0 }).filter(t);
      };
    }function i(e) {
      return function (t) {
        var n = [],
            r = this._private.cy,
            i = e || {};s.string(t) && (t = r.$(t));for (var a = 0; a < t.length; a++) {
          for (var o = t[a]._private.edges, l = 0; l < o.length; l++) {
            var u = o[l],
                c = u._private.data,
                d = this.hasElementWithId(c.source) && t.hasElementWithId(c.target),
                h = t.hasElementWithId(c.source) && this.hasElementWithId(c.target),
                p = d || h;if (p) {
              if (i.thisIsSrc || i.thisIsTgt) {
                if (i.thisIsSrc && !d) continue;if (i.thisIsTgt && !h) continue;
              }n.push(u);
            }
          }
        }return this.spawn(n, { unique: !0 });
      };
    }function a(e) {
      var t = { codirected: !1 };return e = o.extend({}, t, e), function (t) {
        for (var n = [], r = this.edges(), i = e, a = 0; a < r.length; a++) {
          for (var o = r[a], s = o._private, l = s.source, u = l._private.data.id, c = s.data.target, d = l._private.edges, h = 0; h < d.length; h++) {
            var p = d[h],
                f = p._private.data,
                v = f.target,
                g = f.source,
                y = v === c && g === u,
                m = u === v && c === g;(i.codirected && y || !i.codirected && (y || m)) && n.push(p);
          }
        }return this.spawn(n, { unique: !0 }).filter(t);
      };
    }var o = n(1),
        s = n(0),
        l = {},
        u = function u(e, t) {
      return function (n, r, i, a) {
        var o = n,
            l = this,
            u = void 0;if (null == o ? u = "null" : s.elementOrCollection(o) && 1 === o.length && (u = "#" + o.id()), 1 === l.length && u) {
          var c = l[0]._private,
              d = c.traversalCache = c.traversalCache || {},
              h = d[t] = d[t] || {},
              p = h[u];return p || (h[u] = e.call(l, n, r, i, a));
        }return e.call(l, n, r, i, a);
      };
    },
        c = function c(e) {
      return function (t) {
        for (var n = this, r = [], i = 0; i < n.length; i++) {
          var a = n[i];if (a.isNode()) {
            for (var o = !1, s = a.connectedEdges(), l = 0; l < s.length; l++) {
              var u = s[l],
                  c = u.source(),
                  d = u.target();if (e.noIncomingEdges && d === a && c !== a || e.noOutgoingEdges && c === a && d !== a) {
                o = !0;break;
              }
            }o || r.push(a);
          }
        }return this.spawn(r, { unique: !0 }).filter(t);
      };
    },
        d = function d(e) {
      return function (t) {
        for (var n = this, r = [], i = 0; i < n.length; i++) {
          var a = n[i];if (a.isNode()) for (var o = a.connectedEdges(), s = 0; s < o.length; s++) {
            var l = o[s],
                u = l.source(),
                c = l.target();e.outgoing && u === a ? (r.push(l), r.push(c)) : e.incoming && c === a && (r.push(l), r.push(u));
          }
        }return this.spawn(r, { unique: !0 }).filter(t);
      };
    },
        h = function h(e) {
      return function (t) {
        for (var n = this, r = [], i = {};;) {
          var a = e.outgoing ? n.outgoers() : n.incomers();if (0 === a.length) break;for (var o = !1, s = 0; s < a.length; s++) {
            var l = a[s],
                u = l.id();i[u] || (i[u] = !0, r.push(l), o = !0);
          }if (!o) break;n = a;
        }return this.spawn(r, { unique: !0 }).filter(t);
      };
    };l.clearTraversalCache = function () {
      for (var e = 0; e < this.length; e++) {
        this[e]._private.traversalCache = null;
      }
    }, o.extend(l, { roots: c({ noIncomingEdges: !0 }), leaves: c({ noOutgoingEdges: !0 }), outgoers: u(d({ outgoing: !0 }), "outgoers"), successors: h({ outgoing: !0 }), incomers: u(d({ incoming: !0 }), "incomers"), predecessors: h({ incoming: !0 }) }), o.extend(l, { neighborhood: u(function (e) {
        for (var t = [], n = this.nodes(), r = 0; r < n.length; r++) {
          for (var i = n[r], a = i.connectedEdges(), o = 0; o < a.length; o++) {
            var s = a[o],
                l = s.source(),
                u = s.target(),
                c = i === l ? u : l;c.length > 0 && t.push(c[0]), t.push(s[0]);
          }
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, "neighborhood"), closedNeighborhood: function closedNeighborhood(e) {
        return this.neighborhood().add(this).filter(e);
      }, openNeighborhood: function openNeighborhood(e) {
        return this.neighborhood(e);
      } }), l.neighbourhood = l.neighborhood, l.closedNeighbourhood = l.closedNeighborhood, l.openNeighbourhood = l.openNeighborhood, o.extend(l, { source: u(function (e) {
        var t = this[0],
            n = void 0;return t && (n = t._private.source || t.cy().collection()), n && e ? n.filter(e) : n;
      }, "source"), target: u(function (e) {
        var t = this[0],
            n = void 0;return t && (n = t._private.target || t.cy().collection()), n && e ? n.filter(e) : n;
      }, "target"), sources: r({ attr: "source" }), targets: r({ attr: "target" }) }), o.extend(l, { edgesWith: u(i(), "edgesWith"), edgesTo: u(i({ thisIsSrc: !0 }), "edgesTo") }), o.extend(l, { connectedEdges: u(function (e) {
        for (var t = [], n = this, r = 0; r < n.length; r++) {
          var i = n[r];if (i.isNode()) for (var a = i._private.edges, o = 0; o < a.length; o++) {
            var s = a[o];t.push(s);
          }
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, "connectedEdges"), connectedNodes: u(function (e) {
        for (var t = [], n = this, r = 0; r < n.length; r++) {
          var i = n[r];i.isEdge() && (t.push(i.source()[0]), t.push(i.target()[0]));
        }return this.spawn(t, { unique: !0 }).filter(e);
      }, "connectedNodes"), parallelEdges: u(a(), "parallelEdges"), codirectedEdges: u(a({ codirected: !0 }), "codirectedEdges") }), o.extend(l, { components: function components() {
        var e = this,
            t = e.cy(),
            n = e.spawn(),
            r = e.nodes().spawnSelf(),
            i = [],
            a = function a(e, t) {
          n.merge(e), r.unmerge(e), t.merge(e);
        };if (r.empty()) return e.spawn();do {
          !function () {
            var n = t.collection();i.push(n);var o = r[0];a(o, n), e.bfs({ directed: !1, roots: o, visit: function visit(e, t, r, i, o) {
                a(e, n);
              } });
          }();
        } while (r.length > 0);return i.map(function (e) {
          var t = e.connectedEdges().stdFilter(function (t) {
            return e.anySame(t.source()) && e.anySame(t.target());
          });return e.union(t);
        });
      } }), e.exports = l;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(7),
        o = n(14),
        s = { add: function add(e) {
        var t = void 0,
            n = this;if (r.elementOrCollection(e)) {
          var s = e;if (s._private.cy === n) t = s.restore();else {
            for (var l = [], u = 0; u < s.length; u++) {
              var c = s[u];l.push(c.json());
            }t = new a(n, l);
          }
        } else if (r.array(e)) {
          var d = e;t = new a(n, d);
        } else if (r.plainObject(e) && (r.array(e.nodes) || r.array(e.edges))) {
          for (var h = e, p = [], f = ["nodes", "edges"], v = 0, g = f.length; v < g; v++) {
            var y = f[v],
                m = h[y];if (r.array(m)) for (var b = 0, x = m.length; b < x; b++) {
              var w = i.extend({ group: y }, m[b]);p.push(w);
            }
          }t = new a(n, p);
        } else {
          var E = e;t = new o(n, E).collection();
        }return t;
      }, remove: function remove(e) {
        if (r.elementOrCollection(e)) ;else if (r.string(e)) {
          var t = e;e = this.$(t);
        }return e.remove();
      } };e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = n(4),
        i = n(1),
        a = n(72),
        o = { animate: r.animate(), animation: r.animation(), animated: r.animated(), clearQueue: r.clearQueue(), delay: r.delay(), delayAnimation: r.delayAnimation(), stop: r.stop(), addToAnimationPool: function addToAnimationPool(e) {
        var t = this;t.styleEnabled() && t._private.aniEles.merge(e);
      }, stopAnimationLoop: function stopAnimationLoop() {
        this._private.animationsRunning = !1;
      }, startAnimationLoop: function startAnimationLoop() {
        function e() {
          t._private.animationsRunning && i.requestAnimationFrame(function (n) {
            a(n, t), e();
          });
        }var t = this;if (t._private.animationsRunning = !0, t.styleEnabled()) {
          var n = t.renderer();n && n.beforeRender ? n.beforeRender(function (e, n) {
            a(n, t);
          }, n.beforeRenderPriorities.animations) : e();
        }
      } };e.exports = o;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      function n(t, n) {
        var r = t._private,
            s = r.animation.current,
            l = r.animation.queue,
            u = !1;if (!n && "none" === t.pstyle("display").value) {
          s = s.splice(0, s.length).concat(l.splice(0, l.length));for (var c = 0; c < s.length; c++) {
            s[c].stop();
          }
        }if (0 === s.length) {
          var d = l.shift();d && s.push(d);
        }for (var h = function h(e) {
          for (var t = e.length - 1; t >= 0; t--) {
            (0, e[t])();
          }e.splice(0, e.length);
        }, p = s.length - 1; p >= 0; p--) {
          var f = s[p],
              v = f._private;v.stopped ? (s.splice(p, 1), v.hooked = !1, v.playing = !1, v.started = !1, h(v.frames)) : (v.playing || v.applying) && (v.playing && v.applying && (v.applying = !1), v.started || a(t, f, e, n), i(t, f, e, n), v.applying && (v.applying = !1), h(v.frames), f.completed() && (s.splice(p, 1), v.hooked = !1, v.playing = !1, v.started = !1, h(v.completes)), u = !0);
        }return n || 0 !== s.length || 0 !== l.length || o.push(t), u;
      }for (var r = t._private.aniEles, o = [], s = !1, l = 0; l < r.length; l++) {
        var u = r[l],
            c = n(u);s = s || c;
      }var d = n(t, !0);(s || d) && (r.length > 0 ? (r.dirtyCompoundBoundsCache(), t.notify({ type: "draw", eles: r })) : t.notify({ type: "draw" })), r.unmerge(o), t.emit("step");
    }var i = n(73),
        a = n(78);e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n, r) {
      var l = !r,
          u = e._private,
          c = t._private,
          d = c.easing,
          h = c.startTime,
          p = r ? e : e.cy(),
          f = p.style();if (!c.easingImpl) if (null == d) c.easingImpl = a.linear;else {
        var v = void 0;if (s.string(d)) {
          var g = f.parse("transition-timing-function", d);v = g.value;
        } else v = d;var y = void 0,
            m = void 0;s.string(v) ? (y = v, m = []) : (y = v[1], m = v.slice(2).map(function (e) {
          return +e;
        })), m.length > 0 ? ("spring" === y && m.push(c.duration), c.easingImpl = a[y].apply(null, m)) : c.easingImpl = a[y];
      }var b = c.easingImpl,
          x = void 0;if (x = 0 === c.duration ? 1 : (n - h) / c.duration, c.applying && (x = c.progress), x < 0 ? x = 0 : x > 1 && (x = 1), null == c.delay) {
        var w = c.startPosition,
            E = c.position;if (E && l && !e.locked()) {
          var P = e.position();i(w.x, E.x) && (P.x = o(w.x, E.x, x, b)), i(w.y, E.y) && (P.y = o(w.y, E.y, x, b)), e.emit("position");
        }var C = c.startPan,
            S = c.pan,
            T = u.pan,
            D = null != S && r;D && (i(C.x, S.x) && (T.x = o(C.x, S.x, x, b)), i(C.y, S.y) && (T.y = o(C.y, S.y, x, b)), e.emit("pan"));var k = c.startZoom,
            _ = c.zoom,
            M = null != _ && r;M && (i(k, _) && (u.zoom = o(k, _, x, b)), e.emit("zoom")), (D || M) && e.emit("viewport");var I = c.style;if (I && I.length > 0 && l) {
          for (var N = 0; N < I.length; N++) {
            var B = I[N],
                z = B.name,
                L = B,
                A = c.startStyle[z],
                O = f.properties[A.name],
                R = o(A, L, x, b, O);f.overrideBypass(e, z, R);
          }e.emit("style");
        }
      }return c.progress = x, x;
    }function i(e, t) {
      return null != e && null != t && (!(!s.number(e) || !s.number(t)) || !(!e || !t));
    }var a = n(74),
        o = n(77),
        s = n(0);e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(75),
        i = n(76),
        a = function a(e, t, n, i) {
      var a = r(e, t, n, i);return function (e, t, n) {
        return e + (t - e) * a(n);
      };
    },
        o = { linear: function linear(e, t, n) {
        return e + (t - e) * n;
      }, ease: a(.25, .1, .25, 1), "ease-in": a(.42, 0, 1, 1), "ease-out": a(0, 0, .58, 1), "ease-in-out": a(.42, 0, .58, 1), "ease-in-sine": a(.47, 0, .745, .715), "ease-out-sine": a(.39, .575, .565, 1), "ease-in-out-sine": a(.445, .05, .55, .95), "ease-in-quad": a(.55, .085, .68, .53), "ease-out-quad": a(.25, .46, .45, .94), "ease-in-out-quad": a(.455, .03, .515, .955), "ease-in-cubic": a(.55, .055, .675, .19), "ease-out-cubic": a(.215, .61, .355, 1), "ease-in-out-cubic": a(.645, .045, .355, 1), "ease-in-quart": a(.895, .03, .685, .22), "ease-out-quart": a(.165, .84, .44, 1), "ease-in-out-quart": a(.77, 0, .175, 1), "ease-in-quint": a(.755, .05, .855, .06), "ease-out-quint": a(.23, 1, .32, 1), "ease-in-out-quint": a(.86, 0, .07, 1), "ease-in-expo": a(.95, .05, .795, .035), "ease-out-expo": a(.19, 1, .22, 1), "ease-in-out-expo": a(1, 0, 0, 1), "ease-in-circ": a(.6, .04, .98, .335), "ease-out-circ": a(.075, .82, .165, 1), "ease-in-out-circ": a(.785, .135, .15, .86), spring: function spring(e, t, n) {
        if (0 === n) return o.linear;var r = i(e, t, n);return function (e, t, n) {
          return e + (t - e) * r(n);
        };
      }, "cubic-bezier": a };e.exports = o;
  }, function (e, t, n) {
    "use strict"; /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */

    function r(e, t, n, r) {
      function i(e, t) {
        return 1 - 3 * t + 3 * e;
      }function a(e, t) {
        return 3 * t - 6 * e;
      }function o(e) {
        return 3 * e;
      }function s(e, t, n) {
        return ((i(t, n) * e + a(t, n)) * e + o(t)) * e;
      }function l(e, t, n) {
        return 3 * i(t, n) * e * e + 2 * a(t, n) * e + o(t);
      }function u(t, r) {
        for (var i = 0; i < f; ++i) {
          var a = l(r, e, n);if (0 === a) return r;r -= (s(r, e, n) - t) / a;
        }return r;
      }function c() {
        for (var t = 0; t < m; ++t) {
          E[t] = s(t * b, e, n);
        }
      }function d(t, r, i) {
        var a = void 0,
            o = void 0,
            l = 0;do {
          o = r + (i - r) / 2, a = s(o, e, n) - t, a > 0 ? i = o : r = o;
        } while (Math.abs(a) > g && ++l < y);return o;
      }function h(t) {
        for (var r = 0, i = 1, a = m - 1; i !== a && E[i] <= t; ++i) {
          r += b;
        }--i;var o = (t - E[i]) / (E[i + 1] - E[i]),
            s = r + o * b,
            c = l(s, e, n);return c >= v ? u(t, s) : 0 === c ? s : d(t, r, r + b);
      }function p() {
        P = !0, e === t && n === r || c();
      }var f = 4,
          v = .001,
          g = 1e-7,
          y = 10,
          m = 11,
          b = 1 / (m - 1),
          x = "undefined" != typeof Float32Array;if (4 !== arguments.length) return !1;for (var w = 0; w < 4; ++w) {
        if ("number" != typeof arguments[w] || isNaN(arguments[w]) || !isFinite(arguments[w])) return !1;
      }e = Math.min(e, 1), n = Math.min(n, 1), e = Math.max(e, 0), n = Math.max(n, 0);var E = x ? new Float32Array(m) : new Array(m),
          P = !1,
          C = function C(i) {
        return P || p(), e === t && n === r ? i : 0 === i ? 0 : 1 === i ? 1 : s(h(i), t, r);
      };C.getControlPoints = function () {
        return [{ x: e, y: t }, { x: n, y: r }];
      };var S = "generateBezier(" + [e, t, n, r] + ")";return C.toString = function () {
        return S;
      }, C;
    }e.exports = r;
  }, function (e, t, n) {
    "use strict"; /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

    var r = function () {
      function e(e) {
        return -e.tension * e.x - e.friction * e.v;
      }function t(t, n, r) {
        var i = { x: t.x + r.dx * n, v: t.v + r.dv * n, tension: t.tension, friction: t.friction };return { dx: i.v, dv: e(i) };
      }function n(n, r) {
        var i = { dx: n.v, dv: e(n) },
            a = t(n, .5 * r, i),
            o = t(n, .5 * r, a),
            s = t(n, r, o),
            l = 1 / 6 * (i.dx + 2 * (a.dx + o.dx) + s.dx),
            u = 1 / 6 * (i.dv + 2 * (a.dv + o.dv) + s.dv);return n.x = n.x + l * r, n.v = n.v + u * r, n;
      }return function e(t, r, i) {
        var a = { x: -1, v: 0, tension: null, friction: null },
            o = [0],
            s = 0,
            l = void 0,
            u = void 0,
            c = void 0;for (t = parseFloat(t) || 500, r = parseFloat(r) || 20, i = i || null, a.tension = t, a.friction = r, l = null !== i, l ? (s = e(t, r), u = s / i * .016) : u = .016; c = n(c || a, u), o.push(1 + c.x), s += 16, Math.abs(c.x) > 1e-4 && Math.abs(c.v) > 1e-4;) {}return l ? function (e) {
          return o[e * (o.length - 1) | 0];
        } : s;
      };
    }();e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n, r, i) {
      if (1 === r) return n;var a = i(t, n, r);return null == e ? a : ((e.roundValue || e.color) && (a = Math.round(a)), void 0 !== e.min && (a = Math.max(a, e.min)), void 0 !== e.max && (a = Math.min(a, e.max)), a);
    }function i(e, t) {
      return null != e.pfValue || null != e.value ? null == e.pfValue || null != t && "%" === t.type.units ? e.value : e.pfValue : e;
    }function a(e, t, n, a, s) {
      var l = null != s ? s.type : null;n < 0 ? n = 0 : n > 1 && (n = 1);var u = i(e, s),
          c = i(t, s);if (o.number(u) && o.number(c)) return r(l, u, c, n, a);if (o.array(u) && o.array(c)) {
        for (var d = [], h = 0; h < c.length; h++) {
          var p = u[h],
              f = c[h];if (null != p && null != f) {
            var v = r(l, p, f, n, a);d.push(v);
          } else d.push(f);
        }return d;
      }
    }var o = n(0);e.exports = a;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n, r) {
      var i = !r,
          a = e,
          o = t._private,
          s = r ? e : e.cy(),
          l = s.style();if (i) {
        var u = a.position();o.startPosition = o.startPosition || { x: u.x, y: u.y }, o.startStyle = o.startStyle || l.getAnimationStartStyle(a, o.style);
      }if (r) {
        var c = s._private.pan;o.startPan = o.startPan || { x: c.x, y: c.y }, o.startZoom = null != o.startZoom ? o.startZoom : s._private.zoom;
      }o.started = !0, o.startTime = n - o.progress * o.duration;
    }e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(11),
        i = n(4),
        a = n(0),
        o = n(1),
        s = n(6),
        l = { qualifierCompare: function qualifierCompare(e, t) {
        return null == e || null == t ? null == e && null == t : e.sameText(t);
      }, eventMatches: function eventMatches(e, t, n) {
        var r = t.qualifier;return null == r || e !== n.target && a.element(n.target) && r.matches(n.target);
      }, eventFields: function eventFields(e) {
        return { cy: e, target: e };
      }, callbackContext: function callbackContext(e, t, n) {
        return null != t.qualifier ? n.target : e;
      } },
        u = function u(e) {
      return a.string(e) ? new s(e) : e;
    },
        c = { createEmitter: function createEmitter() {
        var e = this._private;return e.emitter || (e.emitter = new r(o.assign({ context: this }, l))), this;
      }, emitter: function emitter() {
        return this._private.emitter;
      }, on: function on(e, t, n) {
        return this.emitter().on(e, u(t), n), this;
      }, removeListener: function removeListener(e, t, n) {
        return this.emitter().removeListener(e, u(t), n), this;
      }, one: function one(e, t, n) {
        return this.emitter().one(e, u(t), n), this;
      }, once: function once(e, t, n) {
        return this.emitter().one(e, u(t), n), this;
      }, emit: function emit(e, t) {
        return this.emitter().emit(e, t), this;
      } };i.eventAliasesOn(c), e.exports = c;
  }, function (e, t, n) {
    "use strict";
    var r = { png: function png(e) {
        var t = this._private.renderer;return e = e || {}, t.png(e);
      }, jpg: function jpg(e) {
        var t = this._private.renderer;return e = e || {}, e.bg = e.bg || "#fff", t.jpg(e);
      } };r.jpeg = r.jpg, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = { layout: function layout(e) {
        var t = this;if (null == e) return void r.error("Layout options must be specified to make a layout");if (null == e.name) return void r.error("A `name` must be specified to make a layout");var n = e.name,
            a = t.extension("layout", n);if (null == a) return void r.error("Can not apply layout: No such layout `" + n + "` found; did you include its JS file?");var o = void 0;return o = i.string(e.eles) ? t.$(e.eles) : null != e.eles ? e.eles : t.$(), new a(r.extend({}, e, { cy: t, eles: o }));
      } };a.createLayout = a.makeLayout = a.layout, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = { notify: function notify(e) {
        var t = this._private;if (t.batchingNotify) {
          var n = t.batchNotifyEles,
              r = t.batchNotifyTypes;return e.eles && n.merge(e.eles), void (r.ids[e.type] || (r.push(e.type), r.ids[e.type] = !0));
        }if (t.notificationsEnabled) {
          var i = this.renderer();!this.isDestroyed() && i && i.notify(e);
        }
      }, notifications: function notifications(e) {
        var t = this._private;if (void 0 === e) return t.notificationsEnabled;t.notificationsEnabled = !!e;
      }, noNotifications: function noNotifications(e) {
        this.notifications(!1), e(), this.notifications(!0);
      }, batching: function batching() {
        return this._private.batchCount > 0;
      }, startBatch: function startBatch() {
        var e = this._private;return null == e.batchCount && (e.batchCount = 0), 0 === e.batchCount && (e.batchingStyle = e.batchingNotify = !0, e.batchStyleEles = this.collection(), e.batchNotifyEles = this.collection(), e.batchNotifyTypes = [], e.batchNotifyTypes.ids = {}), e.batchCount++, this;
      }, endBatch: function endBatch() {
        var e = this._private;return e.batchCount--, 0 === e.batchCount && (e.batchingStyle = !1, e.batchStyleEles.updateStyle(), e.batchingNotify = !1, this.notify({ type: e.batchNotifyTypes, eles: e.batchNotifyEles })), this;
      }, batch: function batch(e) {
        return this.startBatch(), e(), this.endBatch(), this;
      }, batchData: function batchData(e) {
        var t = this;return this.batch(function () {
          for (var n = Object.keys(e), r = 0; r < n.length; r++) {
            var i = n[r],
                a = e[i];t.getElementById(i).data(a);
          }
        });
      } };e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = { renderTo: function renderTo(e, t, n, r) {
        return this._private.renderer.renderTo(e, t, n, r), this;
      }, renderer: function renderer() {
        return this._private.renderer;
      }, forceRender: function forceRender() {
        return this.notify({ type: "draw" }), this;
      }, resize: function resize() {
        return this.invalidateSize(), this.notify({ type: "resize" }), this.emit("resize"), this;
      }, initRenderer: function initRenderer(e) {
        var t = this,
            n = t.extension("renderer", e.name);if (null == n) return void r.error("Can not initialise: No such renderer `%s` found; did you include its JS file?", e.name);t._private.renderer = new n(r.extend({}, e, { cy: t })), this.notify({ type: "init" });
      }, destroyRenderer: function destroyRenderer() {
        var e = this;e.notify({ type: "destroy" });var t = e.container();if (t) for (t._cyreg = null; t.childNodes.length > 0;) {
          t.removeChild(t.childNodes[0]);
        }e._private.renderer = null;
      }, onRender: function onRender(e) {
        return this.on("render", e);
      }, offRender: function offRender(e) {
        return this.off("render", e);
      } };i.invalidateDimensions = i.resize, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(7),
        a = { collection: function collection(e, t) {
        return r.string(e) ? this.$(e) : r.elementOrCollection(e) ? e.collection() : r.array(e) ? new i(this, e, t) : new i(this);
      }, nodes: function nodes(e) {
        var t = this.$(function (e) {
          return e.isNode();
        });return e ? t.filter(e) : t;
      }, edges: function edges(e) {
        var t = this.$(function (e) {
          return e.isEdge();
        });return e ? t.filter(e) : t;
      }, $: function $(e) {
        var t = this._private.elements;return e ? t.filter(e) : t.spawnSelf();
      }, mutableElements: function mutableElements() {
        return this._private.elements;
      } };a.elements = a.filter = a.$, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(18),
        a = { style: function style(e) {
        if (e) {
          this.setStyle(e).update();
        }return this._private.style;
      }, setStyle: function setStyle(e) {
        var t = this._private;return r.stylesheet(e) ? t.style = e.generateStyle(this) : r.array(e) ? t.style = i.fromJson(this, e) : r.string(e) ? t.style = i.fromString(this, e) : t.style = i(this), t.style;
      } };e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = n(5),
        o = {};o.apply = function (e) {
      var t = this,
          n = t._private,
          r = n.cy,
          i = r.collection();n.newStyle && (n.contextStyles = {}, n.propDiffs = {}, t.cleanElements(e, !0));for (var a = 0; a < e.length; a++) {
        var o = e[a],
            s = t.getContextMeta(o);if (!s.empty) {
          i.merge(o);var l = t.getContextStyle(s),
              u = t.applyContextStyle(s, l, o);n.newStyle || t.updateTransitions(o, u.diffProps), t.updateStyleHints(o);
        }
      }return n.newStyle = !1, i;
    }, o.getPropertiesDiff = function (e, t) {
      var n = this,
          r = n._private.propDiffs = n._private.propDiffs || {},
          i = e + "-" + t,
          a = r[i];if (a) return a;for (var o = [], s = {}, l = 0; l < n.length; l++) {
        var u = n[l],
            c = "t" === e[l],
            d = "t" === t[l],
            h = c !== d,
            p = u.mappedProperties.length > 0;if (h || p) {
          var f = void 0;h && p ? f = u.properties : h ? f = u.properties : p && (f = u.mappedProperties);for (var v = 0; v < f.length; v++) {
            for (var g = f[v], y = g.name, m = !1, b = l + 1; b < n.length; b++) {
              var x = n[b];if ("t" === t[b] && (m = null != x.properties[g.name])) break;
            }s[y] || m || (s[y] = !0, o.push(y));
          }
        }
      }return r[i] = o, o;
    }, o.getContextMeta = function (e) {
      var t = this,
          n = "",
          r = void 0,
          i = e._private.styleCxtKey || "";t._private.newStyle && (i = "");for (var a = 0; a < t.length; a++) {
        var o = t[a];n += o.selector && o.selector.matches(e) ? "t" : "f";
      }return r = t.getPropertiesDiff(i, n), e._private.styleCxtKey = n, { key: n, diffPropNames: r, empty: 0 === r.length };
    }, o.getContextStyle = function (e) {
      var t = e.key,
          n = this,
          r = this._private.contextStyles = this._private.contextStyles || {};if (r[t]) return r[t];for (var i = { _private: { key: t } }, a = 0; a < n.length; a++) {
        var o = n[a];if ("t" === t[a]) for (var s = 0; s < o.properties.length; s++) {
          var l = o.properties[s];i[l.name] = l;
        }
      }return r[t] = i, i;
    }, o.applyContextStyle = function (e, t, n) {
      for (var r = this, i = e.diffPropNames, a = {}, o = 0; o < i.length; o++) {
        var s = i[o],
            l = t[s],
            u = n.pstyle(s);if (!l) {
          if (!u) continue;l = u.bypass ? { name: s, deleteBypassed: !0 } : { name: s, delete: !0 };
        }if (u !== l) {
          var c = a[s] = { prev: u };r.applyParsedProperty(n, l), c.next = n.pstyle(s), c.next && c.next.bypass && (c.next = c.next.bypassed);
        }
      }return { diffProps: a };
    }, o.updateStyleHints = function (e) {
      var t = e._private,
          n = this;if (!e.removed()) {
        var r = !1;if ("nodes" === t.group) for (var i = 1; i <= n.pieBackgroundN; i++) {
          var a = e.pstyle("pie-" + i + "-background-size").value;if (a > 0) {
            r = !0;break;
          }
        }t.hasPie = r;var o = e.pstyle("text-transform").strValue,
            s = e.pstyle("label").strValue,
            l = e.pstyle("source-label").strValue,
            u = e.pstyle("target-label").strValue,
            c = e.pstyle("font-style").strValue,
            d = e.pstyle("font-size").pfValue + "px",
            h = e.pstyle("font-family").strValue,
            p = e.pstyle("font-weight").strValue,
            f = e.pstyle("text-valign").strValue,
            v = e.pstyle("text-valign").strValue,
            g = e.pstyle("text-outline-width").pfValue,
            y = e.pstyle("text-wrap").strValue,
            m = e.pstyle("text-max-width").pfValue,
            b = c + "$" + d + "$" + h + "$" + p + "$" + o + "$" + f + "$" + v + "$" + g + "$" + y + "$" + m;t.labelStyleKey = b, t.sourceLabelKey = b + "$" + l, t.targetLabelKey = b + "$" + u, t.labelKey = b + "$" + s, t.fontKey = c + "$" + p + "$" + d + "$" + h, t.styleKey = Date.now();
      }
    }, o.applyParsedProperty = function (e, t) {
      var n = this,
          a = t,
          o = e._private.style,
          s = void 0,
          l = n.types,
          u = n.properties[a.name].type,
          c = a.bypass,
          d = o[a.name],
          h = d && d.bypass,
          p = e._private,
          f = function f() {
        n.checkZOrderTrigger(e, a.name, d ? d.value : null, a.value);
      };if ("curve-style" === t.name && "haystack" === t.value && e.isEdge() && (e.isLoop() || e.source().isParent() || e.target().isParent()) && (a = t = this.parse(t.name, "bezier", c)), a.delete) return o[a.name] = void 0, f(), !0;if (a.deleteBypassed) return d ? !!d.bypass && (d.bypassed = void 0, f(), !0) : (f(), !0);if (a.deleteBypass) return d ? !!d.bypass && (o[a.name] = d.bypassed, f(), !0) : (f(), !0);var v = function v() {
        r.error("Do not assign mappings to elements without corresponding data (e.g. ele `" + e.id() + "` for property `" + a.name + "` with data field `" + a.field + "`); try a `[" + a.field + "]` selector to limit scope to elements with `" + a.field + "` defined");
      };switch (a.mapped) {case l.mapData:
          for (var g = a.field.split("."), y = p.data, m = 0; m < g.length && y; m++) {
            y = y[g[m]];
          }var b = void 0;if (b = i.number(y) ? (y - a.fieldMin) / (a.fieldMax - a.fieldMin) : 0, b < 0 ? b = 0 : b > 1 && (b = 1), u.color) {
            var x = a.valueMin[0],
                w = a.valueMax[0],
                E = a.valueMin[1],
                P = a.valueMax[1],
                C = a.valueMin[2],
                S = a.valueMax[2],
                T = null == a.valueMin[3] ? 1 : a.valueMin[3],
                D = null == a.valueMax[3] ? 1 : a.valueMax[3],
                k = [Math.round(x + (w - x) * b), Math.round(E + (P - E) * b), Math.round(C + (S - C) * b), Math.round(T + (D - T) * b)];s = { bypass: a.bypass, name: a.name, value: k, strValue: "rgb(" + k[0] + ", " + k[1] + ", " + k[2] + ")" };
          } else {
            if (!u.number) return !1;var _ = a.valueMin + (a.valueMax - a.valueMin) * b;s = this.parse(a.name, _, a.bypass, "mapping");
          }s || (s = this.parse(a.name, d.strValue, a.bypass, "mapping")), s || v(), s.mapping = a, a = s;break;case l.data:
          var M = a.field.split("."),
              I = p.data;if (I) for (var N = 0; N < M.length; N++) {
            var B = M[N];I = I[B];
          }if (!(s = this.parse(a.name, I, a.bypass, "mapping"))) {
            var z = d ? d.strValue : "";s = this.parse(a.name, z, a.bypass, "mapping");
          }s || v(), s.mapping = a, a = s;break;case l.fn:
          var L = a.value,
              A = L(e);s = this.parse(a.name, A, a.bypass, "mapping"), s.mapping = a, a = s;break;case void 0:
          break;default:
          return !1;}return c ? (a.bypassed = h ? d.bypassed : d, o[a.name] = a) : h ? d.bypassed = a : o[a.name] = a, f(), !0;
    }, o.cleanElements = function (e, t) {
      for (var n = this, r = n.properties, i = 0; i < e.length; i++) {
        var a = e[i];if (t) for (var o = a._private.style, s = 0; s < r.length; s++) {
          var l = r[s],
              u = o[l.name];u && (u.bypass ? u.bypassed = null : o[l.name] = null);
        } else a._private.style = {};
      }
    }, o.update = function () {
      this._private.cy.mutableElements().updateStyle();
    }, o.updateMappers = function (e) {
      for (var t = this, n = this._private.cy, r = n.collection(), i = 0; i < e.length; i++) {
        for (var a = e[i], o = a._private.style, s = !1, l = 0; l < t.properties.length; l++) {
          var u = t.properties[l],
              c = o[u.name];if (c && c.mapping) {
            var d = c.mapping;this.applyParsedProperty(a, d), s = !0;
          }
        }s && (this.updateStyleHints(a), r.merge(a));
      }return r;
    }, o.updateTransitions = function (e, t, n) {
      var r = this,
          o = e._private,
          s = e.pstyle("transition-property").value,
          l = e.pstyle("transition-duration").pfValue,
          u = e.pstyle("transition-delay").pfValue;if (s.length > 0 && l > 0) {
        for (var c = {}, d = !1, h = 0; h < s.length; h++) {
          var p = s[h],
              f = e.pstyle(p),
              v = t[p];if (v) {
            var g = v.prev,
                y = g,
                m = null != v.next ? v.next : f,
                b = !1,
                x = void 0;y && (i.number(y.pfValue) && i.number(m.pfValue) ? (b = m.pfValue - y.pfValue, x = y.pfValue + 1e-6 * b) : i.number(y.value) && i.number(m.value) ? (b = m.value - y.value, x = y.value + 1e-6 * b) : i.array(y.value) && i.array(m.value) && (b = y.value[0] !== m.value[0] || y.value[1] !== m.value[1] || y.value[2] !== m.value[2], x = y.strValue), b && (c[p] = m.strValue, this.applyBypass(e, p, x), d = !0));
          }
        }if (!d) return;o.transitioning = !0, new a(function (t) {
          u > 0 ? e.delayAnimation(u).play().promise().then(t) : t();
        }).then(function () {
          return e.animation({ style: c, duration: l, easing: e.pstyle("transition-timing-function").value, queue: !1 }).play().promise();
        }).then(function () {
          r.removeBypasses(e, s), e.emitAndNotify("style"), o.transitioning = !1;
        });
      } else o.transitioning && (this.removeBypasses(e, s), e.emitAndNotify("style"), o.transitioning = !1);
    }, o.checkZOrderTrigger = function (e, t, n, r) {
      var i = this.properties[t];null == i.triggersZOrder || null != n && !i.triggersZOrder(n, r) || this._private.cy.notify({ type: "zorder", eles: e });
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = {};a.applyBypass = function (e, t, n, a) {
      var o = this,
          s = [];if ("*" === t || "**" === t) {
        if (void 0 !== n) for (var l = 0; l < o.properties.length; l++) {
          var u = o.properties[l],
              c = u.name,
              d = this.parse(c, n, !0);d && s.push(d);
        }
      } else if (r.string(t)) {
        var h = this.parse(t, n, !0);h && s.push(h);
      } else {
        if (!r.plainObject(t)) return !1;var p = t;a = n;for (var f = Object.keys(p), v = 0; v < f.length; v++) {
          var g = f[v],
              y = (o.properties[g], p[g]);if (void 0 === y && (y = p[i.dash2camel(g)]), void 0 !== y) {
            var m = this.parse(g, y, !0);m && s.push(m);
          }
        }
      }if (0 === s.length) return !1;for (var b = !1, x = 0; x < e.length; x++) {
        for (var w = e[x], E = {}, P = void 0, C = 0; C < s.length; C++) {
          var S = s[C];if (a) {
            var T = w.pstyle(S.name);P = E[S.name] = { prev: T };
          }b = this.applyParsedProperty(w, S) || b, a && (P.next = w.pstyle(S.name));
        }b && this.updateStyleHints(w), a && this.updateTransitions(w, E, !0);
      }return b;
    }, a.overrideBypass = function (e, t, n) {
      t = i.camel2dash(t);for (var r = 0; r < e.length; r++) {
        var a = e[r],
            o = a._private.style[t],
            s = this.properties[t].type,
            l = s.color,
            u = s.mutiple;if (o && o.bypass) {
          var c = null != o.pfValue ? o.pfValue : o.value;o.value = n, null != o.pfValue && (o.pfValue = n), o.strValue = l ? "rgb(" + n.join(",") + ")" : u ? n.join(" ") : "" + n, this.checkZOrderTrigger(a, t, c, n);
        } else this.applyBypass(a, t, n);
      }
    }, a.removeAllBypasses = function (e, t) {
      return this.removeBypasses(e, this.propertyNames, t);
    }, a.removeBypasses = function (e, t, n) {
      for (var r = 0; r < e.length; r++) {
        for (var i = e[r], a = {}, o = 0; o < t.length; o++) {
          var s = t[o],
              l = this.properties[s],
              u = i.pstyle(l.name);if (u && u.bypass) {
            var c = this.parse(s, "", !0),
                d = a[l.name] = { prev: u };this.applyParsedProperty(i, c), d.next = i.pstyle(l.name);
          }
        }this.updateStyleHints(i), n && this.updateTransitions(i, a, !0);
      }
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(3),
        i = {};i.getEmSizeInPixels = function () {
      var e = this.containerCss("font-size");return null != e ? parseFloat(e) : 1;
    }, i.containerCss = function (e) {
      var t = this._private.cy,
          n = t.container();if (r && n && r.getComputedStyle) return r.getComputedStyle(n).getPropertyValue(e);
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = {};a.getRenderedStyle = function (e, t) {
      return t ? this.getStylePropertyValue(e, t, !0) : this.getRawStyle(e, !0);
    }, a.getRawStyle = function (e, t) {
      var n = this;if (e = e[0]) {
        for (var i = {}, a = 0; a < n.properties.length; a++) {
          var o = n.properties[a],
              s = n.getStylePropertyValue(e, o.name, t);null != s && (i[o.name] = s, i[r.dash2camel(o.name)] = s);
        }return i;
      }
    }, a.getIndexedStyle = function (e, t, n, r) {
      var i = e.pstyle(t)[n][r];return null != i ? i : e.cy().style().getDefaultProperty(t)[n][0];
    }, a.getStylePropertyValue = function (e, t, n) {
      var r = this;if (e = e[0]) {
        var i = r.properties[t];i.alias && (i = i.pointsTo);var a = i.type,
            o = e.pstyle(i.name),
            s = e.cy().zoom();if (o) {
          var l = o.units ? a.implicitUnits || "px" : null;return l ? [].concat(o.pfValue).map(function (e) {
            return e * (n ? s : 1) + l;
          }).join(" ") : o.strValue;
        }
      }
    }, a.getAnimationStartStyle = function (e, t) {
      for (var n = {}, r = 0; r < t.length; r++) {
        var a = t[r],
            o = a.name,
            s = e.pstyle(o);void 0 !== s && (s = i.plainObject(s) ? this.parse(o, s.strValue) : this.parse(o, s)), s && (n[o] = s);
      }return n;
    }, a.getPropsList = function (e) {
      var t = this,
          n = [],
          i = e,
          a = t.properties;if (i) for (var o = Object.keys(i), s = 0; s < o.length; s++) {
        var l = o[s],
            u = i[l],
            c = a[l] || a[r.camel2dash(l)],
            d = this.parse(c.name, u);d && n.push(d);
      }return n;
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.appendFromJson = function (e) {
      for (var t = this, n = 0; n < e.length; n++) {
        var r = e[n],
            i = r.selector,
            a = r.style || r.css,
            o = Object.keys(a);t.selector(i);for (var s = 0; s < o.length; s++) {
          var l = o[s],
              u = a[l];t.css(l, u);
        }
      }return t;
    }, r.fromJson = function (e) {
      var t = this;return t.resetToDefault(), t.appendFromJson(e), t;
    }, r.json = function () {
      for (var e = [], t = this.defaultLength; t < this.length; t++) {
        for (var n = this[t], r = n.selector, i = n.properties, a = {}, o = 0; o < i.length; o++) {
          var s = i[o];a[s.name] = s.strValue;
        }e.push({ selector: r ? r.toString() : "core", style: a });
      }return e;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(6),
        a = {};a.appendFromString = function (e) {
      function t() {
        s = s.length > l.length ? s.substr(l.length) : "";
      }function n() {
        u = u.length > c.length ? u.substr(c.length) : "";
      }var a = this,
          o = this,
          s = "" + e,
          l = void 0,
          u = void 0,
          c = void 0;for (s = s.replace(/[\/][*](\s|.)+?[*][\/]/g, "");;) {
        if (s.match(/^\s*$/)) break;var d = s.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);if (!d) {
          r.error("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: " + s);break;
        }l = d[0];var h = d[1];if ("core" !== h) {
          if (new i(h)._private.invalid) {
            r.error("Skipping parsing of block: Invalid selector found in string stylesheet: " + h), t();continue;
          }
        }var p = d[2],
            f = !1;u = p;for (var v = [];;) {
          if (u.match(/^\s*$/)) break;var g = u.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);if (!g) {
            r.error("Skipping parsing of block: Invalid formatting of style property and value definitions found in:" + p), f = !0;break;
          }c = g[0];var y = g[1],
              m = g[2];if (a.properties[y]) {
            o.parse(y, m) ? (v.push({ name: y, val: m }), n()) : (r.error("Skipping property: Invalid property definition in: " + c), n());
          } else r.error("Skipping property: Invalid property name in: " + c), n();
        }if (f) {
          t();break;
        }o.selector(h);for (var b = 0; b < v.length; b++) {
          var x = v[b];o.css(x.name, x.val);
        }t();
      }return o;
    }, a.fromString = function (e) {
      var t = this;return t.resetToDefault(), t.appendFromString(e), t;
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = {};!function () {
      var e = r.regex.number,
          t = r.regex.rgbaNoBackRefs,
          n = r.regex.hslaNoBackRefs,
          o = r.regex.hex3,
          s = r.regex.hex6,
          l = function l(e) {
        return "^" + e + "\\s*\\(\\s*([\\w\\.]+)\\s*\\)$";
      },
          u = function u(r) {
        var i = e + "|\\w+|" + t + "|" + n + "|" + o + "|" + s;return "^" + r + "\\s*\\(([\\w\\.]+)\\s*\\,\\s*(" + e + ")\\s*\\,\\s*(" + e + ")\\s*,\\s*(" + i + ")\\s*\\,\\s*(" + i + ")\\)$";
      },
          c = ["^url\\s*\\(\\s*['\"]?(.+?)['\"]?\\s*\\)$", "^(none)$", "^(.+)$"];a.types = { time: { number: !0, min: 0, units: "s|ms", implicitUnits: "ms" }, percent: { number: !0, min: 0, max: 100, units: "%", implicitUnits: "%" }, zeroOneNumber: { number: !0, min: 0, max: 1, unitless: !0 }, zeroOneNumbers: { number: !0, min: 0, max: 1, unitless: !0, multiple: !0 }, nOneOneNumber: { number: !0, min: -1, max: 1, unitless: !0 }, nonNegativeInt: { number: !0, min: 0, integer: !0, unitless: !0 }, position: { enums: ["parent", "origin"] }, nodeSize: { number: !0, min: 0, enums: ["label"] }, number: { number: !0, unitless: !0 }, numbers: { number: !0, unitless: !0, multiple: !0 }, positiveNumber: { number: !0, unitless: !0, min: 0, strictMin: !0 }, size: { number: !0, min: 0 }, bidirectionalSize: { number: !0 }, bidirectionalSizes: { number: !0, multiple: !0 }, sizeMaybePercent: { number: !0, min: 0, allowPercent: !0 }, paddingRelativeTo: { enums: ["width", "height", "average", "min", "max"] }, bgWH: { number: !0, min: 0, allowPercent: !0, enums: ["auto"], multiple: !0 }, bgPos: { number: !0, allowPercent: !0, multiple: !0 }, bgRelativeTo: { enums: ["inner", "include-padding"], multiple: !0 }, bgRepeat: { enums: ["repeat", "repeat-x", "repeat-y", "no-repeat"], multiple: !0 }, bgFit: { enums: ["none", "contain", "cover"], multiple: !0 }, bgCrossOrigin: { enums: ["anonymous", "use-credentials"], multiple: !0 }, bgClip: { enums: ["none", "node"] }, color: { color: !0 }, bool: { enums: ["yes", "no"] }, lineStyle: { enums: ["solid", "dotted", "dashed"] }, borderStyle: { enums: ["solid", "dotted", "dashed", "double"] }, curveStyle: { enums: ["bezier", "unbundled-bezier", "haystack", "segments"] }, fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' }, fontletiant: { enums: ["small-caps", "normal"] }, fontStyle: { enums: ["italic", "normal", "oblique"] }, fontWeight: { enums: ["normal", "bold", "bolder", "lighter", "100", "200", "300", "400", "500", "600", "800", "900", 100, 200, 300, 400, 500, 600, 700, 800, 900] }, textDecoration: { enums: ["none", "underline", "overline", "line-through"] }, textTransform: { enums: ["none", "uppercase", "lowercase"] }, textWrap: { enums: ["none", "wrap", "ellipsis"] }, textBackgroundShape: { enums: ["rectangle", "roundrectangle"] }, nodeShape: { enums: ["rectangle", "roundrectangle", "cutrectangle", "bottomroundrectangle", "barrel", "ellipse", "triangle", "square", "pentagon", "hexagon", "concavehexagon", "heptagon", "octagon", "tag", "star", "diamond", "vee", "rhomboid", "polygon"] }, compoundIncludeLabels: { enums: ["include", "exclude"] }, arrowShape: { enums: ["tee", "triangle", "triangle-tee", "triangle-cross", "triangle-backcurve", "half-triangle-overshot", "vee", "square", "circle", "diamond", "none"] }, arrowFill: { enums: ["filled", "hollow"] }, display: { enums: ["element", "none"] }, visibility: { enums: ["hidden", "visible"] }, zCompoundDepth: { enums: ["bottom", "orphan", "auto", "top"] }, zIndexCompare: { enums: ["auto", "manual"] }, valign: { enums: ["top", "center", "bottom"] }, halign: { enums: ["left", "center", "right"] }, text: { string: !0 }, data: { mapping: !0, regex: l("data") }, layoutData: { mapping: !0, regex: l("layoutData") }, scratch: { mapping: !0, regex: l("scratch") }, mapData: { mapping: !0, regex: u("mapData") }, mapLayoutData: { mapping: !0, regex: u("mapLayoutData") }, mapScratch: { mapping: !0, regex: u("mapScratch") }, fn: { mapping: !0, fn: !0 }, url: { regexes: c, singleRegexMatchValue: !0 }, urls: { regexes: c, singleRegexMatchValue: !0, multiple: !0 }, propList: { propList: !0 }, angle: { number: !0, units: "deg|rad", implicitUnits: "rad" }, textRotation: { number: !0, units: "deg|rad", implicitUnits: "rad", enums: ["none", "autorotate"] }, polygonPointList: { number: !0, multiple: !0, evenMultiple: !0, min: -1, max: 1, unitless: !0 }, edgeDistances: { enums: ["intersection", "node-position"] }, edgeEndpoint: { number: !0, multiple: !0, units: "%|px|em|deg|rad", implicitUnits: "px", enums: ["inside-to-node", "outside-to-node", "outside-to-line"], singleEnum: !0, validate: function validate(e, t) {
            switch (e.length) {case 2:
                return "deg" !== t[0] && "rad" !== t[0] && "deg" !== t[1] && "rad" !== t[1];case 1:
                return i.string(e[0]) || "deg" === t[0] || "rad" === t[0];default:
                return !1;}
          } }, easing: { regexes: ["^(spring)\\s*\\(\\s*(" + e + ")\\s*,\\s*(" + e + ")\\s*\\)$", "^(cubic-bezier)\\s*\\(\\s*(" + e + ")\\s*,\\s*(" + e + ")\\s*,\\s*(" + e + ")\\s*,\\s*(" + e + ")\\s*\\)$"], enums: ["linear", "ease", "ease-in", "ease-out", "ease-in-out", "ease-in-sine", "ease-out-sine", "ease-in-out-sine", "ease-in-quad", "ease-out-quad", "ease-in-out-quad", "ease-in-cubic", "ease-out-cubic", "ease-in-out-cubic", "ease-in-quart", "ease-out-quart", "ease-in-out-quart", "ease-in-quint", "ease-out-quint", "ease-in-out-quint", "ease-in-expo", "ease-out-expo", "ease-in-out-expo", "ease-in-circ", "ease-out-circ", "ease-in-out-circ"] } };var d = { zeroNonZero: function zeroNonZero(e, t) {
          return 0 === e && 0 !== t || 0 !== e && 0 === t;
        }, anyDiff: function anyDiff(e, t) {
          return e !== t;
        } },
          h = d,
          p = a.types,
          f = a.properties = [{ name: "label", type: p.text }, { name: "text-rotation", type: p.textRotation }, { name: "text-margin-x", type: p.bidirectionalSize }, { name: "text-margin-y", type: p.bidirectionalSize }, { name: "source-label", type: p.text }, { name: "source-text-rotation", type: p.textRotation }, { name: "source-text-margin-x", type: p.bidirectionalSize }, { name: "source-text-margin-y", type: p.bidirectionalSize }, { name: "source-text-offset", type: p.size }, { name: "target-label", type: p.text }, { name: "target-text-rotation", type: p.textRotation }, { name: "target-text-margin-x", type: p.bidirectionalSize }, { name: "target-text-margin-y", type: p.bidirectionalSize }, { name: "target-text-offset", type: p.size }, { name: "text-valign", type: p.valign }, { name: "text-halign", type: p.halign }, { name: "color", type: p.color }, { name: "text-outline-color", type: p.color }, { name: "text-outline-width", type: p.size }, { name: "text-outline-opacity", type: p.zeroOneNumber }, { name: "text-opacity", type: p.zeroOneNumber }, { name: "text-background-color", type: p.color }, { name: "text-background-opacity", type: p.zeroOneNumber }, { name: "text-background-padding", type: p.size }, { name: "text-border-opacity", type: p.zeroOneNumber }, { name: "text-border-color", type: p.color }, { name: "text-border-width", type: p.size }, { name: "text-border-style", type: p.borderStyle }, { name: "text-background-shape", type: p.textBackgroundShape }, { name: "text-transform", type: p.textTransform }, { name: "text-wrap", type: p.textWrap }, { name: "text-max-width", type: p.size }, { name: "text-events", type: p.bool }, { name: "font-family", type: p.fontFamily }, { name: "font-style", type: p.fontStyle }, { name: "font-weight", type: p.fontWeight }, { name: "font-size", type: p.size }, { name: "min-zoomed-font-size", type: p.size }, { name: "events", type: p.bool }, { name: "display", type: p.display, triggersZOrder: h.anyDiff }, { name: "visibility", type: p.visibility, triggersZOrder: h.anyDiff }, { name: "opacity", type: p.zeroOneNumber, triggersZOrder: h.zeroNonZero }, { name: "z-compound-depth", type: p.zCompoundDepth, triggersZOrder: h.anyDiff }, { name: "z-index-compare", type: p.zIndexCompare, triggersZOrder: h.anyDiff }, { name: "z-index", type: p.nonNegativeInt, triggersZOrder: h.anyDiff }, { name: "overlay-padding", type: p.size }, { name: "overlay-color", type: p.color }, { name: "overlay-opacity", type: p.zeroOneNumber }, { name: "transition-property", type: p.propList }, { name: "transition-duration", type: p.time }, { name: "transition-delay", type: p.time }, { name: "transition-timing-function", type: p.easing }, { name: "height", type: p.nodeSize }, { name: "width", type: p.nodeSize }, { name: "shape", type: p.nodeShape }, { name: "shape-polygon-points", type: p.polygonPointList }, { name: "background-color", type: p.color }, { name: "background-opacity", type: p.zeroOneNumber }, { name: "background-blacken", type: p.nOneOneNumber }, { name: "padding", type: p.sizeMaybePercent }, { name: "padding-relative-to", type: p.paddingRelativeTo }, { name: "border-color", type: p.color }, { name: "border-opacity", type: p.zeroOneNumber }, { name: "border-width", type: p.size }, { name: "border-style", type: p.borderStyle }, { name: "background-image", type: p.urls }, { name: "background-image-crossorigin", type: p.bgCrossOrigin }, { name: "background-image-opacity", type: p.zeroOneNumbers }, { name: "background-position-x", type: p.bgPos }, { name: "background-position-y", type: p.bgPos }, { name: "background-width-relative-to", type: p.bgRelativeTo }, { name: "background-height-relative-to", type: p.bgRelativeTo }, { name: "background-repeat", type: p.bgRepeat }, { name: "background-fit", type: p.bgFit }, { name: "background-clip", type: p.bgClip }, { name: "background-width", type: p.bgWH }, { name: "background-height", type: p.bgWH }, { name: "position", type: p.position }, { name: "compound-sizing-wrt-labels", type: p.compoundIncludeLabels }, { name: "min-width", type: p.size }, { name: "min-width-bias-left", type: p.sizeMaybePercent }, { name: "min-width-bias-right", type: p.sizeMaybePercent }, { name: "min-height", type: p.size }, { name: "min-height-bias-top", type: p.sizeMaybePercent }, { name: "min-height-bias-bottom", type: p.sizeMaybePercent }, { name: "line-style", type: p.lineStyle }, { name: "line-color", type: p.color }, { name: "curve-style", type: p.curveStyle }, { name: "haystack-radius", type: p.zeroOneNumber }, { name: "source-endpoint", type: p.edgeEndpoint }, { name: "target-endpoint", type: p.edgeEndpoint }, { name: "control-point-step-size", type: p.size }, { name: "control-point-distances", type: p.bidirectionalSizes }, { name: "control-point-weights", type: p.numbers }, { name: "segment-distances", type: p.bidirectionalSizes }, { name: "segment-weights", type: p.numbers }, { name: "edge-distances", type: p.edgeDistances }, { name: "arrow-scale", type: p.positiveNumber }, { name: "loop-direction", type: p.angle }, { name: "loop-sweep", type: p.angle }, { name: "source-distance-from-node", type: p.size }, { name: "target-distance-from-node", type: p.size }, { name: "ghost", type: p.bool }, { name: "ghost-offset-x", type: p.bidirectionalSize }, { name: "ghost-offset-y", type: p.bidirectionalSize }, { name: "ghost-opacity", type: p.zeroOneNumber }, { name: "selection-box-color", type: p.color }, { name: "selection-box-opacity", type: p.zeroOneNumber }, { name: "selection-box-border-color", type: p.color }, { name: "selection-box-border-width", type: p.size }, { name: "active-bg-color", type: p.color }, { name: "active-bg-opacity", type: p.zeroOneNumber }, { name: "active-bg-size", type: p.size }, { name: "outside-texture-bg-color", type: p.color }, { name: "outside-texture-bg-opacity", type: p.zeroOneNumber }],
          v = a.aliases = [{ name: "content", pointsTo: "label" }, { name: "control-point-distance", pointsTo: "control-point-distances" }, { name: "control-point-weight", pointsTo: "control-point-weights" }, { name: "edge-text-rotation", pointsTo: "text-rotation" }, { name: "padding-left", pointsTo: "padding" }, { name: "padding-right", pointsTo: "padding" }, { name: "padding-top", pointsTo: "padding" }, { name: "padding-bottom", pointsTo: "padding" }];a.pieBackgroundN = 16, f.push({ name: "pie-size", type: p.sizeMaybePercent });for (var g = 1; g <= a.pieBackgroundN; g++) {
        f.push({ name: "pie-" + g + "-background-color", type: p.color }), f.push({ name: "pie-" + g + "-background-size", type: p.percent }), f.push({ name: "pie-" + g + "-background-opacity", type: p.zeroOneNumber });
      }var y = a.arrowPrefixes = ["source", "mid-source", "target", "mid-target"];[{ name: "arrow-shape", type: p.arrowShape }, { name: "arrow-color", type: p.color }, { name: "arrow-fill", type: p.arrowFill }].forEach(function (e) {
        y.forEach(function (t) {
          var n = t + "-" + e.name,
              r = e.type;f.push({ name: n, type: r });
        });
      }, {}), a.propertyNames = f.map(function (e) {
        return e.name;
      });for (var m = 0; m < f.length; m++) {
        var b = f[m];f[b.name] = b;
      }for (var x = 0; x < v.length; x++) {
        var w = v[x],
            E = f[w.pointsTo],
            P = { name: w.name, alias: !0, pointsTo: E };f.push(P), f[w.name] = P;
      }
    }(), a.getDefaultProperty = function (e) {
      return this.getDefaultProperties()[e];
    }, a.getDefaultProperties = r.memoize(function () {
      for (var e = r.extend({ events: "yes", "text-events": "no", "text-valign": "top", "text-halign": "center", color: "#000", "text-outline-color": "#000", "text-outline-width": 0, "text-outline-opacity": 1, "text-opacity": 1, "text-decoration": "none", "text-transform": "none", "text-wrap": "none", "text-max-width": 9999, "text-background-color": "#000", "text-background-opacity": 0, "text-background-shape": "rectangle", "text-background-padding": 0, "text-border-opacity": 0, "text-border-width": 0, "text-border-style": "solid", "text-border-color": "#000", "font-family": "Helvetica Neue, Helvetica, sans-serif", "font-style": "normal", "font-weight": "normal", "font-size": 16, "min-zoomed-font-size": 0, "text-rotation": "none", "source-text-rotation": "none", "target-text-rotation": "none", visibility: "visible", display: "element", opacity: 1, "z-compound-depth": "auto", "z-index-compare": "auto", "z-index": 0, label: "", "text-margin-x": 0, "text-margin-y": 0, "source-label": "", "source-text-offset": 0, "source-text-margin-x": 0, "source-text-margin-y": 0, "target-label": "", "target-text-offset": 0, "target-text-margin-x": 0, "target-text-margin-y": 0, "overlay-opacity": 0, "overlay-color": "#000", "overlay-padding": 10, "transition-property": "none", "transition-duration": 0, "transition-delay": 0, "transition-timing-function": "linear", "background-blacken": 0, "background-color": "#999", "background-opacity": 1, "background-image": "none", "background-image-crossorigin": "anonymous", "background-image-opacity": 1, "background-position-x": "50%", "background-position-y": "50%", "background-width-relative-to": "include-padding", "background-height-relative-to": "include-padding", "background-repeat": "no-repeat", "background-fit": "none", "background-clip": "node", "background-width": "auto", "background-height": "auto", "border-color": "#000", "border-opacity": 1, "border-width": 0, "border-style": "solid", height: 30, width: 30, shape: "ellipse", "shape-polygon-points": "-1, -1,   1, -1,   1, 1,   -1, 1", ghost: "no", "ghost-offset-y": 0, "ghost-offset-x": 0, "ghost-opacity": 0, padding: 0, "padding-relative-to": "width", position: "origin", "compound-sizing-wrt-labels": "include", "min-width": 0, "min-width-bias-left": 0, "min-width-bias-right": 0, "min-height": 0, "min-height-bias-top": 0, "min-height-bias-bottom": 0 }, { "pie-size": "100%" }, [{ name: "pie-{{i}}-background-color", value: "black" }, { name: "pie-{{i}}-background-size", value: "0%" }, { name: "pie-{{i}}-background-opacity", value: 1 }].reduce(function (e, t) {
        for (var n = 1; n <= a.pieBackgroundN; n++) {
          var r = t.name.replace("{{i}}", n),
              i = t.value;e[r] = i;
        }return e;
      }, {}), { "line-style": "solid", "line-color": "#999", "control-point-step-size": 40, "control-point-weights": .5, "segment-weights": .5, "segment-distances": 20, "edge-distances": "intersection", "curve-style": "bezier", "haystack-radius": 0, "arrow-scale": 1, "loop-direction": "-45deg", "loop-sweep": "-90deg", "source-distance-from-node": 0, "target-distance-from-node": 0, "source-endpoint": "outside-to-node", "target-endpoint": "outside-to-node" }, [{ name: "arrow-shape", value: "none" }, { name: "arrow-color", value: "#999" }, { name: "arrow-fill", value: "filled" }].reduce(function (e, t) {
        return a.arrowPrefixes.forEach(function (n) {
          var r = n + "-" + t.name,
              i = t.value;e[r] = i;
        }), e;
      }, {})), t = {}, n = 0; n < this.properties.length; n++) {
        var i = this.properties[n];if (!i.pointsTo) {
          var o = i.name,
              s = e[o],
              l = this.parse(o, s);t[o] = l;
        }
      }return t;
    }), a.addDefaultStylesheet = function () {
      this.selector("$node > node").css({ shape: "rectangle", padding: 10, "background-color": "#eee", "border-color": "#ccc", "border-width": 1 }).selector("edge").css({ width: 3, "curve-style": "haystack" }).selector(":parent <-> node").css({ "curve-style": "bezier", "source-endpoint": "outside-to-line", "target-endpoint": "outside-to-line" }).selector(":selected").css({ "background-color": "#0169D9", "line-color": "#0169D9", "source-arrow-color": "#0169D9", "target-arrow-color": "#0169D9", "mid-source-arrow-color": "#0169D9", "mid-target-arrow-color": "#0169D9" }).selector("node:parent:selected").css({ "background-color": "#CCE1F9", "border-color": "#aec8e5" }).selector(":active").css({ "overlay-color": "black", "overlay-padding": 10, "overlay-opacity": .25 }).selector("core").css({ "selection-box-color": "#ddd", "selection-box-opacity": .65, "selection-box-border-color": "#aaa", "selection-box-border-width": 1, "active-bg-color": "black", "active-bg-opacity": .15, "active-bg-size": 30, "outside-texture-bg-color": "#000", "outside-texture-bg-opacity": .125 }), this.defaultLength = this.length;
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = n(0),
        a = n(2),
        o = {};o.parse = function (e, t, n, a) {
      var o = this;if (i.fn(t)) return o.parseImplWarn(e, t, n, a);var s = "mapping" === a || !0 === a || !1 === a || null == a ? "dontcare" : a,
          l = [e, t, n, s].join("$"),
          u = o.propCache = o.propCache || {},
          c = void 0;return (c = u[l]) || (c = u[l] = o.parseImplWarn(e, t, n, a)), (n || "mapping" === a) && (c = r.copy(c)) && (c.value = r.copy(c.value)), c;
    }, o.parseImplWarn = function (e, t, n, i) {
      var a = this.parseImpl(e, t, n, i);return a || null == t || r.error("The style property `%s: %s` is invalid", e, t), a;
    }, o.parseImpl = function (e, t, n, o) {
      var s = this;e = r.camel2dash(e);var l = s.properties[e],
          u = t,
          c = s.types;if (!l) return null;if (void 0 === t) return null;l.alias && (l = l.pointsTo, e = l.name);var d = i.string(t);d && (t = t.trim());var h = l.type;if (!h) return null;if (n && ("" === t || null === t)) return { name: e, value: t, bypass: !0, deleteBypass: !0 };if (i.fn(t)) return { name: e, value: t, strValue: "fn", mapped: c.fn, bypass: n };var p = void 0,
          f = void 0;if (!d || o) ;else {
        if (p = new RegExp(c.data.regex).exec(t)) {
          if (n) return !1;var v = c.data;return { name: e, value: p, strValue: "" + t, mapped: v, field: p[1], bypass: n };
        }if (f = new RegExp(c.mapData.regex).exec(t)) {
          if (n) return !1;if (h.multiple) return !1;var g = c.mapData;if (!h.color && !h.number) return !1;var y = this.parse(e, f[4]);if (!y || y.mapped) return !1;var m = this.parse(e, f[5]);if (!m || m.mapped) return !1;if (y.value === m.value) return !1;if (h.color) {
            var b = y.value,
                x = m.value;if (!(b[0] !== x[0] || b[1] !== x[1] || b[2] !== x[2] || b[3] !== x[3] && (null != b[3] && 1 !== b[3] || null != x[3] && 1 !== x[3]))) return !1;
          }return { name: e, value: f, strValue: "" + t, mapped: g, field: f[1], fieldMin: parseFloat(f[2]), fieldMax: parseFloat(f[3]), valueMin: y.value, valueMax: m.value, bypass: n };
        }
      }if (h.multiple && "multiple" !== o) {
        var w = void 0;if (w = d ? t.split(/\s+/) : i.array(t) ? t : [t], h.evenMultiple && w.length % 2 != 0) return null;for (var E = [], P = [], C = [], S = !1, T = 0; T < w.length; T++) {
          var D = s.parse(e, w[T], n, "multiple");S = S || i.string(D.value), E.push(D.value), C.push(null != D.pfValue ? D.pfValue : D.value), P.push(D.units);
        }return h.validate && !h.validate(E, P) ? null : h.singleEnum && S ? 1 === E.length && i.string(E[0]) ? { name: e, value: E[0], strValue: E[0], bypass: n } : null : { name: e, value: E, pfValue: C, strValue: E.map(function (e, t) {
            return e + (P[t] || "");
          }).join(" "), bypass: n, units: P };
      }var k = function k() {
        for (var r = 0; r < h.enums.length; r++) {
          if (h.enums[r] === t) return { name: e, value: t, strValue: "" + t, bypass: n };
        }return null;
      };if (h.number) {
        var _ = void 0,
            M = "px";if (h.units && (_ = h.units), h.implicitUnits && (M = h.implicitUnits), !h.unitless) if (d) {
          var I = "px|em" + (h.allowPercent ? "|\\%" : "");_ && (I = _);var N = t.match("^(" + r.regex.number + ")(" + I + ")?$");N && (t = N[1], _ = N[2] || M);
        } else _ && !h.implicitUnits || (_ = M);if (t = parseFloat(t), isNaN(t) && void 0 === h.enums) return null;if (isNaN(t) && void 0 !== h.enums) return t = u, k();if (h.integer && !i.integer(t)) return null;if (void 0 !== h.min && (t < h.min || h.strictMin && t === h.min) || void 0 !== h.max && (t > h.max || h.strictMax && t === h.max)) return null;var B = { name: e, value: t, strValue: "" + t + (_ || ""), units: _, bypass: n };return h.unitless || "px" !== _ && "em" !== _ ? B.pfValue = t : B.pfValue = "px" !== _ && _ ? this.getEmSizeInPixels() * t : t, "ms" !== _ && "s" !== _ || (B.pfValue = "ms" === _ ? t : 1e3 * t), "deg" !== _ && "rad" !== _ || (B.pfValue = "rad" === _ ? t : a.deg2rad(t)), "%" === _ && (B.pfValue = t / 100), B;
      }if (h.propList) {
        var z = [],
            L = "" + t;if ("none" === L) ;else {
          for (var A = L.split(","), O = 0; O < A.length; O++) {
            var R = A[O].trim();s.properties[R] && z.push(R);
          }if (0 === z.length) return null;
        }return { name: e, value: z, strValue: 0 === z.length ? "none" : z.join(", "), bypass: n };
      }if (h.color) {
        var V = r.color2tuple(t);return V ? { name: e, value: V, pfValue: V, strValue: "" + t, bypass: n } : null;
      }if (h.regex || h.regexes) {
        if (h.enums) {
          var q = k();if (q) return q;
        }for (var F = h.regexes ? h.regexes : [h.regex], j = 0; j < F.length; j++) {
          var X = new RegExp(F[j]),
              Y = X.exec(t);if (Y) return { name: e, value: h.singleRegexMatchValue ? Y[1] : Y, strValue: "" + t, bypass: n };
        }return null;
      }return h.string ? { name: e, value: "" + t, strValue: "" + t, bypass: n } : h.enums ? k() : null;
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(3),
        a = n(2),
        o = { autolock: function autolock(e) {
        return void 0 === e ? this._private.autolock : (this._private.autolock = !!e, this);
      }, autoungrabify: function autoungrabify(e) {
        return void 0 === e ? this._private.autoungrabify : (this._private.autoungrabify = !!e, this);
      }, autounselectify: function autounselectify(e) {
        return void 0 === e ? this._private.autounselectify : (this._private.autounselectify = !!e, this);
      }, panningEnabled: function panningEnabled(e) {
        return void 0 === e ? this._private.panningEnabled : (this._private.panningEnabled = !!e, this);
      }, userPanningEnabled: function userPanningEnabled(e) {
        return void 0 === e ? this._private.userPanningEnabled : (this._private.userPanningEnabled = !!e, this);
      }, zoomingEnabled: function zoomingEnabled(e) {
        return void 0 === e ? this._private.zoomingEnabled : (this._private.zoomingEnabled = !!e, this);
      }, userZoomingEnabled: function userZoomingEnabled(e) {
        return void 0 === e ? this._private.userZoomingEnabled : (this._private.userZoomingEnabled = !!e, this);
      }, boxSelectionEnabled: function boxSelectionEnabled(e) {
        return void 0 === e ? this._private.boxSelectionEnabled : (this._private.boxSelectionEnabled = !!e, this);
      }, pan: function pan() {
        var e = arguments,
            t = this._private.pan,
            n = void 0,
            i = void 0,
            a = void 0,
            o = void 0,
            s = void 0;switch (e.length) {case 0:
            return t;case 1:
            if (r.string(e[0])) return n = e[0], t[n];if (r.plainObject(e[0])) {
              if (!this._private.panningEnabled) return this;a = e[0], o = a.x, s = a.y, r.number(o) && (t.x = o), r.number(s) && (t.y = s), this.emit("pan viewport");
            }break;case 2:
            if (!this._private.panningEnabled) return this;n = e[0], i = e[1], "x" !== n && "y" !== n || !r.number(i) || (t[n] = i), this.emit("pan viewport");}return this.notify({ type: "viewport" }), this;
      }, panBy: function panBy(e, t) {
        var n = arguments,
            i = this._private.pan,
            a = void 0,
            o = void 0,
            s = void 0,
            l = void 0,
            u = void 0;if (!this._private.panningEnabled) return this;switch (n.length) {case 1:
            r.plainObject(e) && (s = n[0], l = s.x, u = s.y, r.number(l) && (i.x += l), r.number(u) && (i.y += u), this.emit("pan viewport"));break;case 2:
            a = e, o = t, "x" !== a && "y" !== a || !r.number(o) || (i[a] += o), this.emit("pan viewport");}return this.notify({ type: "viewport" }), this;
      }, fit: function fit(e, t) {
        var n = this.getFitViewport(e, t);if (n) {
          var r = this._private;r.zoom = n.zoom, r.pan = n.pan, this.emit("pan zoom viewport"), this.notify({ type: "viewport" });
        }return this;
      }, getFitViewport: function getFitViewport(e, t) {
        if (r.number(e) && void 0 === t && (t = e, e = void 0), this._private.panningEnabled && this._private.zoomingEnabled) {
          var n = void 0;if (r.string(e)) {
            var i = e;e = this.$(i);
          } else if (r.boundingBox(e)) {
            var a = e;n = { x1: a.x1, y1: a.y1, x2: a.x2, y2: a.y2 }, n.w = n.x2 - n.x1, n.h = n.y2 - n.y1;
          } else r.elementOrCollection(e) || (e = this.mutableElements());if (!r.elementOrCollection(e) || !e.empty()) {
            n = n || e.boundingBox();var o = this.width(),
                s = this.height(),
                l = void 0;if (t = r.number(t) ? t : 0, !isNaN(o) && !isNaN(s) && o > 0 && s > 0 && !isNaN(n.w) && !isNaN(n.h) && n.w > 0 && n.h > 0) {
              l = Math.min((o - 2 * t) / n.w, (s - 2 * t) / n.h), l = l > this._private.maxZoom ? this._private.maxZoom : l, l = l < this._private.minZoom ? this._private.minZoom : l;return { zoom: l, pan: { x: (o - l * (n.x1 + n.x2)) / 2, y: (s - l * (n.y1 + n.y2)) / 2 } };
            }
          }
        }
      }, minZoom: function minZoom(e) {
        return void 0 === e ? this._private.minZoom : (r.number(e) && (this._private.minZoom = e), this);
      }, maxZoom: function maxZoom(e) {
        return void 0 === e ? this._private.maxZoom : (r.number(e) && (this._private.maxZoom = e), this);
      }, getZoomedViewport: function getZoomedViewport(e) {
        var t = this._private,
            n = t.pan,
            i = t.zoom,
            o = void 0,
            s = void 0,
            l = !1;if (t.zoomingEnabled || (l = !0), r.number(e) ? s = e : r.plainObject(e) && (s = e.level, null != e.position ? o = a.modelToRenderedPosition(e.position, i, n) : null != e.renderedPosition && (o = e.renderedPosition), null == o || t.panningEnabled || (l = !0)), s = s > t.maxZoom ? t.maxZoom : s, s = s < t.minZoom ? t.minZoom : s, l || !r.number(s) || s === i || null != o && (!r.number(o.x) || !r.number(o.y))) return null;if (null != o) {
          var u = n,
              c = i,
              d = s;return { zoomed: !0, panned: !0, zoom: d, pan: { x: -d / c * (o.x - u.x) + o.x, y: -d / c * (o.y - u.y) + o.y } };
        }return { zoomed: !0, panned: !1, zoom: s, pan: n };
      }, zoom: function zoom(e) {
        if (void 0 === e) return this._private.zoom;var t = this.getZoomedViewport(e),
            n = this._private;return null != t && t.zoomed ? (n.zoom = t.zoom, t.panned && (n.pan.x = t.pan.x, n.pan.y = t.pan.y), this.emit("zoom" + (t.panned ? " pan" : "") + " viewport"), this.notify({ type: "viewport" }), this) : this;
      }, viewport: function viewport(e) {
        var t = this._private,
            n = !0,
            i = !0,
            a = [],
            o = !1,
            s = !1;if (!e) return this;if (r.number(e.zoom) || (n = !1), r.plainObject(e.pan) || (i = !1), !n && !i) return this;if (n) {
          var l = e.zoom;l < t.minZoom || l > t.maxZoom || !t.zoomingEnabled ? o = !0 : (t.zoom = l, a.push("zoom"));
        }if (i && (!o || !e.cancelOnFailedZoom) && t.panningEnabled) {
          var u = e.pan;r.number(u.x) && (t.pan.x = u.x, s = !1), r.number(u.y) && (t.pan.y = u.y, s = !1), s || a.push("pan");
        }return a.length > 0 && (a.push("viewport"), this.emit(a.join(" ")), this.notify({ type: "viewport" })), this;
      }, center: function center(e) {
        var t = this.getCenterPan(e);return t && (this._private.pan = t, this.emit("pan viewport"), this.notify({ type: "viewport" })), this;
      }, getCenterPan: function getCenterPan(e, t) {
        if (this._private.panningEnabled) {
          if (r.string(e)) {
            var n = e;e = this.mutableElements().filter(n);
          } else r.elementOrCollection(e) || (e = this.mutableElements());if (0 !== e.length) {
            var i = e.boundingBox(),
                a = this.width(),
                o = this.height();t = void 0 === t ? this._private.zoom : t;return { x: (a - t * (i.x1 + i.x2)) / 2, y: (o - t * (i.y1 + i.y2)) / 2 };
          }
        }
      }, reset: function reset() {
        return this._private.panningEnabled && this._private.zoomingEnabled ? (this.viewport({ pan: { x: 0, y: 0 }, zoom: 1 }), this) : this;
      }, invalidateSize: function invalidateSize() {
        this._private.sizeCache = null;
      }, size: function size() {
        var e = this._private,
            t = e.container;return e.sizeCache = e.sizeCache || (t ? function () {
          var e = i.getComputedStyle(t),
              n = function n(t) {
            return parseFloat(e.getPropertyValue(t));
          };return { width: t.clientWidth - n("padding-left") - n("padding-right"), height: t.clientHeight - n("padding-top") - n("padding-bottom") };
        }() : { width: 1, height: 1 });
      }, width: function width() {
        return this.size().width;
      }, height: function height() {
        return this.size().height;
      }, extent: function extent() {
        var e = this._private.pan,
            t = this._private.zoom,
            n = this.renderedExtent(),
            r = { x1: (n.x1 - e.x) / t, x2: (n.x2 - e.x) / t, y1: (n.y1 - e.y) / t, y2: (n.y2 - e.y) / t };return r.w = r.x2 - r.x1, r.h = r.y2 - r.y1, r;
      }, renderedExtent: function renderedExtent() {
        var e = this.width(),
            t = this.height();return { x1: 0, y1: 0, x2: e, y2: t, w: e, h: t };
      } };o.centre = o.center, o.autolockNodes = o.autolock, o.autoungrabifyNodes = o.autoungrabify, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n) {
      var r = n,
          a = function a(n) {
        s.error("Can not register `" + t + "` for `" + e + "` since `" + n + "` already exists in the prototype and can not be overridden");
      };if ("core" === e) {
        if (c.prototype[t]) return a(t);c.prototype[t] = n;
      } else if ("collection" === e) {
        if (u.prototype[t]) return a(t);u.prototype[t] = n;
      } else if ("layout" === e) {
        for (var o = function o(e) {
          this.options = e, n.call(this, e), h.plainObject(this._private) || (this._private = {}), this._private.cy = e.cy, this._private.listeners = [], this.createEmitter();
        }, d = o.prototype = Object.create(n.prototype), v = [], g = 0; g < v.length; g++) {
          var y = v[g];d[y] = d[y] || function () {
            return this;
          };
        }d.start && !d.run ? d.run = function () {
          return this.start(), this;
        } : !d.start && d.run && (d.start = function () {
          return this.run(), this;
        });var m = n.prototype.stop;d.stop = function () {
          var e = this.options;if (e && e.animate) {
            var t = this.animations;if (t) for (var n = 0; n < t.length; n++) {
              t[n].stop();
            }
          }return m ? m.call(this) : this.emit("layoutstop"), this;
        }, d.destroy || (d.destroy = function () {
          return this;
        }), d.cy = function () {
          return this._private.cy;
        };var b = function b(e) {
          return e._private.cy;
        };s.assign(d, { createEmitter: function createEmitter() {
            return this._private.emitter = new p({ eventFields: function eventFields(e) {
                return { layout: e, cy: b(e), target: e };
              }, bubble: function bubble() {
                return !0;
              }, parent: function parent(e) {
                return b(e);
              }, context: this }), this;
          }, emitter: function emitter() {
            return this._private.emitter;
          }, on: function on(e, t) {
            return this.emitter().on(e, t), this;
          }, one: function one(e, t) {
            return this.emitter().one(e, t), this;
          }, once: function once(e, t) {
            return this.emitter().one(e, t), this;
          }, removeListener: function removeListener(e, t) {
            return this.emitter().removeListener(e, t), this;
          }, emit: function emit(e, t) {
            return this.emitter().emit(e, t), this;
          } }), l.eventAliasesOn(d), r = o;
      } else if ("renderer" === e && "null" !== t && "base" !== t) {
        var x = i("renderer", "base"),
            w = x.prototype,
            E = n,
            P = n.prototype,
            C = function C() {
          x.apply(this, arguments), E.apply(this, arguments);
        },
            S = C.prototype;for (var T in w) {
          var D = w[T],
              k = null != P[T];if (k) return a(T);S[T] = D;
        }for (var _ in P) {
          S[_] = P[_];
        }w.clientFunctions.forEach(function (e) {
          S[e] = S[e] || function () {
            s.error("Renderer does not implement `renderer." + e + "()` on its prototype");
          };
        }), r = C;
      }return s.setMap({ map: f, keys: [e, t], value: r });
    }function i(e, t) {
      return s.getMap({ map: f, keys: [e, t] });
    }function a(e, t, n, r, i) {
      return s.setMap({ map: v, keys: [e, t, n, r], value: i });
    }function o(e, t, n, r) {
      return s.getMap({ map: v, keys: [e, t, n, r] });
    }var s = n(1),
        l = n(4),
        u = n(7),
        c = n(12),
        d = n(96),
        h = n(0),
        p = n(11),
        f = {},
        v = {},
        g = function g() {
      return 2 === arguments.length ? i.apply(null, arguments) : 3 === arguments.length ? r.apply(null, arguments) : 4 === arguments.length ? o.apply(null, arguments) : 5 === arguments.length ? a.apply(null, arguments) : void s.error("Invalid extension access syntax");
    };c.prototype.extension = g, d.forEach(function (e) {
      e.extensions.forEach(function (t) {
        r(e.type, t.name, t.impl);
      });
    }), e.exports = g;
  }, function (e, t, n) {
    "use strict";
    e.exports = [{ type: "layout", extensions: n(97) }, { type: "renderer", extensions: n(107) }];
  }, function (e, t, n) {
    "use strict";
    e.exports = [{ name: "breadthfirst", impl: n(98) }, { name: "circle", impl: n(99) }, { name: "concentric", impl: n(100) }, { name: "cose", impl: n(101) }, { name: "grid", impl: n(102) }, { name: "null", impl: n(103) }, { name: "preset", impl: n(104) }, { name: "random", impl: n(105) }, { name: "tree", impl: n(106) }];
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, s, e);
    }var i = n(1),
        a = n(2),
        o = n(0),
        s = { fit: !0, directed: !1, padding: 30, circle: !1, spacingFactor: 1.75, boundingBox: void 0, avoidOverlap: !0, nodeDimensionsIncludeLabels: !1, roots: void 0, maximalAdjustments: 0, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      var e = this.options,
          t = e,
          n = e.cy,
          r = t.eles,
          i = r.nodes().not(":parent"),
          s = r,
          l = a.makeBoundingBox(t.boundingBox ? t.boundingBox : { x1: 0, y1: 0, w: n.width(), h: n.height() }),
          u = void 0;if (o.elementOrCollection(t.roots)) u = t.roots;else if (o.array(t.roots)) {
        for (var c = [], d = 0; d < t.roots.length; d++) {
          var h = t.roots[d],
              p = n.getElementById(h);c.push(p);
        }u = n.collection(c);
      } else if (o.string(t.roots)) u = n.$(t.roots);else if (t.directed) u = i.roots();else {
        for (var f = [], v = i; v.length > 0;) {
          !function () {
            var e = n.collection();r.bfs({ roots: v[0], visit: function visit(t, n, r, i, a) {
                e = e.add(t);
              }, directed: !1 }), v = v.not(e), f.push(e);
          }();
        }u = n.collection();for (var g = 0; g < f.length; g++) {
          !function (e) {
            var t = f[e],
                n = t.maxDegree(!1),
                r = t.filter(function (e) {
              return e.degree(!1) === n;
            });u = u.add(r);
          }(g);
        }
      }var y = [],
          m = {},
          b = {},
          x = {},
          w = {},
          E = {};s.bfs({ roots: u, directed: t.directed, visit: function visit(e, t, n, r, i) {
          var a = e[0],
              o = a.id();if (y[i] || (y[i] = []), y[i].push(a), m[o] = !0, b[o] = i, x[o] = n, w[o] = t, n) {
            var s = n.id();(E[s] = E[s] || []).push(e);
          }
        } });for (var P = [], C = 0; C < i.length; C++) {
        var S = i[C];m[S.id()] || P.push(S);
      }for (var T = 3 * P.length, D = 0; 0 !== P.length && D < T;) {
        for (var k = P.shift(), _ = k.neighborhood().nodes(), M = !1, I = 0; I < _.length; I++) {
          var N = b[_[I].id()];if (void 0 !== N) {
            y[N].push(k), M = !0;break;
          }
        }M || P.push(k), D++;
      }for (; 0 !== P.length;) {
        var B = P.shift();0 === y.length && y.push([]), y[0].push(B);
      }var z = function z() {
        for (var e = 0; e < y.length; e++) {
          for (var t = y[e], n = 0; n < t.length; n++) {
            var r = t[n];null != r ? r._private.scratch.breadthfirst = { depth: e, index: n } : (t.splice(n, 1), n--);
          }
        }
      };z();for (var L = 0; L < t.maximalAdjustments; L++) {
        for (var A = y.length, O = [], R = 0; R < A; R++) {
          for (var V = y[R], q = V.length, F = 0; F < q; F++) {
            var j = V[F],
                X = j._private.scratch.breadthfirst,
                Y = function (e) {
              for (var t = e.connectedEdges(function (t) {
                return t.data("target") === e.id();
              }), n = e._private.scratch.breadthfirst, r = 0, i = void 0, a = 0; a < t.length; a++) {
                var o = t[a],
                    s = o.source()[0],
                    l = s._private.scratch.breadthfirst;n.depth <= l.depth && r < l.depth && (r = l.depth, i = s);
              }return i;
            }(j);Y && (X.intEle = Y, O.push(j));
          }
        }for (var W = 0; W < O.length; W++) {
          var H = O[W],
              Z = H._private.scratch.breadthfirst,
              $ = Z.intEle,
              U = $._private.scratch.breadthfirst;y[Z.depth][Z.index] = null;for (var G = U.depth + 1; G > y.length - 1;) {
            y.push([]);
          }y[G].push(H), Z.depth = G, Z.index = y[G].length - 1;
        }z();
      }var Q = 0;if (t.avoidOverlap) for (var K = 0; K < i.length; K++) {
        var J = i[K],
            ee = J.layoutDimensions(t),
            te = ee.w,
            ne = ee.h;Q = Math.max(Q, te, ne);
      }for (var re = {}, ie = function ie(e) {
        if (re[e.id()]) return re[e.id()];for (var t = e._private.scratch.breadthfirst.depth, n = e.neighborhood().nodes().not(":parent").intersection(i), r = 0, a = 0, o = 0; o < n.length; o++) {
          var s = n[o],
              l = s._private.scratch.breadthfirst,
              u = l.index,
              c = l.depth,
              d = y[c].length;(t > c || 0 === t) && (r += u / d, a++);
        }return a = Math.max(1, a), r /= a, 0 === a && (r = void 0), re[e.id()] = r, r;
      }, ae = function ae(e, t) {
        return ie(e) - ie(t);
      }, oe = 0; oe < 3; oe++) {
        for (var se = 0; se < y.length; se++) {
          y[se] = y[se].sort(ae);
        }z();
      }for (var le = 0, ue = 0; ue < y.length; ue++) {
        le = Math.max(y[ue].length, le);
      }for (var ce = { x: l.x1 + l.w / 2, y: l.x1 + l.h / 2 }, de = {}, he = y.length - 1; he >= 0; he--) {
        for (var pe = y[he], fe = 0; fe < pe.length; fe++) {
          var ve = pe[fe];de[ve.id()] = function (e, n) {
            var r = e._private.scratch.breadthfirst,
                i = r.depth,
                a = r.index,
                o = y[i].length,
                s = Math.max(l.w / (o + 1), Q),
                u = Math.max(l.h / (y.length + 1), Q),
                c = Math.min(l.w / 2 / y.length, l.h / 2 / y.length);if (c = Math.max(c, Q), t.circle) {
              if (t.circle) {
                var d = c * i + c - (y.length > 0 && y[0].length <= 3 ? c / 2 : 0),
                    h = 2 * Math.PI / y[i].length * a;return 0 === i && 1 === y[0].length && (d = 1), { x: ce.x + d * Math.cos(h), y: ce.y + d * Math.sin(h) };
              }return { x: ce.x + (a + 1 - (o + 1) / 2) * s, y: (i + 1) * u };
            }var p = { x: ce.x + (a + 1 - (o + 1) / 2) * s, y: (i + 1) * u };return p;
          }(ve, y.length);
        }
      }return i.layoutPositions(this, t, function (e) {
        return de[e.id()];
      }), this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, s, e);
    }var i = n(1),
        a = n(2),
        o = n(0),
        s = { fit: !0, padding: 30, boundingBox: void 0, avoidOverlap: !0, nodeDimensionsIncludeLabels: !1, spacingFactor: void 0, radius: void 0, startAngle: 1.5 * Math.PI, sweep: void 0, clockwise: !0, sort: void 0, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      var e = this.options,
          t = e,
          n = e.cy,
          r = t.eles,
          i = void 0 !== t.counterclockwise ? !t.counterclockwise : t.clockwise,
          s = r.nodes().not(":parent");t.sort && (s = s.sort(t.sort));for (var l = a.makeBoundingBox(t.boundingBox ? t.boundingBox : { x1: 0, y1: 0, w: n.width(), h: n.height() }), u = { x: l.x1 + l.w / 2, y: l.y1 + l.h / 2 }, c = void 0 === t.sweep ? 2 * Math.PI - 2 * Math.PI / s.length : t.sweep, d = c / Math.max(1, s.length - 1), h = void 0, p = 0, f = 0; f < s.length; f++) {
        var v = s[f],
            g = v.layoutDimensions(t),
            y = g.w,
            m = g.h;p = Math.max(p, y, m);
      }if (h = o.number(t.radius) ? t.radius : s.length <= 1 ? 0 : Math.min(l.h, l.w) / 2 - p, s.length > 1 && t.avoidOverlap) {
        p *= 1.75;var b = Math.cos(d) - Math.cos(0),
            x = Math.sin(d) - Math.sin(0),
            w = Math.sqrt(p * p / (b * b + x * x));h = Math.max(w, h);
      }var E = function E(e, n) {
        var r = t.startAngle + n * d * (i ? 1 : -1),
            a = h * Math.cos(r),
            o = h * Math.sin(r);return { x: u.x + a, y: u.y + o };
      };return s.layoutPositions(this, t, E), this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, o, e);
    }var i = n(1),
        a = n(2),
        o = { fit: !0, padding: 30, startAngle: 1.5 * Math.PI, sweep: void 0, clockwise: !0, equidistant: !1, minNodeSpacing: 10, boundingBox: void 0, avoidOverlap: !0, nodeDimensionsIncludeLabels: !1, height: void 0, width: void 0, spacingFactor: void 0, concentric: function concentric(e) {
        return e.degree();
      }, levelWidth: function levelWidth(e) {
        return e.maxDegree() / 4;
      }, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      for (var e = this.options, t = e, n = void 0 !== t.counterclockwise ? !t.counterclockwise : t.clockwise, r = e.cy, i = t.eles, o = i.nodes().not(":parent"), s = a.makeBoundingBox(t.boundingBox ? t.boundingBox : { x1: 0, y1: 0, w: r.width(), h: r.height() }), l = { x: s.x1 + s.w / 2, y: s.y1 + s.h / 2 }, u = [], c = (t.startAngle, 0), d = 0; d < o.length; d++) {
        var h = o[d],
            p = void 0;p = t.concentric(h), u.push({ value: p, node: h }), h._private.scratch.concentric = p;
      }o.updateStyle();for (var f = 0; f < o.length; f++) {
        var v = o[f],
            g = v.layoutDimensions(t);c = Math.max(c, g.w, g.h);
      }u.sort(function (e, t) {
        return t.value - e.value;
      });for (var y = t.levelWidth(o), m = [[]], b = m[0], x = 0; x < u.length; x++) {
        var w = u[x];if (b.length > 0) {
          Math.abs(b[0].value - w.value) >= y && (b = [], m.push(b));
        }b.push(w);
      }var E = c + t.minNodeSpacing;if (!t.avoidOverlap) {
        var P = m.length > 0 && m[0].length > 1,
            C = Math.min(s.w, s.h) / 2 - E,
            S = C / (m.length + P ? 1 : 0);E = Math.min(E, S);
      }for (var T = 0, D = 0; D < m.length; D++) {
        var k = m[D],
            _ = void 0 === t.sweep ? 2 * Math.PI - 2 * Math.PI / k.length : t.sweep,
            M = k.dTheta = _ / Math.max(1, k.length - 1);if (k.length > 1 && t.avoidOverlap) {
          var I = Math.cos(M) - Math.cos(0),
              N = Math.sin(M) - Math.sin(0),
              B = Math.sqrt(E * E / (I * I + N * N));T = Math.max(B, T);
        }k.r = T, T += E;
      }if (t.equidistant) {
        for (var z = 0, L = 0, A = 0; A < m.length; A++) {
          var O = m[A],
              R = O.r - L;z = Math.max(z, R);
        }L = 0;for (var V = 0; V < m.length; V++) {
          var q = m[V];0 === V && (L = q.r), q.r = L, L += z;
        }
      }for (var F = {}, j = 0; j < m.length; j++) {
        for (var X = m[j], Y = X.dTheta, W = X.r, H = 0; H < X.length; H++) {
          var Z = X[H],
              $ = t.startAngle + (n ? 1 : -1) * Y * H,
              U = { x: l.x + W * Math.cos($), y: l.y + W * Math.sin($) };F[Z.node.id()] = U;
        }
      }return o.layoutPositions(this, t, function (e) {
        var t = e.id();return F[t];
      }), this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = a.extend({}, u, e), this.options.layout = this;
    }var i,
        a = n(1),
        o = n(2),
        s = n(0),
        l = n(5),
        u = { ready: function ready() {}, stop: function stop() {}, animate: !0, animationEasing: void 0, animationDuration: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, animationThreshold: 250, refresh: 20, fit: !0, padding: 30, boundingBox: void 0, nodeDimensionsIncludeLabels: !1, randomize: !1, componentSpacing: 40, nodeRepulsion: function nodeRepulsion(e) {
        return 2048;
      }, nodeOverlap: 4, idealEdgeLength: function idealEdgeLength(e) {
        return 32;
      }, edgeElasticity: function edgeElasticity(e) {
        return 32;
      }, nestingFactor: 1.2, gravity: 1, numIter: 1e3, initialTemp: 1e3, coolingFactor: .99, minTemp: 1, weaver: !1 };r.prototype.run = function () {
      function e(e) {
        var t = { type: "message", message: e };d.trigger(t);
      }var t = this.options,
          n = t.cy,
          r = this,
          o = this.thread,
          u = t.weaver ? t.weaver.Thread : null,
          d = { listeners: [], on: function on(e, t) {
          return this.listeners.push({ event: e, callback: t }), this;
        }, trigger: function trigger(e) {
          s.string(e) && (e = { type: e });var t = function t(_t2) {
            return _t2.event === e.type;
          },
              n = function n(t) {
            t.callback(e);
          };return this.listeners.filter(t).forEach(n), this;
        }, pass: function pass(e) {
          return this.pass = e, this;
        }, run: function run(e) {
          var t = this.pass;return new l(function (n) {
            n(e(t));
          });
        }, stop: function stop() {
          return this;
        }, stopped: function stopped() {
          return !0;
        } };o && !o.stopped() || (o = this.thread = u ? new u() : d), r.stopped = !1, !0 !== t.animate && !1 !== t.animate || r.emit({ type: "layoutstart", layout: r }), i = !0 === t.debug;var h = c(n, r, t);i && p(h), t.randomize && f(h, n);var g = Date.now(),
          y = !1,
          m = function m(e) {
        e = e || {}, y && !e.next || !e.force && Date.now() - g < t.animationThreshold || (y = !0, a.requestAnimationFrame(function () {
          v(h, n, t), !0 === t.fit && n.fit(t.padding), y = !1, e.next && e.next();
        }));
      };o.on("message", function (e) {
        var t = e.message;h.layoutNodes = t, m();
      }), o.pass({ layoutInfo: h, options: { animate: t.animate, refresh: t.refresh, componentSpacing: t.componentSpacing, nodeOverlap: t.nodeOverlap, nestingFactor: t.nestingFactor, gravity: t.gravity, numIter: t.numIter, initialTemp: t.initialTemp, coolingFactor: t.coolingFactor, minTemp: t.minTemp } }).run(function (t) {
        var n,
            r = t.layoutInfo,
            i = t.options,
            a = function a(e, t, n) {
          o(e, t), d(e, t), h(e, t), p(e, t), f(e, t);
        },
            o = function o(e, t) {
          for (var n = 0; n < e.graphSet.length; n++) {
            for (var r = e.graphSet[n], i = r.length, a = 0; a < i; a++) {
              for (var o = e.layoutNodes[e.idToIndex[r[a]]], s = a + 1; s < i; s++) {
                var u = e.layoutNodes[e.idToIndex[r[s]]];l(o, u, e, t);
              }
            }
          }
        },
            s = function s(e) {
          return -e + 2 * e * Math.random();
        },
            l = function l(e, t, n, r) {
          if (e.cmptId === t.cmptId || n.isCompound) {
            var i = t.positionX - e.positionX,
                a = t.positionY - e.positionY;0 === i && 0 === a && (i = s(1), a = s(1));var o = u(e, t, i, a);if (o > 0) var l = r.nodeOverlap * o,
                d = Math.sqrt(i * i + a * a),
                h = l * i / d,
                p = l * a / d;else var f = c(e, i, a),
                v = c(t, -1 * i, -1 * a),
                g = v.x - f.x,
                y = v.y - f.y,
                m = g * g + y * y,
                d = Math.sqrt(m),
                l = (e.nodeRepulsion + t.nodeRepulsion) / m,
                h = l * g / d,
                p = l * y / d;e.isLocked || (e.offsetX -= h, e.offsetY -= p), t.isLocked || (t.offsetX += h, t.offsetY += p);
          }
        },
            u = function u(e, t, n, r) {
          if (n > 0) var i = e.maxX - t.minX;else var i = t.maxX - e.minX;if (r > 0) var a = e.maxY - t.minY;else var a = t.maxY - e.minY;return i >= 0 && a >= 0 ? Math.sqrt(i * i + a * a) : 0;
        },
            c = function c(e, t, n) {
          var r = e.positionX,
              i = e.positionY,
              a = e.height || 1,
              o = e.width || 1,
              s = n / t,
              l = a / o,
              u = {};return 0 === t && 0 < n ? (u.x = r, u.y = i + a / 2, u) : 0 === t && 0 > n ? (u.x = r, u.y = i + a / 2, u) : 0 < t && -1 * l <= s && s <= l ? (u.x = r + o / 2, u.y = i + o * n / 2 / t, u) : 0 > t && -1 * l <= s && s <= l ? (u.x = r - o / 2, u.y = i - o * n / 2 / t, u) : 0 < n && (s <= -1 * l || s >= l) ? (u.x = r + a * t / 2 / n, u.y = i + a / 2, u) : 0 > n && (s <= -1 * l || s >= l) ? (u.x = r - a * t / 2 / n, u.y = i - a / 2, u) : u;
        },
            d = function d(e, t) {
          for (var n = 0; n < e.edgeSize; n++) {
            var r = e.layoutEdges[n],
                i = e.idToIndex[r.sourceId],
                a = e.layoutNodes[i],
                o = e.idToIndex[r.targetId],
                s = e.layoutNodes[o],
                l = s.positionX - a.positionX,
                u = s.positionY - a.positionY;if (0 !== l || 0 !== u) {
              var d = c(a, l, u),
                  h = c(s, -1 * l, -1 * u),
                  p = h.x - d.x,
                  f = h.y - d.y,
                  v = Math.sqrt(p * p + f * f),
                  g = Math.pow(r.idealLength - v, 2) / r.elasticity;if (0 !== v) var y = g * p / v,
                  m = g * f / v;else var y = 0,
                  m = 0;a.isLocked || (a.offsetX += y, a.offsetY += m), s.isLocked || (s.offsetX -= y, s.offsetY -= m);
            }
          }
        },
            h = function h(e, t) {
          for (var n = 0; n < e.graphSet.length; n++) {
            var r = e.graphSet[n],
                i = r.length;if (0 === n) var a = e.clientHeight / 2,
                o = e.clientWidth / 2;else var s = e.layoutNodes[e.idToIndex[r[0]]],
                l = e.layoutNodes[e.idToIndex[s.parentId]],
                a = l.positionX,
                o = l.positionY;for (var u = 0; u < i; u++) {
              var c = e.layoutNodes[e.idToIndex[r[u]]];if (!c.isLocked) {
                var d = a - c.positionX,
                    h = o - c.positionY,
                    p = Math.sqrt(d * d + h * h);if (p > 1) {
                  var f = t.gravity * d / p,
                      v = t.gravity * h / p;c.offsetX += f, c.offsetY += v;
                }
              }
            }
          }
        },
            p = function p(e, t) {
          var n = [],
              r = 0,
              i = -1;for (n.push.apply(n, e.graphSet[0]), i += e.graphSet[0].length; r <= i;) {
            var a = n[r++],
                o = e.idToIndex[a],
                s = e.layoutNodes[o],
                l = s.children;if (0 < l.length && !s.isLocked) {
              for (var u = s.offsetX, c = s.offsetY, d = 0; d < l.length; d++) {
                var h = e.layoutNodes[e.idToIndex[l[d]]];h.offsetX += u, h.offsetY += c, n[++i] = l[d];
              }s.offsetX = 0, s.offsetY = 0;
            }
          }
        },
            f = function f(e, t) {
          for (var n = 0; n < e.nodeSize; n++) {
            var r = e.layoutNodes[n];0 < r.children.length && (r.maxX = void 0, r.minX = void 0, r.maxY = void 0, r.minY = void 0);
          }for (var n = 0; n < e.nodeSize; n++) {
            var r = e.layoutNodes[n];if (!(0 < r.children.length || r.isLocked)) {
              var i = v(r.offsetX, r.offsetY, e.temperature);r.positionX += i.x, r.positionY += i.y, r.offsetX = 0, r.offsetY = 0, r.minX = r.positionX - r.width, r.maxX = r.positionX + r.width, r.minY = r.positionY - r.height, r.maxY = r.positionY + r.height, g(r, e);
            }
          }for (var n = 0; n < e.nodeSize; n++) {
            var r = e.layoutNodes[n];0 < r.children.length && !r.isLocked && (r.positionX = (r.maxX + r.minX) / 2, r.positionY = (r.maxY + r.minY) / 2, r.width = r.maxX - r.minX, r.height = r.maxY - r.minY);
          }
        },
            v = function v(e, t, n) {
          var r = Math.sqrt(e * e + t * t);if (r > n) var i = { x: n * e / r, y: n * t / r };else var i = { x: e, y: t };return i;
        },
            g = function e(t, n) {
          var r = t.parentId;if (null != r) {
            var i = n.layoutNodes[n.idToIndex[r]],
                a = !1;return (null == i.maxX || t.maxX + i.padRight > i.maxX) && (i.maxX = t.maxX + i.padRight, a = !0), (null == i.minX || t.minX - i.padLeft < i.minX) && (i.minX = t.minX - i.padLeft, a = !0), (null == i.maxY || t.maxY + i.padBottom > i.maxY) && (i.maxY = t.maxY + i.padBottom, a = !0), (null == i.minY || t.minY - i.padTop < i.minY) && (i.minY = t.minY - i.padTop, a = !0), a ? e(i, n) : void 0;
          }
        },
            y = 0;do {
          for (var m = 0; m < i.refresh && y < i.numIter;) {
            var n = function (e) {
              return a(r, i), r.temperature = r.temperature * i.coolingFactor, !(r.temperature < i.minTemp);
            }();if (!n) break;m++, y++;
          }!0 === i.animate && e(r.layoutNodes);
        } while (n && y + 1 < i.numIter);return function (e, t) {
          for (var n = r.layoutNodes, i = [], a = 0; a < n.length; a++) {
            var o = n[a],
                s = o.cmptId;(i[s] = i[s] || []).push(o);
          }for (var l = 0, a = 0; a < i.length; a++) {
            var u = i[a];if (u) {
              u.x1 = 1 / 0, u.x2 = -1 / 0, u.y1 = 1 / 0, u.y2 = -1 / 0;for (var c = 0; c < u.length; c++) {
                var d = u[c];u.x1 = Math.min(u.x1, d.positionX - d.width / 2), u.x2 = Math.max(u.x2, d.positionX + d.width / 2), u.y1 = Math.min(u.y1, d.positionY - d.height / 2), u.y2 = Math.max(u.y2, d.positionY + d.height / 2);
              }u.w = u.x2 - u.x1, u.h = u.y2 - u.y1, l += u.w * u.h;
            }
          }i.sort(function (e, t) {
            return t.w * t.h - e.w * e.h;
          });for (var h = 0, p = 0, f = 0, v = 0, g = Math.sqrt(l) * r.clientWidth / r.clientHeight, a = 0; a < i.length; a++) {
            var u = i[a];if (u) {
              for (var c = 0; c < u.length; c++) {
                var d = u[c];d.isLocked || (d.positionX += h, d.positionY += p);
              }h += u.w + t.componentSpacing, f += u.w + t.componentSpacing, v = Math.max(v, u.h), f > g && (p += v + t.componentSpacing, h = 0, f = 0, v = 0);
            }
          }
        }(0, i), r;
      }).then(function (e) {
        h.layoutNodes = e.layoutNodes, o.stop(), b();
      });var b = function b() {
        !0 === t.animate || !1 === t.animate ? m({ force: !0, next: function next() {
            r.one("layoutstop", t.stop), r.emit({ type: "layoutstop", layout: r });
          } }) : t.eles.nodes().layoutPositions(r, t, function (e) {
          var t = h.layoutNodes[h.idToIndex[e.data("id")]];return { x: t.positionX, y: t.positionY };
        });
      };return this;
    }, r.prototype.stop = function () {
      return this.stopped = !0, this.thread && this.thread.stop(), this.emit("layoutstop"), this;
    }, r.prototype.destroy = function () {
      return this.thread && this.thread.stop(), this;
    };var c = function c(e, t, n) {
      for (var r = n.eles.edges(), i = n.eles.nodes(), a = { isCompound: e.hasCompoundNodes(), layoutNodes: [], idToIndex: {}, nodeSize: i.size(), graphSet: [], indexToGraph: [], layoutEdges: [], edgeSize: r.size(), temperature: n.initialTemp, clientWidth: e.width(), clientHeight: e.width(), boundingBox: o.makeBoundingBox(n.boundingBox ? n.boundingBox : { x1: 0, y1: 0, w: e.width(), h: e.height() }) }, l = n.eles.components(), u = {}, c = 0; c < l.length; c++) {
        for (var h = l[c], p = 0; p < h.length; p++) {
          var f = h[p];u[f.id()] = c;
        }
      }for (var c = 0; c < a.nodeSize; c++) {
        var v = i[c],
            g = v.layoutDimensions(n),
            y = {};y.isLocked = v.locked(), y.id = v.data("id"), y.parentId = v.data("parent"), y.cmptId = u[v.id()], y.children = [], y.positionX = v.position("x"), y.positionY = v.position("y"), y.offsetX = 0, y.offsetY = 0, y.height = g.w, y.width = g.h, y.maxX = y.positionX + y.width / 2, y.minX = y.positionX - y.width / 2, y.maxY = y.positionY + y.height / 2, y.minY = y.positionY - y.height / 2, y.padLeft = parseFloat(v.style("padding")), y.padRight = parseFloat(v.style("padding")), y.padTop = parseFloat(v.style("padding")), y.padBottom = parseFloat(v.style("padding")), y.nodeRepulsion = s.fn(n.nodeRepulsion) ? n.nodeRepulsion(v) : n.nodeRepulsion, a.layoutNodes.push(y), a.idToIndex[y.id] = c;
      }for (var m = [], b = 0, x = -1, w = [], c = 0; c < a.nodeSize; c++) {
        var v = a.layoutNodes[c],
            E = v.parentId;null != E ? a.layoutNodes[a.idToIndex[E]].children.push(v.id) : (m[++x] = v.id, w.push(v.id));
      }for (a.graphSet.push(w); b <= x;) {
        var P = m[b++],
            C = a.idToIndex[P],
            f = a.layoutNodes[C],
            S = f.children;if (S.length > 0) {
          a.graphSet.push(S);for (var c = 0; c < S.length; c++) {
            m[++x] = S[c];
          }
        }
      }for (var c = 0; c < a.graphSet.length; c++) {
        for (var T = a.graphSet[c], p = 0; p < T.length; p++) {
          var D = a.idToIndex[T[p]];a.indexToGraph[D] = c;
        }
      }for (var c = 0; c < a.edgeSize; c++) {
        var k = r[c],
            _ = {};_.id = k.data("id"), _.sourceId = k.data("source"), _.targetId = k.data("target");var M = s.fn(n.idealEdgeLength) ? n.idealEdgeLength(k) : n.idealEdgeLength,
            I = s.fn(n.edgeElasticity) ? n.edgeElasticity(k) : n.edgeElasticity,
            N = a.idToIndex[_.sourceId],
            B = a.idToIndex[_.targetId];if (a.indexToGraph[N] != a.indexToGraph[B]) {
          for (var z = d(_.sourceId, _.targetId, a), L = a.graphSet[z], A = 0, y = a.layoutNodes[N]; -1 === L.indexOf(y.id);) {
            y = a.layoutNodes[a.idToIndex[y.parentId]], A++;
          }for (y = a.layoutNodes[B]; -1 === L.indexOf(y.id);) {
            y = a.layoutNodes[a.idToIndex[y.parentId]], A++;
          }M *= A * n.nestingFactor;
        }_.idealLength = M, _.elasticity = I, a.layoutEdges.push(_);
      }return a;
    },
        d = function d(e, t, n) {
      var r = h(e, t, 0, n);return 2 > r.count ? 0 : r.graph;
    },
        h = function e(t, n, r, i) {
      var a = i.graphSet[r];if (-1 < a.indexOf(t) && -1 < a.indexOf(n)) return { count: 2, graph: r };for (var o = 0, s = 0; s < a.length; s++) {
        var l = a[s],
            u = i.idToIndex[l],
            c = i.layoutNodes[u].children;if (0 !== c.length) {
          var d = i.indexToGraph[i.idToIndex[c[0]]],
              h = e(t, n, d, i);if (0 !== h.count) {
            if (1 !== h.count) return h;if (2 === ++o) break;
          }
        }
      }return { count: o, graph: r };
    },
        p = function p(e) {
      if (i) {
        console.debug("layoutNodes:");for (var t = 0; t < e.nodeSize; t++) {
          var n = e.layoutNodes[t],
              r = "\nindex: " + t + "\nId: " + n.id + "\nChildren: " + n.children.toString() + "\nparentId: " + n.parentId + "\npositionX: " + n.positionX + "\npositionY: " + n.positionY + "\nOffsetX: " + n.offsetX + "\nOffsetY: " + n.offsetY + "\npadLeft: " + n.padLeft + "\npadRight: " + n.padRight + "\npadTop: " + n.padTop + "\npadBottom: " + n.padBottom;console.debug(r);
        }console.debug("idToIndex");for (var t in e.idToIndex) {
          console.debug("Id: " + t + "\nIndex: " + e.idToIndex[t]);
        }console.debug("Graph Set");for (var a = e.graphSet, t = 0; t < a.length; t++) {
          console.debug("Set : " + t + ": " + a[t].toString());
        }for (var r = "IndexToGraph", t = 0; t < e.indexToGraph.length; t++) {
          r += "\nIndex : " + t + " Graph: " + e.indexToGraph[t];
        }console.debug(r), r = "Layout Edges";for (var t = 0; t < e.layoutEdges.length; t++) {
          var o = e.layoutEdges[t];r += "\nEdge Index: " + t + " ID: " + o.id + " SouceID: " + o.sourceId + " TargetId: " + o.targetId + " Ideal Length: " + o.idealLength;
        }console.debug(r), r = "nodeSize: " + e.nodeSize, r += "\nedgeSize: " + e.edgeSize, r += "\ntemperature: " + e.temperature, console.debug(r);
      }
    },
        f = function f(e, t) {
      for (var n = e.clientWidth, r = e.clientHeight, i = 0; i < e.nodeSize; i++) {
        var a = e.layoutNodes[i];0 !== a.children.length || a.isLocked || (a.positionX = Math.random() * n, a.positionY = Math.random() * r);
      }
    },
        v = function v(e, t, n) {
      var r = n.layout,
          i = n.eles.nodes(),
          a = e.boundingBox,
          o = { x1: 1 / 0, x2: -1 / 0, y1: 1 / 0, y2: -1 / 0 };n.boundingBox && (i.forEach(function (t) {
        var n = e.layoutNodes[e.idToIndex[t.data("id")]];o.x1 = Math.min(o.x1, n.positionX), o.x2 = Math.max(o.x2, n.positionX), o.y1 = Math.min(o.y1, n.positionY), o.y2 = Math.max(o.y2, n.positionY);
      }), o.w = o.x2 - o.x1, o.h = o.y2 - o.y1), i.positions(function (t, r) {
        var i = e.layoutNodes[e.idToIndex[t.data("id")]];if (n.boundingBox) {
          var s = (i.positionX - o.x1) / o.w,
              l = (i.positionY - o.y1) / o.h;return { x: a.x1 + s * a.w, y: a.y1 + l * a.h };
        }return { x: i.positionX, y: i.positionY };
      }), !0 !== e.ready && (e.ready = !0, r.one("layoutready", n.ready), r.emit({ type: "layoutready", layout: this }));
    };e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, o, e);
    }var i = n(1),
        a = n(2),
        o = { fit: !0, padding: 30, boundingBox: void 0, avoidOverlap: !0, avoidOverlapPadding: 10, nodeDimensionsIncludeLabels: !1, spacingFactor: void 0, condense: !1, rows: void 0, cols: void 0, position: function position(e) {}, sort: void 0, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      var e = this.options,
          t = e,
          n = e.cy,
          r = t.eles,
          i = r.nodes().not(":parent");t.sort && (i = i.sort(t.sort));var o = a.makeBoundingBox(t.boundingBox ? t.boundingBox : { x1: 0, y1: 0, w: n.width(), h: n.height() });if (0 === o.h || 0 === o.w) i.layoutPositions(this, t, function (e) {
        return { x: o.x1, y: o.y1 };
      });else {
        var s = i.size(),
            l = Math.sqrt(s * o.h / o.w),
            u = Math.round(l),
            c = Math.round(o.w / o.h * l),
            d = function d(e) {
          if (null == e) return Math.min(u, c);Math.min(u, c) == u ? u = e : c = e;
        },
            h = function h(e) {
          if (null == e) return Math.max(u, c);Math.max(u, c) == u ? u = e : c = e;
        },
            p = t.rows,
            f = null != t.cols ? t.cols : t.columns;if (null != p && null != f) u = p, c = f;else if (null != p && null == f) u = p, c = Math.ceil(s / u);else if (null == p && null != f) c = f, u = Math.ceil(s / c);else if (c * u > s) {
          var v = d(),
              g = h();(v - 1) * g >= s ? d(v - 1) : (g - 1) * v >= s && h(g - 1);
        } else for (; c * u < s;) {
          var y = d(),
              m = h();(m + 1) * y >= s ? h(m + 1) : d(y + 1);
        }var b = o.w / c,
            x = o.h / u;if (t.condense && (b = 0, x = 0), t.avoidOverlap) for (var w = 0; w < i.length; w++) {
          var E = i[w],
              P = E._private.position;null != P.x && null != P.y || (P.x = 0, P.y = 0);var C = E.layoutDimensions(t),
              S = t.avoidOverlapPadding,
              T = C.w + S,
              D = C.h + S;b = Math.max(b, T), x = Math.max(x, D);
        }for (var k = {}, _ = function _(e, t) {
          return !!k["c-" + e + "-" + t];
        }, M = function M(e, t) {
          k["c-" + e + "-" + t] = !0;
        }, I = 0, N = 0, B = function B() {
          ++N >= c && (N = 0, I++);
        }, z = {}, L = 0; L < i.length; L++) {
          var A = i[L],
              O = t.position(A);if (O && (void 0 !== O.row || void 0 !== O.col)) {
            var R = { row: O.row, col: O.col };if (void 0 === R.col) for (R.col = 0; _(R.row, R.col);) {
              R.col++;
            } else if (void 0 === R.row) for (R.row = 0; _(R.row, R.col);) {
              R.row++;
            }z[A.id()] = R, M(R.row, R.col);
          }
        }var V = function V(e, t) {
          var n = void 0,
              r = void 0;if (e.locked() || e.isParent()) return !1;var i = z[e.id()];if (i) n = i.col * b + b / 2 + o.x1, r = i.row * x + x / 2 + o.y1;else {
            for (; _(I, N);) {
              B();
            }n = N * b + b / 2 + o.x1, r = I * x + x / 2 + o.y1, M(I, N), B();
          }return { x: n, y: r };
        };i.layoutPositions(this, t, V);
      }return this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, a, e);
    }var i = n(1),
        a = { ready: function ready() {}, stop: function stop() {} };r.prototype.run = function () {
      var e = this.options,
          t = e.eles,
          n = this;e.cy;return n.emit("layoutstart"), t.nodes().positions(function () {
        return { x: 0, y: 0 };
      }), n.one("layoutready", e.ready), n.emit("layoutready"), n.one("layoutstop", e.stop), n.emit("layoutstop"), this;
    }, r.prototype.stop = function () {
      return this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, o, e);
    }var i = n(1),
        a = n(0),
        o = { positions: void 0, zoom: void 0, pan: void 0, fit: !0, padding: 30, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      function e(e) {
        if (null == t.positions) return null;if (i) return t.positions(e);var n = t.positions[e._private.data.id];return null == n ? null : n;
      }var t = this.options,
          n = t.eles,
          r = n.nodes(),
          i = a.fn(t.positions);return r.layoutPositions(this, t, function (t, n) {
        var r = e(t);return !t.locked() && null != r && r;
      }), this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, o, e);
    }var i = n(1),
        a = n(2),
        o = { fit: !0, padding: 30, boundingBox: void 0, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      var e = this.options,
          t = e.cy,
          n = e.eles,
          r = n.nodes().not(":parent"),
          i = a.makeBoundingBox(e.boundingBox ? e.boundingBox : { x1: 0, y1: 0, w: t.width(), h: t.height() }),
          o = function o(e, t) {
        return { x: i.x1 + Math.round(Math.random() * i.w), y: i.y1 + Math.round(Math.random() * i.h) };
      };return r.layoutPositions(this, e, o), this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = i.extend({}, o, e);
    }var i = n(1),
        a = n(2),
        o = { fit: !0, padding: 30, boundingBox: void 0, avoidOverlap: !0, avoidOverlapPadding: 10, nodeDimensionsIncludeLabels: !1, spacingFactor: void 0, condense: !0, rows: void 0, cols: void 0, position: function position(e) {}, sort: void 0, animate: !1, animationDuration: 500, animationEasing: void 0, animateFilter: function animateFilter(e, t) {
        return !0;
      }, ready: void 0, stop: void 0, transform: function transform(e, t) {
        return t;
      } };r.prototype.run = function () {
      var e = this.options,
          t = e,
          n = e.cy,
          r = t.eles,
          i = r.nodes().not(":parent");t.sort && (i = i.sort(t.sort));var o = a.makeBoundingBox(t.boundingBox ? t.boundingBox : { x1: 0, y1: 0, w: n.width(), h: n.height() });if (0 === o.h || 0 === o.w) i.layoutPositions(this, t, function (e) {
        return { x: o.x1, y: o.y1 };
      });else {
        var s = i.size(),
            l = Math.sqrt(s * o.h / o.w),
            u = Math.round(l),
            c = Math.round(o.w / o.h * l),
            d = function d(e) {
          if (null == e) return Math.min(u, c);Math.min(u, c) == u ? u = e : c = e;
        },
            h = function h(e) {
          if (null == e) return Math.max(u, c);Math.max(u, c) == u ? u = e : c = e;
        },
            p = t.rows,
            f = null != t.cols ? t.cols : t.columns;if (null != p && null != f) u = p, c = f;else if (null != p && null == f) u = p, c = Math.ceil(s / u);else if (null == p && null != f) c = f, u = Math.ceil(s / c);else if (c * u > s) {
          var v = d(),
              g = h();(v - 1) * g >= s ? d(v - 1) : (g - 1) * v >= s && h(g - 1);
        } else for (; c * u < s;) {
          var y = d(),
              m = h();(m + 1) * y >= s ? h(m + 1) : d(y + 1);
        }var b = o.w / c,
            x = o.h / u;t.condense && (b = 0, x = 0);for (var w = [], E = [], P = 0; P < i.length; P++) {
          w.push(1);
        }var C = {};if (t.avoidOverlap) {
          for (var S = 0; S < i.length; S++) {
            var T = parseInt(i[S]._private.data.clump);C[T] = 0;
          }for (var D = 0; D < i.length; D++) {
            var k = i[D],
                _ = k._private.position;null != _.x && null != _.y || (_.x = 0, _.y = 0);var M = k.layoutDimensions(t),
                I = t.avoidOverlapPadding,
                N = M.w + I,
                B = M.h + I;E[D] = N;var z = parseInt(k._private.data.clump);C[z] = Math.max(C[z], M.w + I), b = Math.max(b, N), x = Math.max(x, B);
          }for (var L = 0; L < i.length; L++) {
            w[L] = E[L] / b, w[L] < .7 && (w[L] = .7);
          }
        }for (var A = {}, O = function O(e, t) {
          return !!A["c-" + e + "-" + t];
        }, R = function R(e, t) {
          A["c-" + e + "-" + t] = !0;
        }, V = 0, q = 0, F = function F() {
          ++q >= c && (q = 0, V++);
        }, j = {}, X = 0; X < i.length; X++) {
          var Y = i[X],
              W = t.position(Y);if (W && (void 0 !== W.row || void 0 !== W.col)) {
            var H = { row: W.row, col: W.col };if (void 0 === H.col) for (H.col = 0; O(H.row, H.col);) {
              H.col++;
            } else if (void 0 === H.row) for (H.row = 0; O(H.row, H.col);) {
              H.row++;
            }j[Y.id()] = H, R(H.row, H.col);
          }
        }var Z = function Z(e, t) {
          var n = void 0,
              r = void 0;if (e.locked() || e.isParent()) return !1;var i = j[e.id()];if (i) n = i.col * b + b / 2 + o.x1, r = i.row * x + x / 2 + o.y1;else {
            for (; O(V, q);) {
              F();
            }for (var a = 0, s = 0; s < q; s++) {
              a += C[s];
            }n = a + 4 * q + C[q] / 2, r = V * x + x / 2 + o.y1, R(V, q), F();
          }return { x: n, y: r };
        };i.layoutPositions(this, t, Z);
      }return this;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    e.exports = [{ name: "null", impl: n(108) }, { name: "base", impl: n(109) }, { name: "canvas", impl: n(125) }];
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      this.options = e, this.notifications = 0;
    }var i = function i() {};r.prototype = { recalculateRenderedStyle: i, notify: function notify() {
        this.notifications++;
      }, init: i }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(3),
        o = function o(e) {
      this.init(e);
    },
        s = o,
        l = s.prototype;l.clientFunctions = ["redrawHint", "render", "renderTo", "matchCanvasSize", "nodeShapeImpl", "arrowShapeImpl"], l.init = function (e) {
      var t = this;t.options = e, t.cy = e.cy;var n = t.container = e.cy.container();if (a) {
        var r = a.document,
            o = r.head,
            s = "__________cytoscape_container",
            l = null != r.getElementById("__________cytoscape_stylesheet");if (n.className.indexOf(s) < 0 && (n.className = (n.className || "") + " " + s), !l) {
          var u = r.createElement("style");u.id = "__________cytoscape_stylesheet", u.innerHTML = "." + s + " { position: relative; }", o.insertBefore(u, o.children[0]);
        }"static" === a.getComputedStyle(n).getPropertyValue("position") && i.error("A Cytoscape container has style position:static and so can not use UI extensions properly");
      }t.selection = [void 0, void 0, void 0, void 0, 0], t.bezierProjPcts = [.05, .225, .4, .5, .6, .775, .95], t.hoverData = { down: null, last: null, downTime: null, triggerMode: null, dragging: !1, initialPan: [null, null], capture: !1 }, t.dragData = { possibleDragElements: [] }, t.touchData = { start: null, capture: !1, startPosition: [null, null, null, null, null, null], singleTouchStartTime: null, singleTouchMoved: !0, now: [null, null, null, null, null, null], earlier: [null, null, null, null, null, null] }, t.redraws = 0, t.showFps = e.showFps, t.debug = e.debug, t.hideEdgesOnViewport = e.hideEdgesOnViewport, t.hideLabelsOnViewport = e.hideLabelsOnViewport, t.textureOnViewport = e.textureOnViewport, t.wheelSensitivity = e.wheelSensitivity, t.motionBlurEnabled = e.motionBlur, t.forcedPixelRatio = e.pixelRatio, t.motionBlur = e.motionBlur, t.motionBlurOpacity = e.motionBlurOpacity, t.motionBlurTransparency = 1 - t.motionBlurOpacity, t.motionBlurPxRatio = 1, t.mbPxRBlurry = 1, t.minMbLowQualFrames = 4, t.fullQualityMb = !1, t.clearedForMotionBlur = [], t.desktopTapThreshold = e.desktopTapThreshold, t.desktopTapThreshold2 = e.desktopTapThreshold * e.desktopTapThreshold, t.touchTapThreshold = e.touchTapThreshold, t.touchTapThreshold2 = e.touchTapThreshold * e.touchTapThreshold, t.tapholdDuration = 500, t.bindings = [], t.beforeRenderCallbacks = [], t.beforeRenderPriorities = { animations: 400, eleCalcs: 300, eleTxrDeq: 200, lyrTxrDeq: 100 }, t.registerNodeShapes(), t.registerArrowShapes(), t.registerCalculationListeners();
    }, l.notify = function (e) {
      var t,
          n = this;if (!this.destroyed) {
        t = r.array(e.type) ? e.type : [e.type];for (var i = {}, a = 0; a < t.length; a++) {
          i[t[a]] = !0;
        }if (i.init) return void n.load();if (i.destroy) return void n.destroy();(i.add || i.remove || i.load || i.zorder) && n.invalidateCachedZSortedEles(), i.viewport && n.redrawHint("select", !0), (i.load || i.resize) && (n.invalidateContainerClientCoordsCache(), n.matchCanvasSize(n.container)), n.redrawHint("eles", !0), n.redrawHint("drag", !0), this.startRenderLoop(), this.redraw();
      }
    }, l.destroy = function () {
      var e = this;e.destroyed = !0, e.cy.stopAnimationLoop();for (var t = 0; t < e.bindings.length; t++) {
        var n = e.bindings[t],
            r = n,
            i = r.target;(i.off || i.removeEventListener).apply(i, r.args);
      }if (e.bindings = [], e.beforeRenderCallbacks = [], e.onUpdateEleCalcsFns = [], e.removeObserver && e.removeObserver.disconnect(), e.styleObserver && e.styleObserver.disconnect(), e.labelCalcDiv) try {
        document.body.removeChild(e.labelCalcDiv);
      } catch (e) {}
    }, [n(110), n(111), n(121), n(122), n(123), n(124)].forEach(function (e) {
      i.extend(l, e);
    }), e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = n(0),
        a = n(1),
        o = {};o.arrowShapeWidth = .3, o.registerArrowShapes = function () {
      var e = this.arrowShapes = {},
          t = this,
          n = function n(e, t, _n3, r, i, a, o) {
        var s = i.x - _n3 / 2 - o,
            l = i.x + _n3 / 2 + o,
            u = i.y - _n3 / 2 - o,
            c = i.y + _n3 / 2 + o;return s <= e && e <= l && u <= t && t <= c;
      },
          o = function o(e, t, n, r, i) {
        var a = e * Math.cos(r) - t * Math.sin(r),
            o = e * Math.sin(r) + t * Math.cos(r),
            s = a * n,
            l = o * n;return { x: s + i.x, y: l + i.y };
      },
          s = function s(e, t, n, r) {
        for (var i = [], a = 0; a < e.length; a += 2) {
          var s = e[a],
              l = e[a + 1];i.push(o(s, l, t, n, r));
        }return i;
      },
          l = function l(e) {
        for (var t = [], n = 0; n < e.length; n++) {
          var r = e[n];t.push(r.x, r.y);
        }return t;
      },
          u = function u(e) {
        return e.pstyle("width").pfValue * e.pstyle("arrow-scale").pfValue * 2;
      },
          c = function c(o, _c) {
        i.string(_c) && (_c = e[_c]), e[o] = a.extend({ name: o, points: [-.15, -.3, .15, -.3, .15, .3, -.15, .3], collide: function collide(e, t, n, i, a, o) {
            var u = l(s(this.points, n + 2 * o, i, a));return r.pointInsidePolygonPoints(e, t, u);
          }, roughCollide: n, draw: function draw(e, n, r, i) {
            var a = s(this.points, n, r, i);t.arrowShapeImpl("polygon")(e, a);
          }, spacing: function spacing(e) {
            return 0;
          }, gap: u }, _c);
      };c("none", { collide: a.falsify, roughCollide: a.falsify, draw: a.noop, spacing: a.zeroify, gap: a.zeroify }), c("triangle", { points: [-.15, -.3, 0, 0, .15, -.3] }), c("arrow", "triangle"), c("triangle-backcurve", { points: e.triangle.points, controlPoint: [0, -.15], roughCollide: n, draw: function draw(e, n, r, i, a) {
          var l = s(this.points, n, r, i),
              u = this.controlPoint,
              c = o(u[0], u[1], n, r, i);t.arrowShapeImpl(this.name)(e, l, c);
        }, gap: function gap(e) {
          return .8 * u(e);
        } }), c("triangle-tee", { points: [-.15, -.3, 0, 0, .15, -.3, -.15, -.3], pointsTee: [-.15, -.4, -.15, -.5, .15, -.5, .15, -.4], collide: function collide(e, t, n, i, a, o, u) {
          var c = l(s(this.points, n + 2 * u, i, a)),
              d = l(s(this.pointsTee, n + 2 * u, i, a));return r.pointInsidePolygonPoints(e, t, c) || r.pointInsidePolygonPoints(e, t, d);
        }, draw: function draw(e, n, r, i, a) {
          var o = s(this.points, n, r, i),
              l = s(this.pointsTee, n, r, i);t.arrowShapeImpl(this.name)(e, o, l);
        } }), c("triangle-cross", { points: [-.15, -.3, 0, 0, .15, -.3, -.15, -.3], baseCrossLinePts: [-.15, -.4, -.15, -.4, .15, -.4, .15, -.4], crossLinePts: function crossLinePts(e, t) {
          var n = this.baseCrossLinePts.slice(),
              r = t / e;return n[3] = n[3] - r, n[5] = n[5] - r, n;
        }, collide: function collide(e, t, n, i, a, o, u) {
          var c = l(s(this.points, n + 2 * u, i, a)),
              d = l(s(this.crossLinePts(n, o), n + 2 * u, i, a));return r.pointInsidePolygonPoints(e, t, c) || r.pointInsidePolygonPoints(e, t, d);
        }, draw: function draw(e, n, r, i, a) {
          var o = s(this.points, n, r, i),
              l = s(this.crossLinePts(n, a), n, r, i);t.arrowShapeImpl(this.name)(e, o, l);
        } }), c("vee", { points: [-.15, -.3, 0, 0, .15, -.3, 0, -.15], gap: function gap(e) {
          return .525 * u(e);
        } }), c("circle", { radius: .15, collide: function collide(e, t, n, r, i, a, o) {
          var s = i;return Math.pow(s.x - e, 2) + Math.pow(s.y - t, 2) <= Math.pow((n + 2 * o) * this.radius, 2);
        }, draw: function draw(e, n, r, i, a) {
          t.arrowShapeImpl(this.name)(e, i.x, i.y, this.radius * n);
        }, spacing: function spacing(e) {
          return t.getArrowWidth(e.pstyle("width").pfValue, e.pstyle("arrow-scale").value) * this.radius;
        } }), c("tee", { points: [-.15, 0, -.15, -.1, .15, -.1, .15, 0], spacing: function spacing(e) {
          return 1;
        }, gap: function gap(e) {
          return 1;
        } }), c("square", { points: [-.15, 0, .15, 0, .15, -.3, -.15, -.3] }), c("diamond", { points: [-.15, -.15, 0, -.3, .15, -.15, 0, 0], gap: function gap(e) {
          return e.pstyle("width").pfValue * e.pstyle("arrow-scale").value;
        } });
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = {};[n(112), n(113), n(114), n(115), n(116), n(117), n(118), n(119), n(120)].forEach(function (e) {
      r.extend(i, e);
    }), e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(3),
        i = n(2),
        a = n(1),
        r = n(3),
        o = {};o.projectIntoViewport = function (e, t) {
      var n = this.cy,
          r = this.findContainerClientCoords(),
          i = r[0],
          a = r[1],
          o = r[4],
          s = n.pan(),
          l = n.zoom();return [((e - i) / o - s.x) / l, ((t - a) / o - s.y) / l];
    }, o.findContainerClientCoords = function () {
      if (this.containerBB) return this.containerBB;var e = this.container,
          t = e.getBoundingClientRect(),
          n = r.getComputedStyle(e),
          i = function i(e) {
        return parseFloat(n.getPropertyValue(e));
      },
          a = { left: i("padding-left"), right: i("padding-right"), top: i("padding-top"), bottom: i("padding-bottom") },
          o = { left: i("border-left-width"), right: i("border-right-width"), top: i("border-top-width"), bottom: i("border-bottom-width") },
          s = e.clientWidth,
          l = e.clientHeight,
          u = a.left + a.right,
          c = a.top + a.bottom,
          d = o.left + o.right,
          h = o.top + o.bottom,
          p = t.width / (s + d),
          f = s - u,
          v = l - c,
          g = (t.width, t.height, t.left + a.left + o.left),
          y = t.top + a.top + o.top;return this.containerBB = [g, y, f, v, p];
    }, o.invalidateContainerClientCoordsCache = function () {
      this.containerBB = null;
    }, o.findNearestElement = function (e, t, n, r) {
      return this.findNearestElements(e, t, n, r)[0];
    }, o.findNearestElements = function (e, t, n, r) {
      function o(e, t) {
        if (e.isNode()) {
          if (d) return;d = e, v.push(e);
        }if (e.isEdge() && (null == t || t < w)) if (c) {
          if (c.pstyle("z-index").value === e.pstyle("z-index").value) for (var n = 0; n < v.length; n++) {
            if (v[n].isEdge()) {
              v[n] = e, c = e, w = null != t ? t : w;break;
            }
          }
        } else v.push(e), c = e, w = null != t ? t : w;
      }function s(n) {
        var r = n.outerWidth() + 2 * b,
            i = n.outerHeight() + 2 * b,
            a = r / 2,
            s = i / 2,
            l = n.position();if (l.x - a <= e && e <= l.x + a && l.y - s <= t && t <= l.y + s) {
          if (p.nodeShapes[h.getNodeShape(n)].checkPoint(e, t, 0, r, i, l.x, l.y)) return o(n, 0), !0;
        }
      }function l(e, t, n) {
        return a.getPrefixedProperty(e, t, n);
      }function u(n, r) {
        var a,
            s = n._private,
            u = x;a = r ? r + "-" : "";var c = n.pstyle(a + "label").value;if ("yes" === n.pstyle("text-events").strValue && c) {
          var d = s.rstyle,
              h = n.pstyle("text-border-width").pfValue,
              p = n.pstyle("text-background-padding").pfValue,
              f = l(d, "labelWidth", r) + h + 2 * u + 2 * p,
              v = l(d, "labelHeight", r) + h + 2 * u + 2 * p,
              g = l(d, "labelX", r),
              y = l(d, "labelY", r),
              m = l(s.rscratch, "labelAngle", r),
              b = g - f / 2,
              w = g + f / 2,
              E = y - v / 2,
              P = y + v / 2;if (m) {
            var C = Math.cos(m),
                S = Math.sin(m),
                T = function T(e, t) {
              return e -= g, t -= y, { x: e * C - t * S + g, y: e * S + t * C + y };
            },
                D = T(b, E),
                k = T(b, P),
                _ = T(w, E),
                M = T(w, P),
                I = [D.x, D.y, _.x, _.y, M.x, M.y, k.x, k.y];if (i.pointInsidePolygonPoints(e, t, I)) return o(n), !0;
          } else {
            var N = { w: f, h: v, x1: b, x2: w, y1: E, y2: P };if (i.inBoundingBox(N, e, t)) return o(n), !0;
          }
        }
      }var c,
          d,
          h = this,
          p = this,
          f = p.getCachedZSortedEles(),
          v = [],
          g = p.cy.zoom(),
          y = p.cy.hasCompoundNodes(),
          m = (r ? 24 : 8) / g,
          b = (r ? 8 : 2) / g,
          x = (r ? 8 : 2) / g,
          w = 1 / 0;n && (f = f.interactive);for (var E = f.length - 1; E >= 0; E--) {
        var P = f[E];P.isNode() ? s(P) || u(P) : function (n) {
          var r,
              a = n._private,
              l = a.rscratch,
              u = n.pstyle("width").pfValue,
              c = n.pstyle("arrow-scale").value,
              d = u / 2 + m,
              f = d * d,
              g = 2 * d,
              b = a.source,
              x = a.target;if ("segments" === l.edgeType || "straight" === l.edgeType || "haystack" === l.edgeType) {
            for (var w = l.allpts, E = 0; E + 3 < w.length; E += 2) {
              if (i.inLineVicinity(e, t, w[E], w[E + 1], w[E + 2], w[E + 3], g) && f > (r = i.sqdistToFiniteLine(e, t, w[E], w[E + 1], w[E + 2], w[E + 3]))) return o(n, r), !0;
            }
          } else if ("bezier" === l.edgeType || "multibezier" === l.edgeType || "self" === l.edgeType || "compound" === l.edgeType) for (var w = l.allpts, E = 0; E + 5 < l.allpts.length; E += 4) {
            if (i.inBezierVicinity(e, t, w[E], w[E + 1], w[E + 2], w[E + 3], w[E + 4], w[E + 5], g) && f > (r = i.sqdistToQuadraticBezier(e, t, w[E], w[E + 1], w[E + 2], w[E + 3], w[E + 4], w[E + 5]))) return o(n, r), !0;
          }for (var b = b || a.source, x = x || a.target, P = h.getArrowWidth(u, c), C = [{ name: "source", x: l.arrowStartX, y: l.arrowStartY, angle: l.srcArrowAngle }, { name: "target", x: l.arrowEndX, y: l.arrowEndY, angle: l.tgtArrowAngle }, { name: "mid-source", x: l.midX, y: l.midY, angle: l.midsrcArrowAngle }, { name: "mid-target", x: l.midX, y: l.midY, angle: l.midtgtArrowAngle }], E = 0; E < C.length; E++) {
            var S = C[E],
                T = p.arrowShapes[n.pstyle(S.name + "-arrow-shape").value],
                D = n.pstyle("width").pfValue;if (T.roughCollide(e, t, P, S.angle, { x: S.x, y: S.y }, D, m) && T.collide(e, t, P, S.angle, { x: S.x, y: S.y }, D, m)) return o(n), !0;
          }y && v.length > 0 && (s(b), s(x));
        }(P) || u(P) || u(P, "source") || u(P, "target");
      }return v;
    }, o.getAllInBox = function (e, t, n, r) {
      var a = this.getCachedZSortedEles().interactive,
          o = [],
          s = Math.min(e, n),
          l = Math.max(e, n),
          u = Math.min(t, r),
          c = Math.max(t, r);e = s, n = l, t = u, r = c;for (var d = i.makeBoundingBox({ x1: e, y1: t, x2: n, y2: r }), h = 0; h < a.length; h++) {
        var p = a[h];if (p.isNode()) {
          var f = p,
              v = f.boundingBox({ includeNodes: !0, includeEdges: !1, includeLabels: !1 });i.boundingBoxesIntersect(d, v) && !i.boundingBoxInBoundingBox(v, d) && o.push(f);
        } else {
          var g = p,
              y = g._private,
              m = y.rscratch;if (null != m.startX && null != m.startY && !i.inBoundingBox(d, m.startX, m.startY)) continue;if (null != m.endX && null != m.endY && !i.inBoundingBox(d, m.endX, m.endY)) continue;if ("bezier" === m.edgeType || "multibezier" === m.edgeType || "self" === m.edgeType || "compound" === m.edgeType || "segments" === m.edgeType || "haystack" === m.edgeType) {
            for (var b = y.rstyle.bezierPts || y.rstyle.linePts || y.rstyle.haystackPts, x = !0, w = 0; w < b.length; w++) {
              if (!i.pointInBoundingBox(d, b[w])) {
                x = !1;break;
              }
            }x && o.push(g);
          } else "haystack" !== m.edgeType && "straight" !== m.edgeType || o.push(g);
        }
      }return o;
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = {};i.calculateArrowAngles = function (e) {
      var t,
          n,
          i,
          a,
          o,
          s,
          l,
          u,
          c = e._private.rscratch,
          d = "haystack" === c.edgeType,
          h = "bezier" === c.edgeType,
          p = "multibezier" === c.edgeType,
          f = "segments" === c.edgeType,
          v = "compound" === c.edgeType,
          g = "self" === c.edgeType;if (d ? (i = c.haystackPts[0], a = c.haystackPts[1], o = c.haystackPts[2], s = c.haystackPts[3]) : (i = c.arrowStartX, a = c.arrowStartY, o = c.arrowEndX, s = c.arrowEndY), l = c.midX, u = c.midY, f) t = i - c.segpts[0], n = a - c.segpts[1];else if (p || v || g || h) {
        var y = c.allpts,
            m = r.qbezierAt(y[0], y[2], y[4], .1),
            b = r.qbezierAt(y[1], y[3], y[5], .1);t = i - m, n = a - b;
      } else t = i - l, n = a - u;c.srcArrowAngle = r.getAngleFromDisp(t, n);var l = c.midX,
          u = c.midY;if (d && (l = (i + o) / 2, u = (a + s) / 2), t = o - i, n = s - a, f) {
        var y = c.allpts;if (y.length / 2 % 2 == 0) {
          var x = y.length / 2,
              w = x - 2;t = y[x] - y[w], n = y[x + 1] - y[w + 1];
        } else {
          var x = y.length / 2 - 1,
              w = x - 2,
              E = x + 2;t = y[x] - y[w], n = y[x + 1] - y[w + 1];
        }
      } else if (p || v || g) {
        var P,
            C,
            S,
            T,
            y = c.allpts,
            D = c.ctrlpts;if (D.length / 2 % 2 == 0) {
          var k = y.length / 2 - 1,
              _ = k + 2,
              M = _ + 2;P = r.qbezierAt(y[k], y[_], y[M], 0), C = r.qbezierAt(y[k + 1], y[_ + 1], y[M + 1], 0), S = r.qbezierAt(y[k], y[_], y[M], 1e-4), T = r.qbezierAt(y[k + 1], y[_ + 1], y[M + 1], 1e-4);
        } else {
          var _ = y.length / 2 - 1,
              k = _ - 2,
              M = _ + 2;P = r.qbezierAt(y[k], y[_], y[M], .4999), C = r.qbezierAt(y[k + 1], y[_ + 1], y[M + 1], .4999), S = r.qbezierAt(y[k], y[_], y[M], .5), T = r.qbezierAt(y[k + 1], y[_ + 1], y[M + 1], .5);
        }t = S - P, n = T - C;
      }if (c.midtgtArrowAngle = r.getAngleFromDisp(t, n), c.midDispX = t, c.midDispY = n, t *= -1, n *= -1, f) {
        var y = c.allpts;if (y.length / 2 % 2 == 0) ;else {
          var x = y.length / 2 - 1,
              E = x + 2;t = -(y[E] - y[x]), n = -(y[E + 1] - y[x + 1]);
        }
      }if (c.midsrcArrowAngle = r.getAngleFromDisp(t, n), f) t = o - c.segpts[c.segpts.length - 2], n = s - c.segpts[c.segpts.length - 1];else if (p || v || g || h) {
        var y = c.allpts,
            I = y.length,
            m = r.qbezierAt(y[I - 6], y[I - 4], y[I - 2], .9),
            b = r.qbezierAt(y[I - 5], y[I - 3], y[I - 1], .9);t = o - m, n = s - b;
      } else t = o - l, n = s - u;c.tgtArrowAngle = r.getAngleFromDisp(t, n);
    }, i.getArrowWidth = i.getArrowHeight = function (e, t) {
      var n = this.arrowWidthCache = this.arrowWidthCache || {},
          r = n[e + ", " + t];return r || (r = Math.max(Math.pow(13.37 * e, .9), 29) * t, n[e + ", " + t] = r, r);
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      var t = [];if (null != e) {
        for (var n = 0; n < e.length; n += 2) {
          var r = e[n],
              i = e[n + 1];t.push({ x: r, y: i });
        }return t;
      }
    }var i = n(2),
        a = n(0),
        o = {};o.findEdgeControlPoints = function (e) {
      if (e && 0 !== e.length) {
        for (var t, n = this, r = n.cy, o = r.hasCompoundNodes(), s = {}, l = [], u = [], c = 0; c < e.length; c++) {
          var d = e[c],
              h = d._private,
              p = h.data,
              f = d.pstyle("curve-style").value,
              v = "unbundled-bezier" === f || "segments" === f,
              g = "unbundled-bezier" === f || "bezier" === f;if ("none" !== d.pstyle("display").value) if ("haystack" !== f) {
            var y = p.source,
                m = p.target;t = y > m ? m + "$-$" + y : y + "$-$" + m, v && (t = "unbundled$-$" + p.id);var b = s[t];null == b && (b = s[t] = [], l.push(t)), b.push(d), v && (b.hasUnbundled = !0), g && (b.hasBezier = !0);
          } else u.push(d);
        }for (var x, w, E, P, C, S, T, D, k, _, M, I, N = 0; N < l.length; N++) {
          t = l[N];var B = s[t];if (B.sort(function (e, t) {
            return e.poolIndex() - t.poolIndex();
          }), x = B[0]._private.source, w = B[0]._private.target, !B.hasUnbundled && x.id() > w.id()) {
            var z = x;x = w, w = z;
          }E = x.position(), P = w.position(), C = x.outerWidth(), S = x.outerHeight(), T = w.outerWidth(), D = w.outerHeight(), k = n.nodeShapes[this.getNodeShape(x)], _ = n.nodeShapes[this.getNodeShape(w)], I = !1;for (var d, L, A, O = { north: 0, west: 0, south: 0, east: 0, northwest: 0, southwest: 0, northeast: 0, southeast: 0 }, R = E.x, V = E.y, q = C, F = S, j = P.x, X = P.y, Y = T, W = D, H = B.length, c = 0; c < B.length; c++) {
            d = B[c], L = d._private, A = L.rscratch;var Z = A.lastEdgeIndex,
                $ = c,
                U = A.lastNumEdges,
                f = d.pstyle("curve-style").value,
                v = "unbundled-bezier" === f || "segments" === f,
                G = x.id() !== d.source().id(),
                Q = d.pstyle("control-point-distances"),
                K = d.pstyle("loop-direction").pfValue,
                J = d.pstyle("loop-sweep").pfValue,
                ee = d.pstyle("control-point-weights"),
                te = Q && ee ? Math.min(Q.value.length, ee.value.length) : 1,
                ne = d.pstyle("control-point-step-size").pfValue,
                re = Q ? Q.pfValue[0] : void 0,
                ie = ee.value[0],
                ae = d.pstyle("edge-distances").value,
                oe = d.pstyle("segment-weights"),
                se = d.pstyle("segment-distances"),
                le = Math.min(oe.pfValue.length, se.pfValue.length),
                ue = d.pstyle("source-endpoint").value,
                ce = d.pstyle("target-endpoint").value,
                de = d.pstyle("source-arrow-shape").value,
                he = d.pstyle("target-arrow-shape").value,
                pe = d.pstyle("arrow-scale").value,
                fe = d.pstyle("width").pfValue,
                ve = A.lastSrcCtlPtX,
                ge = A.lastSrcCtlPtY,
                ye = A.lastSrcCtlPtW,
                me = A.lastSrcCtlPtH,
                be = A.lastTgtCtlPtX,
                xe = A.lastTgtCtlPtY,
                we = A.lastTgtCtlPtW,
                Ee = A.lastTgtCtlPtH,
                Pe = A.lastCurveStyle,
                Ce = f,
                Se = A.lastCtrlptDists,
                Te = Q ? Q.strValue : null,
                De = A.lastCtrlptWs,
                ke = ee.strValue,
                _e = A.lastSegmentWs,
                Me = oe.strValue,
                Ie = A.lastSegmentDs,
                Ne = se.strValue,
                Be = A.lastStepSize,
                ze = ne,
                Le = A.lastLoopDir,
                Ae = K,
                Oe = A.lastLoopSwp,
                Re = J,
                Ve = A.lastEdgeDistances,
                qe = ae,
                Fe = A.lastSrcEndpt,
                je = ue,
                Xe = A.lastTgtEndpt,
                Ye = ce,
                We = A.lastSrcArr,
                He = de,
                Ze = A.lastTgtArr,
                $e = he,
                Ue = A.lastLineW,
                Ge = fe,
                Qe = A.lastArrScl,
                Ke = pe;A.badBezier = !!I;var Je;if (ve === R && ge === V && ye === q && me === F && be === j && xe === X && we === Y && Ee === W && Pe === Ce && Se === Te && De === ke && _e === Me && Ie === Ne && Be === ze && Le === Ae && Oe === Re && Ve === qe && Fe === je && Xe === Ye && We === He && Ze === $e && Ue === Ge && Qe === Ke && (Z === $ && U === H || v) ? Je = !0 : (Je = !1, A.lastSrcCtlPtX = R, A.lastSrcCtlPtY = V, A.lastSrcCtlPtW = q, A.lastSrcCtlPtH = F, A.lastTgtCtlPtX = j, A.lastTgtCtlPtY = X, A.lastTgtCtlPtW = Y, A.lastTgtCtlPtH = W, A.lastEdgeIndex = $, A.lastNumEdges = H, A.lastCurveStyle = Ce, A.lastCtrlptDists = Te, A.lastCtrlptWs = ke, A.lastSegmentDs = Ne, A.lastSegmentWs = Me, A.lastStepSize = ze, A.lastLoopDir = Ae, A.lastLoopSwp = Re, A.lastEdgeDistances = qe, A.lastSrcEndpt = je, A.lastTgtEndpt = Ye, A.lastSrcArr = He, A.lastTgtArr = $e, A.lastLineW = Ge, A.lastArrScl = Ke), !Je) {
              if (!B.calculatedIntersection && x !== w && (B.hasBezier || B.hasUnbundled)) {
                B.calculatedIntersection = !0;var et = k.intersectLine(E.x, E.y, C, S, P.x, P.y, 0);B.srcIntn = et;var tt = _.intersectLine(P.x, P.y, T, D, E.x, E.y, 0);B.tgtIntn = tt;var nt = { x1: et[0], x2: tt[0], y1: et[1], y2: tt[1] },
                    rt = { x1: E.x, x2: P.x, y1: E.y, y2: P.y },
                    it = tt[1] - et[1],
                    at = tt[0] - et[0],
                    ot = Math.sqrt(at * at + it * it),
                    st = { x: at, y: it },
                    lt = { x: st.x / ot, y: st.y / ot };M = { x: -lt.y, y: lt.x }, _.checkPoint(et[0], et[1], 0, T, D, P.x, P.y) && k.checkPoint(tt[0], tt[1], 0, C, S, E.x, E.y) && (M = {}, I = !0);
              }if (G ? (A.srcIntn = B.tgtIntn, A.tgtIntn = B.srcIntn) : (A.srcIntn = B.srcIntn, A.tgtIntn = B.tgtIntn), x === w) {
                A.edgeType = "self";var ut = c,
                    ct = ne;v && (ut = 0, ct = re);var dt = K - Math.PI / 2,
                    ht = dt - J / 2,
                    pt = dt + J / 2,
                    ft = String(K + "_" + J);ut = void 0 === O[ft] ? O[ft] = 0 : ++O[ft], A.ctrlpts = [E.x + 1.4 * Math.cos(ht) * ct * (ut / 3 + 1), E.y + 1.4 * Math.sin(ht) * ct * (ut / 3 + 1), E.x + 1.4 * Math.cos(pt) * ct * (ut / 3 + 1), E.y + 1.4 * Math.sin(pt) * ct * (ut / 3 + 1)];
              } else if (o && (x.isParent() || x.isChild() || w.isParent() || w.isChild()) && (x.parents().anySame(w) || w.parents().anySame(x))) {
                A.edgeType = "compound", A.badBezier = !1;var ut = c,
                    ct = ne;v && (ut = 0, ct = re);var vt = { x: E.x - C / 2, y: E.y - S / 2 },
                    gt = { x: P.x - T / 2, y: P.y - D / 2 },
                    yt = { x: Math.min(vt.x, gt.x), y: Math.min(vt.y, gt.y) },
                    mt = Math.max(.5, Math.log(.01 * C)),
                    bt = Math.max(.5, Math.log(.01 * T));A.ctrlpts = [yt.x, yt.y - (1 + Math.pow(50, 1.12) / 100) * ct * (ut / 3 + 1) * mt, yt.x - (1 + Math.pow(50, 1.12) / 100) * ct * (ut / 3 + 1) * bt, yt.y];
              } else if ("segments" === f) {
                A.edgeType = "segments", A.segpts = [];for (var xt = 0; xt < le; xt++) {
                  var wt = oe.pfValue[xt],
                      Et = se.pfValue[xt],
                      Pt = 1 - wt,
                      Ct = wt,
                      St = "node-position" === ae ? rt : nt,
                      Tt = { x: St.x1 * Pt + St.x2 * Ct, y: St.y1 * Pt + St.y2 * Ct };A.segpts.push(Tt.x + M.x * Et, Tt.y + M.y * Et);
                }
              } else if (B.length % 2 != 1 || c !== Math.floor(B.length / 2) || v) {
                var Dt = v;A.edgeType = Dt ? "multibezier" : "bezier", A.ctrlpts = [];for (var kt = 0; kt < te; kt++) {
                  var _t,
                      Mt = (.5 - B.length / 2 + c) * ne,
                      It = i.signum(Mt);Dt && (re = Q ? Q.pfValue[kt] : ne, ie = ee.value[kt]), _t = v ? re : void 0 !== re ? It * re : void 0;var Nt = void 0 !== _t ? _t : Mt,
                      Pt = 1 - ie,
                      Ct = ie;if (G) {
                    var z = Pt;Pt = Ct, Ct = z;
                  }var St = "node-position" === ae ? rt : nt,
                      Tt = { x: St.x1 * Pt + St.x2 * Ct, y: St.y1 * Pt + St.y2 * Ct };A.ctrlpts.push(Tt.x + M.x * Nt, Tt.y + M.y * Nt);
                }
              } else A.edgeType = "straight";this.findEndpoints(d);var Bt = !a.number(A.startX) || !a.number(A.startY),
                  zt = !a.number(A.arrowStartX) || !a.number(A.arrowStartY),
                  Lt = !a.number(A.endX) || !a.number(A.endY),
                  At = !a.number(A.arrowEndX) || !a.number(A.arrowEndY),
                  Ot = this.getArrowWidth(d.pstyle("width").pfValue, d.pstyle("arrow-scale").value) * this.arrowShapeWidth,
                  Rt = 3 * Ot;if ("bezier" === A.edgeType) {
                var Vt = i.dist({ x: A.ctrlpts[0], y: A.ctrlpts[1] }, { x: A.startX, y: A.startY }),
                    qt = Vt < Rt,
                    Ft = i.dist({ x: A.ctrlpts[0], y: A.ctrlpts[1] }, { x: A.endX, y: A.endY }),
                    jt = Ft < Rt,
                    Xt = !1;if (Bt || zt || qt) {
                  Xt = !0;var Yt = { x: A.ctrlpts[0] - E.x, y: A.ctrlpts[1] - E.y },
                      Wt = Math.sqrt(Yt.x * Yt.x + Yt.y * Yt.y),
                      Ht = { x: Yt.x / Wt, y: Yt.y / Wt },
                      Zt = Math.max(C, S),
                      $t = { x: A.ctrlpts[0] + 2 * Ht.x * Zt, y: A.ctrlpts[1] + 2 * Ht.y * Zt },
                      Ut = k.intersectLine(E.x, E.y, C, S, $t.x, $t.y, 0);qt ? (A.ctrlpts[0] = A.ctrlpts[0] + Ht.x * (Rt - Vt), A.ctrlpts[1] = A.ctrlpts[1] + Ht.y * (Rt - Vt)) : (A.ctrlpts[0] = Ut[0] + Ht.x * Rt, A.ctrlpts[1] = Ut[1] + Ht.y * Rt);
                }if (Lt || At || jt) {
                  Xt = !0;var Yt = { x: A.ctrlpts[0] - P.x, y: A.ctrlpts[1] - P.y },
                      Wt = Math.sqrt(Yt.x * Yt.x + Yt.y * Yt.y),
                      Ht = { x: Yt.x / Wt, y: Yt.y / Wt },
                      Zt = Math.max(C, S),
                      $t = { x: A.ctrlpts[0] + 2 * Ht.x * Zt, y: A.ctrlpts[1] + 2 * Ht.y * Zt },
                      Gt = _.intersectLine(P.x, P.y, T, D, $t.x, $t.y, 0);jt ? (A.ctrlpts[0] = A.ctrlpts[0] + Ht.x * (Rt - Ft), A.ctrlpts[1] = A.ctrlpts[1] + Ht.y * (Rt - Ft)) : (A.ctrlpts[0] = Gt[0] + Ht.x * Rt, A.ctrlpts[1] = Gt[1] + Ht.y * Rt);
                }Xt && this.findEndpoints(d);
              }if ("multibezier" === A.edgeType || "bezier" === A.edgeType || "self" === A.edgeType || "compound" === A.edgeType) {
                A.allpts = [], A.allpts.push(A.startX, A.startY);for (var kt = 0; kt + 1 < A.ctrlpts.length; kt += 2) {
                  A.allpts.push(A.ctrlpts[kt], A.ctrlpts[kt + 1]), kt + 3 < A.ctrlpts.length && A.allpts.push((A.ctrlpts[kt] + A.ctrlpts[kt + 2]) / 2, (A.ctrlpts[kt + 1] + A.ctrlpts[kt + 3]) / 2);
                }A.allpts.push(A.endX, A.endY);var Qt, Kt;A.ctrlpts.length / 2 % 2 == 0 ? (Qt = A.allpts.length / 2 - 1, A.midX = A.allpts[Qt], A.midY = A.allpts[Qt + 1]) : (Qt = A.allpts.length / 2 - 3, Kt = .5, A.midX = i.qbezierAt(A.allpts[Qt], A.allpts[Qt + 2], A.allpts[Qt + 4], Kt), A.midY = i.qbezierAt(A.allpts[Qt + 1], A.allpts[Qt + 3], A.allpts[Qt + 5], Kt));
              } else if ("straight" === A.edgeType) A.allpts = [A.startX, A.startY, A.endX, A.endY], A.midX = (A.startX + A.endX + A.arrowStartX + A.arrowEndX) / 4, A.midY = (A.startY + A.endY + A.arrowStartY + A.arrowEndY) / 4;else if ("segments" === A.edgeType) if (A.allpts = [], A.allpts.push(A.startX, A.startY), A.allpts.push.apply(A.allpts, A.segpts), A.allpts.push(A.endX, A.endY), A.segpts.length % 4 == 0) {
                var Jt = A.segpts.length / 2,
                    en = Jt - 2;A.midX = (A.segpts[en] + A.segpts[Jt]) / 2, A.midY = (A.segpts[en + 1] + A.segpts[Jt + 1]) / 2;
              } else {
                var en = A.segpts.length / 2 - 1;A.midX = A.segpts[en], A.midY = A.segpts[en + 1];
              }this.storeEdgeProjections(d), this.calculateArrowAngles(d);
            }this.recalculateEdgeLabelProjections(d), this.calculateLabelAngles(d);
          }
        }for (var c = 0; c < u.length; c++) {
          var d = u[c],
              h = d._private,
              tn = h.rscratch,
              A = tn;if (!tn.haystack) {
            var nn = 2 * Math.random() * Math.PI;tn.source = { x: Math.cos(nn), y: Math.sin(nn) };var nn = 2 * Math.random() * Math.PI;tn.target = { x: Math.cos(nn), y: Math.sin(nn) };
          }var x = h.source,
              w = h.target,
              E = x.position(),
              P = w.position(),
              C = x.width(),
              T = w.width(),
              S = x.height(),
              D = w.height(),
              Zt = d.pstyle("haystack-radius").value,
              rn = Zt / 2;A.haystackPts = A.allpts = [A.source.x * C * rn + E.x, A.source.y * S * rn + E.y, A.target.x * T * rn + P.x, A.target.y * D * rn + P.y], A.midX = (A.allpts[0] + A.allpts[2]) / 2, A.midY = (A.allpts[1] + A.allpts[3]) / 2, tn.edgeType = tn.lastCurveStyle = "haystack", tn.haystack = !0, this.storeEdgeProjections(d), this.calculateArrowAngles(d), this.recalculateEdgeLabelProjections(d), this.calculateLabelAngles(d);
        }
      }
    }, o.getSegmentPoints = function (e) {
      var t = e[0]._private.rscratch;if ("segments" === t.edgeType) return r(t.segpts);
    }, o.getControlPoints = function (e) {
      var t = e[0]._private.rscratch,
          n = t.edgeType;if ("bezier" === n || "multibezier" === n || "self" === n || "compound" === n) return r(t.ctrlpts);
    }, o.getEdgeMidpoint = function (e) {
      var t = e[0]._private.rscratch;return { x: t.midX, y: t.midY };
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = n(0),
        a = {};a.manualEndptToPx = function (e, t) {
      var n = this,
          r = e.position(),
          i = e.outerWidth(),
          a = e.outerHeight();if (2 === t.value.length) {
        var o = [t.pfValue[0], t.pfValue[1]];return "%" === t.units[0] && (o[0] = o[0] * i), "%" === t.units[1] && (o[1] = o[1] * a), o[0] += r.x, o[1] += r.y, o;
      }var s = t.pfValue[0];s = -Math.PI / 2 + s;var l = 2 * Math.max(i, a),
          u = [r.x + Math.cos(s) * l, r.y + Math.sin(s) * l];return n.nodeShapes[this.getNodeShape(e)].intersectLine(r.x, r.y, i, a, u[0], u[1], 0);
    }, a.findEndpoints = function (e) {
      var t = this,
          n = void 0,
          a = e.source()[0],
          o = e.target()[0],
          s = a.position(),
          l = o.position(),
          u = e.pstyle("target-arrow-shape").value,
          c = e.pstyle("source-arrow-shape").value,
          d = e.pstyle("target-distance-from-node").pfValue,
          h = e.pstyle("source-distance-from-node").pfValue,
          p = e._private.rscratch,
          f = p.edgeType,
          v = "self" === f || "compound" === f,
          g = "bezier" === f || "multibezier" === f || v,
          y = "bezier" !== f,
          m = "straight" === f || "segments" === f,
          b = "segments" === f,
          x = g || y || m,
          w = e.pstyle("source-endpoint"),
          E = v ? "outside-to-node" : w.value,
          P = e.pstyle("target-endpoint"),
          C = v ? "outside-to-node" : P.value;p.srcManEndpt = w, p.tgtManEndpt = P;var S = void 0,
          T = void 0,
          D = void 0,
          k = void 0;if (g) {
        var _ = [p.ctrlpts[0], p.ctrlpts[1]];S = y ? [p.ctrlpts[p.ctrlpts.length - 2], p.ctrlpts[p.ctrlpts.length - 1]] : _, T = _;
      } else if (m) {
        var M = b ? p.segpts.slice(0, 2) : [l.x, l.y],
            I = b ? p.segpts.slice(p.segpts.length - 2) : [s.x, s.y];S = I, T = M;
      }"inside-to-node" === C ? n = [l.x, l.y] : P.units ? n = this.manualEndptToPx(o, P) : "outside-to-line" === C ? n = p.tgtIntn : ("outside-to-node" === C ? D = S : "outside-to-line" === C && (D = [s.x, s.y]), n = t.nodeShapes[this.getNodeShape(o)].intersectLine(l.x, l.y, o.outerWidth(), o.outerHeight(), D[0], D[1], 0));var N = r.shortenIntersection(n, S, t.arrowShapes[u].spacing(e) + d),
          B = r.shortenIntersection(n, S, t.arrowShapes[u].gap(e) + d);p.endX = B[0], p.endY = B[1], p.arrowEndX = N[0], p.arrowEndY = N[1], "inside-to-node" === E ? n = [s.x, s.y] : w.units ? n = this.manualEndptToPx(a, w) : "outside-to-line" === E ? n = p.srcIntn : ("outside-to-node" === E ? k = T : "outside-to-line" === E && (k = [l.x, l.y]), n = t.nodeShapes[this.getNodeShape(a)].intersectLine(s.x, s.y, a.outerWidth(), a.outerHeight(), k[0], k[1], 0));var z = r.shortenIntersection(n, T, t.arrowShapes[c].spacing(e) + h),
          L = r.shortenIntersection(n, T, t.arrowShapes[c].gap(e) + h);p.startX = L[0], p.startY = L[1], p.arrowStartX = z[0], p.arrowStartY = z[1], x && (i.number(p.startX) && i.number(p.startY) && i.number(p.endX) && i.number(p.endY) ? p.badLine = !1 : p.badLine = !0);
    }, a.getSourceEndpoint = function (e) {
      var t = e[0]._private.rscratch;switch (t.edgeType) {case "haystack":
          return { x: t.haystackPts[0], y: t.haystackPts[1] };default:
          return { x: t.arrowStartX, y: t.arrowStartY };}
    }, a.getTargetEndpoint = function (e) {
      var t = e[0]._private.rscratch;switch (t.edgeType) {case "haystack":
          return { x: t.haystackPts[2], y: t.haystackPts[3] };default:
          return { x: t.arrowEndX, y: t.arrowEndY };}
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n) {
      for (var r = function r(e, t, n, _r) {
        return i.qbezierAt(e, t, n, _r);
      }, a = t._private, o = a.rstyle.bezierPts, s = 0; s < e.bezierProjPcts.length; s++) {
        var l = e.bezierProjPcts[s];o.push({ x: r(n[0], n[2], n[4], l), y: r(n[1], n[3], n[5], l) });
      }
    }var i = n(2),
        a = {};a.storeEdgeProjections = function (e) {
      var t = e._private,
          n = t.rscratch,
          i = n.edgeType;if (t.rstyle.bezierPts = null, t.rstyle.linePts = null, t.rstyle.haystackPts = null, "multibezier" === i || "bezier" === i || "self" === i || "compound" === i) for (var a = (t.rstyle.bezierPts = [], 0); a + 5 < n.allpts.length; a += 4) {
        r(this, e, n.allpts.slice(a, a + 6));
      } else if ("segments" === i) for (var o = t.rstyle.linePts = [], a = 0; a + 1 < n.allpts.length; a += 2) {
        o.push({ x: n.allpts[a], y: n.allpts[a + 1] });
      } else if ("haystack" === i) {
        var s = n.haystackPts;t.rstyle.haystackPts = [{ x: s[0], y: s[1] }, { x: s[2], y: s[3] }];
      }t.rstyle.arrowWidth = this.getArrowWidth(e.pstyle("width").pfValue, e.pstyle("arrow-scale").value) * this.arrowShapeWidth;
    }, a.recalculateEdgeProjections = function (e) {
      this.findEdgeControlPoints(e);
    }, e.exports = a;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = n(0),
        a = n(1),
        o = {};o.recalculateNodeLabelProjection = function (e) {
      var t = e.pstyle("label").strValue;if (!i.emptyString(t)) {
        var n,
            r,
            a = e._private,
            o = e.width(),
            s = e.height(),
            l = e.padding(),
            u = e.position(),
            c = e.pstyle("text-halign").strValue,
            d = e.pstyle("text-valign").strValue,
            h = a.rscratch,
            p = a.rstyle;switch (c) {case "left":
            n = u.x - o / 2 - l;break;case "right":
            n = u.x + o / 2 + l;break;default:
            n = u.x;}switch (d) {case "top":
            r = u.y - s / 2 - l;break;case "bottom":
            r = u.y + s / 2 + l;break;default:
            r = u.y;}h.labelX = n, h.labelY = r, p.labelX = n, p.labelY = r, this.applyLabelDimensions(e);
      }
    }, o.recalculateEdgeLabelProjections = function (e) {
      var t,
          n = e._private,
          i = n.rscratch,
          o = this,
          s = { mid: e.pstyle("label").strValue, source: e.pstyle("source-label").strValue, target: e.pstyle("target-label").strValue };if (s.mid || s.source || s.target) {
        t = { x: i.midX, y: i.midY };var l = function l(e, t, r) {
          a.setPrefixedProperty(n.rscratch, e, t, r), a.setPrefixedProperty(n.rstyle, e, t, r);
        };l("labelX", null, t.x), l("labelY", null, t.y);var u = function e() {
          function t(e, t, n, i, a) {
            var o = r.dist(t, n),
                s = e.segments[e.segments.length - 1],
                l = { p0: t, p1: n, t0: i, t1: a, startDist: s ? s.startDist + s.length : 0, length: o };e.segments.push(l), e.length += o;
          }if (e.cache) return e.cache;for (var a = [], s = 0; s + 5 < i.allpts.length; s += 4) {
            var l = { x: i.allpts[s], y: i.allpts[s + 1] },
                u = { x: i.allpts[s + 2], y: i.allpts[s + 3] },
                c = { x: i.allpts[s + 4], y: i.allpts[s + 5] };a.push({ p0: l, p1: u, p2: c, startDist: 0, length: 0, segments: [] });
          }for (var d = n.rstyle.bezierPts, h = o.bezierProjPcts.length, s = 0; s < a.length; s++) {
            var p = a[s],
                f = a[s - 1];f && (p.startDist = f.startDist + f.length), t(p, p.p0, d[s * h], 0, o.bezierProjPcts[0]);for (var v = 0; v < h - 1; v++) {
              t(p, d[s * h + v], d[s * h + v + 1], o.bezierProjPcts[v], o.bezierProjPcts[v + 1]);
            }t(p, d[s * h + h - 1], p.p2, o.bezierProjPcts[h - 1], 1);
          }return e.cache = a;
        },
            c = function c(n) {
          var a,
              o = "source" === n;if (s[n]) {
            var c = e.pstyle(n + "-text-offset").pfValue,
                d = function d(e, t) {
              var n = t.x - e.x,
                  r = t.y - e.y;return Math.atan(r / n);
            };switch (i.edgeType) {case "self":case "compound":case "bezier":case "multibezier":
                for (var h, p = u(), f = 0, v = 0, g = 0; g < p.length; g++) {
                  for (var y = p[o ? g : p.length - 1 - g], m = 0; m < y.segments.length; m++) {
                    var b = y.segments[o ? m : y.segments.length - 1 - m],
                        x = g === p.length - 1 && m === y.segments.length - 1;if (f = v, (v += b.length) >= c || x) {
                      h = { cp: y, segment: b };break;
                    }
                  }if (h) break;
                }var y = h.cp,
                    b = h.segment,
                    w = (c - f) / b.length,
                    E = b.t1 - b.t0,
                    P = o ? b.t0 + E * w : b.t1 - E * w;P = r.bound(0, P, 1), t = r.qbezierPtAt(y.p0, y.p1, y.p2, P), a = function (e, t, n, i) {
                  var a = r.bound(0, i - .001, 1),
                      o = r.bound(0, i + .001, 1),
                      s = r.qbezierPtAt(e, t, n, a),
                      l = r.qbezierPtAt(e, t, n, o);return d(s, l);
                }(y.p0, y.p1, y.p2, P);break;case "straight":case "segments":case "haystack":
                for (var C, S, T, D, k = 0, _ = i.allpts.length, g = 0; g + 3 < _ && (o ? (T = { x: i.allpts[g], y: i.allpts[g + 1] }, D = { x: i.allpts[g + 2], y: i.allpts[g + 3] }) : (T = { x: i.allpts[_ - 2 - g], y: i.allpts[_ - 1 - g] }, D = { x: i.allpts[_ - 4 - g], y: i.allpts[_ - 3 - g] }), C = r.dist(T, D), S = k, !((k += C) >= c)); g += 2) {}var M = c - S,
                    P = M / C;P = r.bound(0, P, 1), t = r.lineAt(T, D, P), a = d(T, D);}l("labelX", n, t.x), l("labelY", n, t.y), l("labelAutoAngle", n, a);
          }
        };c("source"), c("target"), this.applyLabelDimensions(e);
      }
    }, o.applyLabelDimensions = function (e) {
      this.applyPrefixedLabelDimensions(e), e.isEdge() && (this.applyPrefixedLabelDimensions(e, "source"), this.applyPrefixedLabelDimensions(e, "target"));
    }, o.applyPrefixedLabelDimensions = function (e, t) {
      var n = e._private,
          r = this.getLabelText(e, t),
          i = this.calculateLabelDimensions(e, r);a.setPrefixedProperty(n.rstyle, "labelWidth", t, i.width), a.setPrefixedProperty(n.rscratch, "labelWidth", t, i.width), a.setPrefixedProperty(n.rstyle, "labelHeight", t, i.height), a.setPrefixedProperty(n.rscratch, "labelHeight", t, i.height);
    }, o.getLabelText = function (e, t) {
      var n = e._private,
          r = t ? t + "-" : "",
          i = e.pstyle(r + "label").strValue,
          o = e.pstyle("text-transform").value,
          s = function s(e, r) {
        return r ? (a.setPrefixedProperty(n.rscratch, e, t, r), r) : a.getPrefixedProperty(n.rscratch, e, t);
      };"none" == o || ("uppercase" == o ? i = i.toUpperCase() : "lowercase" == o && (i = i.toLowerCase()));var l = e.pstyle("text-wrap").value;if ("wrap" === l) {
        var u = s("labelKey");if (u && s("labelWrapKey") === u) return s("labelWrapCachedText");for (var c = i.split("\n"), d = e.pstyle("text-max-width").pfValue, h = [], p = 0; p < c.length; p++) {
          var f = c[p];if (this.calculateLabelDimensions(e, f, "line=" + f).width > d) {
            for (var v = f.split(/\s+/), g = "", y = 0; y < v.length; y++) {
              var m = v[y],
                  b = 0 === g.length ? m : g + " " + m;this.calculateLabelDimensions(e, b, "testLine=" + b).width <= d ? g += m + " " : (h.push(g), g = m + " ");
            }g.match(/^\s+$/) || h.push(g);
          } else h.push(f);
        }s("labelWrapCachedLines", h), i = s("labelWrapCachedText", h.join("\n")), s("labelWrapKey", u);
      } else if ("ellipsis" === l) {
        for (var d = e.pstyle("text-max-width").pfValue, x = "", w = !1, E = 0; E < i.length; E++) {
          var P = this.calculateLabelDimensions(e, x + i[E] + "…").width;if (P > d) break;x += i[E], E === i.length - 1 && (w = !0);
        }return w || (x += "…"), x;
      }return i;
    }, o.calculateLabelDimensions = function (e, t, n) {
      var r = this,
          i = e._private.labelStyleKey + "$@$" + t;n && (i += "$@$" + n);var a = r.labelDimCache || (r.labelDimCache = {});if (a[i]) return a[i];var o = e.pstyle("font-style").strValue,
          s = 1 * e.pstyle("font-size").pfValue + "px",
          l = e.pstyle("font-family").strValue,
          u = e.pstyle("font-weight").strValue,
          c = this.labelCalcDiv;c || (c = this.labelCalcDiv = document.createElement("div"), document.body.appendChild(c));var d = c.style;return d.fontFamily = l, d.fontStyle = o, d.fontSize = s, d.fontWeight = u, d.position = "absolute", d.left = "-9999px", d.top = "-9999px", d.zIndex = "-1", d.visibility = "hidden", d.pointerEvents = "none", d.padding = "0", d.lineHeight = "1", "wrap" === e.pstyle("text-wrap").value ? d.whiteSpace = "pre" : d.whiteSpace = "normal", c.textContent = t, a[i] = { width: Math.ceil(c.clientWidth / 1), height: Math.ceil(c.clientHeight / 1) }, a[i];
    }, o.calculateLabelAngles = function (e) {
      var t = e._private,
          n = t.rscratch,
          r = e.isEdge(),
          i = e.pstyle("text-rotation"),
          a = i.strValue;"none" === a ? n.labelAngle = n.sourceLabelAngle = n.targetLabelAngle = 0 : r && "autorotate" === a ? (n.labelAngle = Math.atan(n.midDispY / n.midDispX), n.sourceLabelAngle = n.sourceLabelAutoAngle, n.targetLabelAngle = n.targetLabelAutoAngle) : n.labelAngle = n.sourceLabelAngle = n.targetLabelAngle = "autorotate" === a ? 0 : i.pfValue;
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.getNodeShape = function (e) {
      var t = this,
          n = e.pstyle("shape").value;if (e.isParent()) return "rectangle" === n || "roundrectangle" === n || "cutrectangle" === n || "barrel" === n ? n : "rectangle";if ("polygon" === n) {
        var r = e.pstyle("shape-polygon-points").value;return t.nodeShapes.makePolygon(r).name;
      }return n;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.registerCalculationListeners = function () {
      var e = this.cy,
          t = e.collection(),
          n = this,
          r = function r(e, n) {
        var r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];t.merge(e);for (var i = 0; i < e.length; i++) {
          var a = e[i],
              o = a._private,
              s = o.rstyle;r && (s.clean = !1, o.bbCache = null);var l = s.dirtyEvents = s.dirtyEvents || { length: 0 };l[n.type] || (l[n.type] = !0, l.length++);
        }
      };n.binder(e).on("position.* style.* free.* bounds.*", "node", function (e) {
        var t = e.target;r(t, e), r(t.connectedEdges(), e);
      }).on("add.*", "node", function (e) {
        var t = e.target;r(t, e);
      }).on("background.*", "node", function (e) {
        var t = e.target;r(t, e, !1);
      }).on("add.* style.*", "edge", function (e) {
        var t = e.target;r(t, e), r(t.parallelEdges(), e);
      }).on("remove.*", "edge", function (e) {
        for (var t = e.target, n = t.parallelEdges(), i = 0; i < n.length; i++) {
          var a = n[i];a.removed() || r(a, e);
        }
      }).on("dirty.*", "node", function (e) {
        var t = e.target;r(t, e);
      });var i = function i(r) {
        if (r) {
          var i = n.onUpdateEleCalcsFns;if (i) for (var a = 0; a < i.length; a++) {
            var o = i[a];o(r, t);
          }n.recalculateRenderedStyle(t, !1);for (var a = 0; a < t.length; a++) {
            t[a]._private.rstyle.dirtyEvents = null;
          }t = e.collection();
        }
      };n.beforeRender(i, n.beforeRenderPriorities.eleCalcs);
    }, r.onUpdateEleCalcs = function (e) {
      (this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || []).push(e);
    }, r.recalculateRenderedStyle = function (e, t) {
      var n = [],
          r = [];if (!this.destroyed) {
        void 0 === t && (t = !0);for (var i = 0; i < e.length; i++) {
          var a = e[i],
              o = a._private,
              s = o.rstyle;t && s.clean || a.removed() || "none" !== a.pstyle("display").value && ("nodes" === o.group ? r.push(a) : n.push(a), s.clean = !0);
        }for (var i = 0; i < r.length; i++) {
          var a = r[i],
              o = a._private,
              s = o.rstyle,
              l = a.position();this.recalculateNodeLabelProjection(a), s.nodeX = l.x, s.nodeY = l.y, s.nodeW = a.pstyle("width").pfValue, s.nodeH = a.pstyle("height").pfValue;
        }this.recalculateEdgeProjections(n);for (var i = 0; i < n.length; i++) {
          var a = n[i],
              o = a._private,
              s = o.rstyle,
              u = o.rscratch;this.recalculateEdgeLabelProjections(a), s.srcX = u.arrowStartX, s.srcY = u.arrowStartY, s.tgtX = u.arrowEndX, s.tgtY = u.arrowEndY, s.midX = u.midX, s.midY = u.midY, s.labelAngle = u.labelAngle, s.sourceLabelAngle = u.sourceLabelAngle, s.targetLabelAngle = u.targetLabelAngle;
        }
      }
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(17),
        i = {};i.updateCachedGrabbedEles = function () {
      var e = this.cachedZSortedEles;if (e) {
        e.drag = [], e.nondrag = [];for (var t = [], n = 0; n < e.length; n++) {
          var r = e[n],
              i = r._private.rscratch;r.grabbed() && !r.isParent() ? t.push(r) : i.inDragLayer ? e.drag.push(r) : e.nondrag.push(r);
        }for (var n = 0; n < t.length; n++) {
          var r = t[n];e.drag.push(r);
        }
      }
    }, i.invalidateCachedZSortedEles = function () {
      this.cachedZSortedEles = null;
    }, i.getCachedZSortedEles = function (e) {
      if (e || !this.cachedZSortedEles) {
        var t = this.cy.mutableElements().toArray();t.sort(r), t.interactive = t.filter(function (e) {
          return e.interactive();
        }), this.cachedZSortedEles = t, this.updateCachedGrabbedEles();
      } else t = this.cachedZSortedEles;return t;
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.getCachedImage = function (e, t, n) {
      var r = this,
          i = r.imageCache = r.imageCache || {},
          a = i[e];if (a) return a.image.complete || a.image.addEventListener("load", n), a.image;a = i[e] = i[e] || {};var o = a.image = new Image();o.addEventListener("load", n), o.addEventListener("error", function () {
        o.error = !0;
      });return "data:" === e.substring(0, "data:".length).toLowerCase() || (o.crossOrigin = t), o.src = e, o;
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(2),
        o = (n(16), {});o.registerBinding = function (e, t, n, r) {
      var i = Array.prototype.slice.apply(arguments, [1]),
          a = this.binder(e);return a.on.apply(a, i);
    }, o.binder = function (e) {
      var t = this,
          n = e === window || e === document || e === document.body || r.domElement(e);if (null == t.supportsPassiveEvents) {
        var i = !1;try {
          var a = Object.defineProperty({}, "passive", { get: function get() {
              i = !0;
            } });window.addEventListener("test", null, a);
        } catch (e) {}t.supportsPassiveEvents = i;
      }var o = function o(r, i, a) {
        var o = Array.prototype.slice.call(arguments);return n && t.supportsPassiveEvents && (o[2] = { capture: null != a && a, passive: !1, once: !1 }), t.bindings.push({ target: e, args: o }), (e.addEventListener || e.on).apply(e, o), this;
      };return { on: o, addEventListener: o, addListener: o, bind: o };
    }, o.nodeIsDraggable = function (e) {
      return e && e.isNode() && !e.locked() && e.grabbable();
    }, o.nodeIsGrabbable = function (e) {
      return this.nodeIsDraggable(e) && e.interactive();
    }, o.load = function () {
      var e = this,
          t = function t(_t3, n, r, a) {
        null == _t3 && (_t3 = e.cy);for (var o = 0; o < n.length; o++) {
          var s = n[o];_t3.emit(i.extend({ originalEvent: r, type: s }, a));
        }
      },
          n = function n(e) {
        return e.shiftKey || e.metaKey || e.ctrlKey;
      },
          o = function o(t, n) {
        var r = !0;if (e.cy.hasCompoundNodes() && t && t.isEdge()) for (var i = 0; n && i < n.length; i++) {
          var t = n[i];if (t.isNode() && t.isParent()) {
            r = !1;break;
          }
        } else r = !0;return r;
      },
          s = function s(t) {
        var n;if (t.addToList && e.cy.hasCompoundNodes()) {
          if (!t.addToList.hasId) {
            t.addToList.hasId = {};for (var r = 0; r < t.addToList.length; r++) {
              var i = t.addToList[r];t.addToList.hasId[i.id()] = !0;
            }
          }n = t.addToList.hasId;
        }return n || {};
      },
          l = function l(e) {
        e[0]._private.grabbed = !0;
      },
          u = function u(e) {
        e[0]._private.grabbed = !1;
      },
          c = function c(e) {
        e[0]._private.rscratch.inDragLayer = !0;
      },
          d = function d(e) {
        e[0]._private.rscratch.inDragLayer = !1;
      },
          h = function h(e) {
        e[0]._private.rscratch.isGrabTarget = !0;
      },
          p = function p(e) {
        e[0]._private.rscratch.isGrabTarget = !1;
      },
          f = function f(e, t) {
        var n = s(t);n[e.id()] || (t.addToList.push(e), n[e.id()] = !0, l(e));
      },
          v = function v(e, t) {
        if (e.cy().hasCompoundNodes() && (null != t.inDragLayer || null != t.addToList)) {
          var n = e.descendants();t.inDragLayer && (n.forEach(c), n.connectedEdges().forEach(c)), t.addToList && n.forEach(function (e) {
            f(e, t);
          });
        }
      },
          g = function g(t, n) {
        n = n || {};var r = t.cy().hasCompoundNodes();n.inDragLayer && (t.forEach(c), t.neighborhood().stdFilter(function (e) {
          return !r || e.isEdge();
        }).forEach(c)), n.addToList && t.forEach(function (e) {
          f(e, n);
        }), v(t, n), b(t, { inDragLayer: n.inDragLayer }), e.updateCachedGrabbedEles();
      },
          y = g,
          m = function m(t) {
        t && (t.hasId = {}, e.getCachedZSortedEles().forEach(function (e) {
          u(e), d(e), p(e);
        }), e.updateCachedGrabbedEles());
      },
          b = function b(e, t) {
        if ((null != t.inDragLayer || null != t.addToList) && e.cy().hasCompoundNodes()) {
          var n = e.ancestors().orphans();if (!n.same(e)) {
            var r = n.descendants().spawnSelf().merge(n).unmerge(e).unmerge(e.descendants()),
                i = r.connectedEdges();t.inDragLayer && (i.forEach(c), r.forEach(c)), t.addToList && r.forEach(function (e) {
              f(e, t);
            });
          }
        }
      },
          x = "undefined" != typeof MutationObserver;x ? (e.removeObserver = new MutationObserver(function (t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n],
              i = r.removedNodes;if (i) for (var a = 0; a < i.length; a++) {
            var o = i[a];if (o === e.container) {
              e.destroy();break;
            }
          }
        }
      }), e.container.parentNode && e.removeObserver.observe(e.container.parentNode, { childList: !0 })) : e.registerBinding(e.container, "DOMNodeRemoved", function (t) {
        e.destroy();
      });var w = i.debounce(function () {
        e.cy.resize();
      }, 100);x && (e.styleObserver = new MutationObserver(w), e.styleObserver.observe(e.container, { attributes: !0 })), e.registerBinding(window, "resize", w);var E = function E() {
        e.invalidateContainerClientCoordsCache();
      };!function (e, t) {
        for (; null != e;) {
          t(e), e = e.parentNode;
        }
      }(e.container, function (t) {
        e.registerBinding(t, "transitionend", E), e.registerBinding(t, "animationend", E), e.registerBinding(t, "scroll", E);
      }), e.registerBinding(e.container, "contextmenu", function (e) {
        e.preventDefault();
      });var P = function P() {
        return 0 !== e.selection[4];
      },
          C = function C(t) {
        for (var n = e.findContainerClientCoords(), r = n[0], i = n[1], a = n[2], o = n[3], s = t.touches ? t.touches : [t], l = !1, u = 0; u < s.length; u++) {
          var c = s[u];if (r <= c.clientX && c.clientX <= r + a && i <= c.clientY && c.clientY <= i + o) {
            l = !0;break;
          }
        }if (!l) return !1;for (var d = e.container, h = t.target, p = h.parentNode, f = !1; p;) {
          if (p === d) {
            f = !0;break;
          }p = p.parentNode;
        }return !!f;
      };e.registerBinding(e.container, "mousedown", function (n) {
        if (C(n)) {
          n.preventDefault(), e.hoverData.capture = !0, e.hoverData.which = n.which;var r = e.cy,
              i = [n.clientX, n.clientY],
              a = e.projectIntoViewport(i[0], i[1]),
              o = e.selection,
              s = e.findNearestElements(a[0], a[1], !0, !1),
              l = s[0],
              u = e.dragData.possibleDragElements;e.hoverData.mdownPos = a, e.hoverData.mdownGPos = i;if (3 == n.which) {
            e.hoverData.cxtStarted = !0;var c = { originalEvent: n, type: "cxttapstart", position: { x: a[0], y: a[1] } };l ? (l.activate(), l.emit(c), e.hoverData.down = l) : r.emit(c), e.hoverData.downTime = new Date().getTime(), e.hoverData.cxtDragged = !1;
          } else if (1 == n.which) {
            if (l && l.activate(), null != l && e.nodeIsGrabbable(l)) {
              var d = function d(e) {
                return { originalEvent: n, type: e, position: { x: a[0], y: a[1] } };
              },
                  p = function p(e) {
                e.emit(d("grab"));
              };if (h(l), l.selected()) {
                u = e.dragData.possibleDragElements = [];var f = r.$(function (t) {
                  return t.isNode() && t.selected() && e.nodeIsGrabbable(t);
                });g(f, { addToList: u }), l.emit(d("grabon")), f.forEach(p);
              } else u = e.dragData.possibleDragElements = [], y(l, { addToList: u }), l.emit(d("grabon")).emit(d("grab"));e.redrawHint("eles", !0), e.redrawHint("drag", !0);
            }e.hoverData.down = l, e.hoverData.downs = s, e.hoverData.downTime = new Date().getTime(), t(l, ["mousedown", "tapstart", "vmousedown"], n, { position: { x: a[0], y: a[1] } }), null == l ? (o[4] = 1, e.data.bgActivePosistion = { x: a[0], y: a[1] }, e.redrawHint("select", !0), e.redraw()) : l.isEdge() && (o[4] = 1), function () {
              e.hoverData.tapholdCancelled = !1, clearTimeout(e.hoverData.tapholdTimeout), e.hoverData.tapholdTimeout = setTimeout(function () {
                if (!e.hoverData.tapholdCancelled) {
                  var t = e.hoverData.down;t ? t.emit({ originalEvent: n, type: "taphold", position: { x: a[0], y: a[1] } }) : r.emit({ originalEvent: n, type: "taphold", position: { x: a[0], y: a[1] } });
                }
              }, e.tapholdDuration);
            }();
          }o[0] = o[2] = a[0], o[1] = o[3] = a[1];
        }
      }, !1), e.registerBinding(window, "mousemove", function (i) {
        if (e.hoverData.capture || C(i)) {
          var s = !1,
              l = e.cy,
              u = l.zoom(),
              c = [i.clientX, i.clientY],
              d = e.projectIntoViewport(c[0], c[1]),
              h = e.hoverData.mdownPos,
              p = e.hoverData.mdownGPos,
              f = e.selection,
              v = null;e.hoverData.draggingEles || e.hoverData.dragging || e.hoverData.selecting || (v = e.findNearestElement(d[0], d[1], !0, !1));var y,
              b = e.hoverData.last,
              x = e.hoverData.down,
              w = [d[0] - f[2], d[1] - f[3]],
              E = e.dragData.possibleDragElements;if (p) {
            var P = c[0] - p[0],
                S = P * P,
                T = c[1] - p[1],
                D = T * T,
                k = S + D;e.hoverData.isOverThresholdDrag = y = k >= e.desktopTapThreshold2;
          }var _ = n(i);y && (e.hoverData.tapholdCancelled = !0), s = !0, t(v, ["mousemove", "vmousemove", "tapdrag"], i, { position: { x: d[0], y: d[1] } });var M = function M() {
            e.data.bgActivePosistion = void 0, e.hoverData.selecting || l.emit("boxstart"), f[4] = 1, e.hoverData.selecting = !0, e.redrawHint("select", !0), e.redraw();
          };if (3 === e.hoverData.which) {
            if (y) {
              var I = { originalEvent: i, type: "cxtdrag", position: { x: d[0], y: d[1] } };x ? x.emit(I) : l.emit(I), e.hoverData.cxtDragged = !0, e.hoverData.cxtOver && v === e.hoverData.cxtOver || (e.hoverData.cxtOver && e.hoverData.cxtOver.emit({ originalEvent: i, type: "cxtdragout", position: { x: d[0], y: d[1] } }), e.hoverData.cxtOver = v, v && v.emit({ originalEvent: i, type: "cxtdragover", position: { x: d[0], y: d[1] } }));
            }
          } else if (e.hoverData.dragging) {
            if (s = !0, l.panningEnabled() && l.userPanningEnabled()) {
              var N;if (e.hoverData.justStartedPan) {
                var B = e.hoverData.mdownPos;N = { x: (d[0] - B[0]) * u, y: (d[1] - B[1]) * u }, e.hoverData.justStartedPan = !1;
              } else N = { x: w[0] * u, y: w[1] * u };l.panBy(N), e.hoverData.dragged = !0;
            }d = e.projectIntoViewport(i.clientX, i.clientY);
          } else if (1 != f[4] || null != x && !x.isEdge()) {
            if (x && x.isEdge() && x.active() && x.unactivate(), x && x.grabbed() || v == b || (b && t(b, ["mouseout", "tapdragout"], i, { position: { x: d[0], y: d[1] } }), v && t(v, ["mouseover", "tapdragover"], i, { position: { x: d[0], y: d[1] } }), e.hoverData.last = v), x) if (y) {
              if (l.boxSelectionEnabled() && _) x && x.grabbed() && (m(E), x.emit("free")), M();else if (x && x.grabbed() && e.nodeIsDraggable(x)) {
                var z = !e.dragData.didDrag;z && e.redrawHint("eles", !0), e.dragData.didDrag = !0;var L = [];e.hoverData.draggingEles || g(l.collection(E), { inDragLayer: !0 });for (var A = 0; A < E.length; A++) {
                  var O = E[A];if (e.nodeIsDraggable(O) && O.grabbed()) {
                    var R = O.position();if (L.push(O), r.number(w[0]) && r.number(w[1]) && (R.x += w[0], R.y += w[1], z)) {
                      var V = e.hoverData.dragDelta;V && r.number(V[0]) && r.number(V[1]) && (R.x += V[0], R.y += V[1]);
                    }
                  }
                }e.hoverData.draggingEles = !0;var q = l.collection(L);q.dirtyCompoundBoundsCache(), q.emit("position drag"), e.redrawHint("drag", !0), e.redraw();
              }
            } else !function () {
              var t = e.hoverData.dragDelta = e.hoverData.dragDelta || [];0 === t.length ? (t.push(w[0]), t.push(w[1])) : (t[0] += w[0], t[1] += w[1]);
            }();s = !0;
          } else if (y) {
            if (e.hoverData.dragging || !l.boxSelectionEnabled() || !_ && l.panningEnabled() && l.userPanningEnabled()) {
              if (!e.hoverData.selecting && l.panningEnabled() && l.userPanningEnabled()) {
                var F = o(x, e.hoverData.downs);F && (e.hoverData.dragging = !0, e.hoverData.justStartedPan = !0, f[4] = 0, e.data.bgActivePosistion = a.array2point(h), e.redrawHint("select", !0), e.redraw());
              }
            } else M();x && x.isEdge() && x.active() && x.unactivate();
          }return f[2] = d[0], f[3] = d[1], s ? (i.stopPropagation && i.stopPropagation(), i.preventDefault && i.preventDefault(), !1) : void 0;
        }
      }, !1), e.registerBinding(window, "mouseup", function (r) {
        if (e.hoverData.capture) {
          e.hoverData.capture = !1;var i = e.cy,
              a = e.projectIntoViewport(r.clientX, r.clientY),
              o = e.selection,
              s = e.findNearestElement(a[0], a[1], !0, !1),
              l = e.dragData.possibleDragElements,
              u = e.hoverData.down,
              c = n(r);if (e.data.bgActivePosistion && (e.redrawHint("select", !0), e.redraw()), e.hoverData.tapholdCancelled = !0, e.data.bgActivePosistion = void 0, u && u.unactivate(), 3 === e.hoverData.which) {
            var d = { originalEvent: r, type: "cxttapend", position: { x: a[0], y: a[1] } };if (u ? u.emit(d) : i.emit(d), !e.hoverData.cxtDragged) {
              var h = { originalEvent: r, type: "cxttap", position: { x: a[0], y: a[1] } };u ? u.emit(h) : i.emit(h);
            }e.hoverData.cxtDragged = !1, e.hoverData.which = null;
          } else if (1 === e.hoverData.which) {
            if (null != u || e.dragData.didDrag || e.hoverData.selecting || e.hoverData.dragged || n(r) || (i.$(function (e) {
              return e.selected();
            }).unselect(), l.length > 0 && e.redrawHint("eles", !0), e.dragData.possibleDragElements = l = []), t(s, ["mouseup", "tapend", "vmouseup"], r, { position: { x: a[0], y: a[1] } }), e.dragData.didDrag || e.hoverData.dragged || e.hoverData.selecting || e.hoverData.isOverThresholdDrag || t(u, ["click", "tap", "vclick"], r, { position: { x: a[0], y: a[1] } }), s != u || e.dragData.didDrag || e.hoverData.selecting || null != s && s._private.selectable && (e.hoverData.dragging || ("additive" === i.selectionType() || c ? s.selected() ? s.unselect() : s.select() : c || (i.$(":selected").unmerge(s).unselect(), s.select())), e.redrawHint("eles", !0)), e.hoverData.selecting) {
              var p = i.collection(e.getAllInBox(o[0], o[1], o[2], o[3]));e.redrawHint("select", !0), p.length > 0 && e.redrawHint("eles", !0), i.emit("boxend");var f = function f(e) {
                return e.selectable() && !e.selected();
              };"additive" === i.selectionType() ? p.emit("box").stdFilter(f).select().emit("boxselect") : (c || i.$(":selected").unmerge(p).unselect(), p.emit("box").stdFilter(f).select().emit("boxselect")), e.redraw();
            }if (e.hoverData.dragging && (e.hoverData.dragging = !1, e.redrawHint("select", !0), e.redrawHint("eles", !0), e.redraw()), !o[4]) {
              e.redrawHint("drag", !0), e.redrawHint("eles", !0);var v = u && u.grabbed();m(l), v && u.emit("free");
            }
          }o[4] = 0, e.hoverData.down = null, e.hoverData.cxtStarted = !1, e.hoverData.draggingEles = !1, e.hoverData.selecting = !1, e.hoverData.isOverThresholdDrag = !1, e.dragData.didDrag = !1, e.hoverData.dragged = !1, e.hoverData.dragDelta = [], e.hoverData.mdownPos = null, e.hoverData.mdownGPos = null;
        }
      }, !1);var S = function S(t) {
        if (!e.scrollingPage) {
          var n = e.cy,
              r = e.projectIntoViewport(t.clientX, t.clientY),
              i = [r[0] * n.zoom() + n.pan().x, r[1] * n.zoom() + n.pan().y];if (e.hoverData.draggingEles || e.hoverData.dragging || e.hoverData.cxtStarted || P()) return void t.preventDefault();if (n.panningEnabled() && n.userPanningEnabled() && n.zoomingEnabled() && n.userZoomingEnabled()) {
            t.preventDefault(), e.data.wheelZooming = !0, clearTimeout(e.data.wheelTimeout), e.data.wheelTimeout = setTimeout(function () {
              e.data.wheelZooming = !1, e.redrawHint("eles", !0), e.redraw();
            }, 150);var a;a = null != t.deltaY ? t.deltaY / -250 : null != t.wheelDeltaY ? t.wheelDeltaY / 1e3 : t.wheelDelta / 1e3, a *= e.wheelSensitivity;1 === t.deltaMode && (a *= 33), n.zoom({ level: n.zoom() * Math.pow(10, a), renderedPosition: { x: i[0], y: i[1] } });
          }
        }
      };e.registerBinding(e.container, "wheel", S, !0), e.registerBinding(window, "scroll", function (t) {
        e.scrollingPage = !0, clearTimeout(e.scrollingPageTimeout), e.scrollingPageTimeout = setTimeout(function () {
          e.scrollingPage = !1;
        }, 250);
      }, !0), e.registerBinding(e.container, "mouseout", function (t) {
        var n = e.projectIntoViewport(t.clientX, t.clientY);e.cy.emit({ originalEvent: t, type: "mouseout", position: { x: n[0], y: n[1] } });
      }, !1), e.registerBinding(e.container, "mouseover", function (t) {
        var n = e.projectIntoViewport(t.clientX, t.clientY);e.cy.emit({ originalEvent: t, type: "mouseover", position: { x: n[0], y: n[1] } });
      }, !1);var T,
          D,
          k,
          _,
          M,
          I,
          N,
          B,
          z,
          L,
          A,
          O,
          R,
          V,
          q = function q(e, t, n, r) {
        return Math.sqrt((n - e) * (n - e) + (r - t) * (r - t));
      },
          F = function F(e, t, n, r) {
        return (n - e) * (n - e) + (r - t) * (r - t);
      };e.registerBinding(e.container, "touchstart", V = function V(n) {
        if (C(n)) {
          e.touchData.capture = !0, e.data.bgActivePosistion = void 0;var r = e.cy,
              i = e.touchData.now,
              a = e.touchData.earlier;if (n.touches[0]) {
            var o = e.projectIntoViewport(n.touches[0].clientX, n.touches[0].clientY);i[0] = o[0], i[1] = o[1];
          }if (n.touches[1]) {
            var o = e.projectIntoViewport(n.touches[1].clientX, n.touches[1].clientY);i[2] = o[0], i[3] = o[1];
          }if (n.touches[2]) {
            var o = e.projectIntoViewport(n.touches[2].clientX, n.touches[2].clientY);i[4] = o[0], i[5] = o[1];
          }if (n.touches[1]) {
            m(e.dragData.touchDragEles);var s = e.findContainerClientCoords();z = s[0], L = s[1], A = s[2], O = s[3], T = n.touches[0].clientX - z, D = n.touches[0].clientY - L, k = n.touches[1].clientX - z, _ = n.touches[1].clientY - L, R = 0 <= T && T <= A && 0 <= k && k <= A && 0 <= D && D <= O && 0 <= _ && _ <= O;var l = r.pan(),
                u = r.zoom();M = q(T, D, k, _), I = F(T, D, k, _), N = [(T + k) / 2, (D + _) / 2], B = [(N[0] - l.x) / u, (N[1] - l.y) / u];if (I < 4e4 && !n.touches[2]) {
              var c = e.findNearestElement(i[0], i[1], !0, !0),
                  d = e.findNearestElement(i[2], i[3], !0, !0);return c && c.isNode() ? (c.activate().emit({ originalEvent: n, type: "cxttapstart", position: { x: i[0], y: i[1] } }), e.touchData.start = c) : d && d.isNode() ? (d.activate().emit({ originalEvent: n, type: "cxttapstart", position: { x: i[0], y: i[1] } }), e.touchData.start = d) : r.emit({ originalEvent: n, type: "cxttapstart", position: { x: i[0], y: i[1] } }), e.touchData.start && (e.touchData.start._private.grabbed = !1), e.touchData.cxt = !0, e.touchData.cxtDragged = !1, e.data.bgActivePosistion = void 0, void e.redraw();
            }
          }if (n.touches[2]) ;else if (n.touches[1]) ;else if (n.touches[0]) {
            var p = e.findNearestElements(i[0], i[1], !0, !0),
                f = p[0];if (null != f && (f.activate(), e.touchData.start = f, e.touchData.starts = p, e.nodeIsGrabbable(f))) {
              var v = e.dragData.touchDragEles = [],
                  b = null;e.redrawHint("eles", !0), e.redrawHint("drag", !0), f.selected() ? (b = r.$(function (t) {
                return t.selected() && e.nodeIsGrabbable(t);
              }), g(b, { addToList: v })) : y(f, { addToList: v }), h(f);var x = function x(e) {
                return { originalEvent: n, type: e, position: { x: i[0], y: i[1] } };
              };f.emit(x("grabon")), b ? b.forEach(function (e) {
                e.emit(x("grab"));
              }) : f.emit(x("grab"));
            }t(f, ["touchstart", "tapstart", "vmousedown"], n, { position: { x: i[0], y: i[1] } }), null == f && (e.data.bgActivePosistion = { x: o[0], y: o[1] }, e.redrawHint("select", !0), e.redraw()), e.touchData.singleTouchMoved = !1, e.touchData.singleTouchStartTime = +new Date(), clearTimeout(e.touchData.tapholdTimeout), e.touchData.tapholdTimeout = setTimeout(function () {
              !1 !== e.touchData.singleTouchMoved || e.pinching || e.touchData.selecting || (t(e.touchData.start, ["taphold"], n, { position: { x: i[0], y: i[1] } }), e.touchData.start || r.$(":selected").unselect());
            }, e.tapholdDuration);
          }if (n.touches.length >= 1) {
            for (var w = e.touchData.startPosition = [], E = 0; E < i.length; E++) {
              w[E] = a[E] = i[E];
            }var P = n.touches[0];e.touchData.startGPosition = [P.clientX, P.clientY];
          }
        }
      }, !1);var j;e.registerBinding(window, "touchmove", j = function j(n) {
        var i = e.touchData.capture;if (i || C(n)) {
          var s = e.selection,
              l = e.cy,
              u = e.touchData.now,
              c = e.touchData.earlier,
              d = l.zoom();if (n.touches[0]) {
            var h = e.projectIntoViewport(n.touches[0].clientX, n.touches[0].clientY);u[0] = h[0], u[1] = h[1];
          }if (n.touches[1]) {
            var h = e.projectIntoViewport(n.touches[1].clientX, n.touches[1].clientY);u[2] = h[0], u[3] = h[1];
          }if (n.touches[2]) {
            var h = e.projectIntoViewport(n.touches[2].clientX, n.touches[2].clientY);u[4] = h[0], u[5] = h[1];
          }var p,
              f = e.touchData.startGPosition;if (i && n.touches[0] && f) {
            for (var v = [], y = 0; y < u.length; y++) {
              v[y] = u[y] - c[y];
            }var b = n.touches[0].clientX - f[0],
                x = b * b,
                w = n.touches[0].clientY - f[1];p = x + w * w >= e.touchTapThreshold2;
          }if (i && e.touchData.cxt) {
            n.preventDefault();var E = n.touches[0].clientX - z,
                P = n.touches[0].clientY - L,
                S = n.touches[1].clientX - z,
                N = n.touches[1].clientY - L,
                A = F(E, P, S, N),
                O = A / I;if (O >= 2.25 || A >= 22500) {
              e.touchData.cxt = !1, e.data.bgActivePosistion = void 0, e.redrawHint("select", !0);var V = { originalEvent: n, type: "cxttapend", position: { x: u[0], y: u[1] } };e.touchData.start ? (e.touchData.start.unactivate().emit(V), e.touchData.start = null) : l.emit(V);
            }
          }if (i && e.touchData.cxt) {
            var V = { originalEvent: n, type: "cxtdrag", position: { x: u[0], y: u[1] } };e.data.bgActivePosistion = void 0, e.redrawHint("select", !0), e.touchData.start ? e.touchData.start.emit(V) : l.emit(V), e.touchData.start && (e.touchData.start._private.grabbed = !1), e.touchData.cxtDragged = !0;var j = e.findNearestElement(u[0], u[1], !0, !0);e.touchData.cxtOver && j === e.touchData.cxtOver || (e.touchData.cxtOver && e.touchData.cxtOver.emit({ originalEvent: n, type: "cxtdragout", position: { x: u[0], y: u[1] } }), e.touchData.cxtOver = j, j && j.emit({ originalEvent: n, type: "cxtdragover", position: { x: u[0], y: u[1] } }));
          } else if (i && n.touches[2] && l.boxSelectionEnabled()) n.preventDefault(), e.data.bgActivePosistion = void 0, this.lastThreeTouch = +new Date(), e.touchData.selecting || l.emit("boxstart"), e.touchData.selecting = !0, e.redrawHint("select", !0), s && 0 !== s.length && void 0 !== s[0] ? (s[2] = (u[0] + u[2] + u[4]) / 3, s[3] = (u[1] + u[3] + u[5]) / 3) : (s[0] = (u[0] + u[2] + u[4]) / 3, s[1] = (u[1] + u[3] + u[5]) / 3, s[2] = (u[0] + u[2] + u[4]) / 3 + 1, s[3] = (u[1] + u[3] + u[5]) / 3 + 1), s[4] = 1, e.touchData.selecting = !0, e.redraw();else if (i && n.touches[1] && l.zoomingEnabled() && l.panningEnabled() && l.userZoomingEnabled() && l.userPanningEnabled()) {
            n.preventDefault(), e.data.bgActivePosistion = void 0, e.redrawHint("select", !0);var X = e.dragData.touchDragEles;if (X) {
              e.redrawHint("drag", !0);for (var Y = 0; Y < X.length; Y++) {
                var W = X[Y]._private;W.grabbed = !1, W.rscratch.inDragLayer = !1;
              }
            }var E = n.touches[0].clientX - z,
                P = n.touches[0].clientY - L,
                S = n.touches[1].clientX - z,
                N = n.touches[1].clientY - L,
                H = q(E, P, S, N),
                Z = H / M;if (R) {
              var $ = E - T,
                  U = P - D,
                  G = S - k,
                  Q = N - _,
                  K = ($ + G) / 2,
                  J = (U + Q) / 2,
                  ee = l.zoom(),
                  te = ee * Z,
                  ne = l.pan(),
                  re = B[0] * ee + ne.x,
                  ie = B[1] * ee + ne.y,
                  ae = { x: -te / ee * (re - ne.x - K) + re, y: -te / ee * (ie - ne.y - J) + ie };if (e.touchData.start && e.touchData.start.active()) {
                var X = e.dragData.touchDragEles;m(X), e.redrawHint("drag", !0), e.redrawHint("eles", !0), e.touchData.start.unactivate().emit("free");
              }l.viewport({ zoom: te, pan: ae, cancelOnFailedZoom: !0 }), M = H, T = E, D = P, k = S, _ = N, e.pinching = !0;
            }if (n.touches[0]) {
              var h = e.projectIntoViewport(n.touches[0].clientX, n.touches[0].clientY);u[0] = h[0], u[1] = h[1];
            }if (n.touches[1]) {
              var h = e.projectIntoViewport(n.touches[1].clientX, n.touches[1].clientY);u[2] = h[0], u[3] = h[1];
            }if (n.touches[2]) {
              var h = e.projectIntoViewport(n.touches[2].clientX, n.touches[2].clientY);u[4] = h[0], u[5] = h[1];
            }
          } else if (n.touches[0]) {
            var j,
                oe = e.touchData.start,
                se = e.touchData.last;if (e.hoverData.draggingEles || e.swipePanning || (j = e.findNearestElement(u[0], u[1], !0, !0)), i && null != oe && n.preventDefault(), i && null != oe && e.nodeIsDraggable(oe)) if (p) {
              var X = e.dragData.touchDragEles,
                  le = !e.dragData.didDrag;le && g(l.collection(X), { inDragLayer: !0 });for (var ue = 0; ue < X.length; ue++) {
                var ce = X[ue];if (e.nodeIsDraggable(ce) && ce.grabbed()) {
                  e.dragData.didDrag = !0;var de = ce.position();if (r.number(v[0]) && r.number(v[1]) && (de.x += v[0], de.y += v[1]), le) {
                    e.redrawHint("eles", !0);var he = e.touchData.dragDelta;he && r.number(he[0]) && r.number(he[1]) && (de.x += he[0], de.y += he[1]);
                  }
                }
              }var pe = l.collection(X);pe.dirtyCompoundBoundsCache(), pe.emit("position drag"), e.hoverData.draggingEles = !0, e.redrawHint("drag", !0), e.touchData.startPosition[0] == c[0] && e.touchData.startPosition[1] == c[1] && e.redrawHint("eles", !0), e.redraw();
            } else {
              var he = e.touchData.dragDelta = e.touchData.dragDelta || [];0 === he.length ? (he.push(v[0]), he.push(v[1])) : (he[0] += v[0], he[1] += v[1]);
            }if (t(oe || j, ["touchmove", "tapdrag", "vmousemove"], n, { position: { x: u[0], y: u[1] } }), oe && oe.grabbed() || j == se || (se && se.emit({ originalEvent: n, type: "tapdragout", position: { x: u[0], y: u[1] } }), j && j.emit({ originalEvent: n, type: "tapdragover", position: { x: u[0], y: u[1] } })), e.touchData.last = j, i) for (var Y = 0; Y < u.length; Y++) {
              u[Y] && e.touchData.startPosition[Y] && p && (e.touchData.singleTouchMoved = !0);
            }if (i && (null == oe || oe.isEdge()) && l.panningEnabled() && l.userPanningEnabled()) {
              var fe = o(oe, e.touchData.starts);fe && (n.preventDefault(), e.swipePanning ? l.panBy({ x: v[0] * d, y: v[1] * d }) : p && (e.swipePanning = !0, l.panBy({ x: b * d, y: w * d }), oe && (oe.unactivate(), e.data.bgActivePosistion || (e.data.bgActivePosistion = a.array2point(e.touchData.startPosition)), e.redrawHint("select", !0), e.touchData.start = null)));var h = e.projectIntoViewport(n.touches[0].clientX, n.touches[0].clientY);u[0] = h[0], u[1] = h[1];
            }
          }for (var y = 0; y < u.length; y++) {
            c[y] = u[y];
          }
        }
      }, !1);var X;e.registerBinding(window, "touchcancel", X = function X(t) {
        var n = e.touchData.start;e.touchData.capture = !1, n && n.unactivate();
      });var Y;if (e.registerBinding(window, "touchend", Y = function Y(n) {
        var r = e.touchData.start;if (e.touchData.capture) {
          e.touchData.capture = !1, n.preventDefault();var i = e.selection;e.swipePanning = !1, e.hoverData.draggingEles = !1;var a = e.cy,
              o = a.zoom(),
              s = e.touchData.now,
              l = e.touchData.earlier;if (n.touches[0]) {
            var u = e.projectIntoViewport(n.touches[0].clientX, n.touches[0].clientY);s[0] = u[0], s[1] = u[1];
          }if (n.touches[1]) {
            var u = e.projectIntoViewport(n.touches[1].clientX, n.touches[1].clientY);s[2] = u[0], s[3] = u[1];
          }if (n.touches[2]) {
            var u = e.projectIntoViewport(n.touches[2].clientX, n.touches[2].clientY);s[4] = u[0], s[5] = u[1];
          }r && r.unactivate();var c;if (e.touchData.cxt) {
            if (c = { originalEvent: n, type: "cxttapend", position: { x: s[0], y: s[1] } }, r ? r.emit(c) : a.emit(c), !e.touchData.cxtDragged) {
              var d = { originalEvent: n, type: "cxttap", position: { x: s[0], y: s[1] } };r ? r.emit(d) : a.emit(d);
            }return e.touchData.start && (e.touchData.start._private.grabbed = !1), e.touchData.cxt = !1, e.touchData.start = null, void e.redraw();
          }if (!n.touches[2] && a.boxSelectionEnabled() && e.touchData.selecting) {
            e.touchData.selecting = !1;var h = a.collection(e.getAllInBox(i[0], i[1], i[2], i[3]));i[0] = void 0, i[1] = void 0, i[2] = void 0, i[3] = void 0, i[4] = 0, e.redrawHint("select", !0), a.emit("boxend");var p = function p(e) {
              return e.selectable() && !e.selected();
            };h.emit("box").stdFilter(p).select().emit("boxselect"), h.nonempty() && e.redrawHint("eles", !0), e.redraw();
          }if (null != r && r.unactivate(), n.touches[2]) e.data.bgActivePosistion = void 0, e.redrawHint("select", !0);else if (n.touches[1]) ;else if (n.touches[0]) ;else if (!n.touches[0]) {
            e.data.bgActivePosistion = void 0, e.redrawHint("select", !0);var f = e.dragData.touchDragEles;if (null != r) {
              var v = r._private.grabbed;m(f), e.redrawHint("drag", !0), e.redrawHint("eles", !0), v && r.emit("free"), t(r, ["touchend", "tapend", "vmouseup", "tapdragout"], n, { position: { x: s[0], y: s[1] } }), r.unactivate(), e.touchData.start = null;
            } else {
              var g = e.findNearestElement(s[0], s[1], !0, !0);t(g, ["touchend", "tapend", "vmouseup", "tapdragout"], n, { position: { x: s[0], y: s[1] } });
            }var y = e.touchData.startPosition[0] - s[0],
                b = y * y,
                x = e.touchData.startPosition[1] - s[1],
                w = x * x,
                E = b + w,
                P = E * o * o;null != r && !e.dragData.didDrag && r._private.selectable && P < e.touchTapThreshold2 && !e.pinching && ("single" === a.selectionType() ? (a.$(":selected").unmerge(r).unselect(), r.select()) : r.selected() ? r.unselect() : r.select(), e.redrawHint("eles", !0)), e.touchData.singleTouchMoved || t(r, ["tap", "vclick"], n, { position: { x: s[0], y: s[1] } }), e.touchData.singleTouchMoved = !0;
          }for (var C = 0; C < s.length; C++) {
            l[C] = s[C];
          }e.dragData.didDrag = !1, 0 === n.touches.length && (e.touchData.dragDelta = [], e.touchData.startPosition = null, e.touchData.startGPosition = null), n.touches.length < 2 && (e.pinching = !1, e.redrawHint("eles", !0), e.redraw());
        }
      }, !1), "undefined" == typeof TouchEvent) {
        var W = [],
            H = function H(e) {
          return { clientX: e.clientX, clientY: e.clientY, force: 1, identifier: e.pointerId, pageX: e.pageX, pageY: e.pageY, radiusX: e.width / 2, radiusY: e.height / 2, screenX: e.screenX, screenY: e.screenY, target: e.target };
        },
            Z = function Z(e) {
          return { event: e, touch: H(e) };
        },
            $ = function $(e) {
          W.push(Z(e));
        },
            U = function U(e) {
          for (var t = 0; t < W.length; t++) {
            if (W[t].event.pointerId === e.pointerId) return void W.splice(t, 1);
          }
        },
            G = function G(e) {
          var t = W.filter(function (t) {
            return t.event.pointerId === e.pointerId;
          })[0];t.event = e, t.touch = H(e);
        },
            Q = function Q(e) {
          e.touches = W.map(function (e) {
            return e.touch;
          });
        },
            K = function K(e) {
          return "mouse" === e.pointerType || 4 === e.pointerType;
        };e.registerBinding(e.container, "pointerdown", function (e) {
          K(e) || (e.preventDefault(), $(e), Q(e), V(e));
        }), e.registerBinding(e.container, "pointerup", function (e) {
          K(e) || (U(e), Q(e), Y(e));
        }), e.registerBinding(e.container, "pointercancel", function (e) {
          K(e) || (U(e), Q(e), X(e));
        }), e.registerBinding(e.container, "pointermove", function (e) {
          K(e) || (e.preventDefault(), G(e), Q(e), j(e));
        });
      }
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = {};i.generatePolygon = function (e, t) {
      return this.nodeShapes[e] = { renderer: this, name: e, points: t, draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl("polygon", e, t, n, r, i, this.points);
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          return r.polygonIntersectLine(a, o, this.points, e, t, n / 2, i / 2, s);
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          return r.pointInsidePolygon(e, t, this.points, o, s, i, a, [0, -1], n);
        } };
    }, i.generateEllipse = function () {
      return this.nodeShapes.ellipse = { renderer: this, name: "ellipse", draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl(this.name, e, t, n, r, i);
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          return r.intersectLineEllipse(a, o, e, t, n / 2 + s, i / 2 + s);
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          return r.checkInEllipse(e, t, i, a, o, s, n);
        } };
    }, i.generateRoundRectangle = function () {
      return this.nodeShapes.roundrectangle = { renderer: this, name: "roundrectangle", points: r.generateUnitNgonPointsFitToSquare(4, 0), draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl(this.name, e, t, n, r, i);
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          return r.roundRectangleIntersectLine(a, o, e, t, n, i, s);
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          var l = r.getRoundRectangleRadius(i, a),
              u = 2 * l;return !!r.pointInsidePolygon(e, t, this.points, o, s, i, a - u, [0, -1], n) || !!r.pointInsidePolygon(e, t, this.points, o, s, i - u, a, [0, -1], n) || !!r.checkInEllipse(e, t, u, u, o - i / 2 + l, s - a / 2 + l, n) || !!r.checkInEllipse(e, t, u, u, o + i / 2 - l, s - a / 2 + l, n) || !!r.checkInEllipse(e, t, u, u, o + i / 2 - l, s + a / 2 - l, n) || !!r.checkInEllipse(e, t, u, u, o - i / 2 + l, s + a / 2 - l, n);
        } };
    }, i.generateCutRectangle = function () {
      return this.nodeShapes.cutrectangle = { renderer: this, name: "cutrectangle", cornerLength: r.getCutRectangleCornerLength(), points: r.generateUnitNgonPointsFitToSquare(4, 0), draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl(this.name, e, t, n, r, i);
        }, generateCutTrianglePts: function generateCutTrianglePts(e, t, n, r) {
          var i = this.cornerLength,
              a = t / 2,
              o = e / 2,
              s = n - o,
              l = n + o,
              u = r - a,
              c = r + a;return { topLeft: [s, u + i, s + i, u, s + i, u + i], topRight: [l - i, u, l, u + i, l - i, u + i], bottomRight: [l, c - i, l - i, c, l - i, c - i], bottomLeft: [s + i, c, s, c - i, s + i, c - i] };
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          var l = this.generateCutTrianglePts(n + 2 * s, i + 2 * s, e, t),
              u = [].concat.apply([], [l.topLeft.splice(0, 4), l.topRight.splice(0, 4), l.bottomRight.splice(0, 4), l.bottomLeft.splice(0, 4)]);return r.polygonIntersectLine(a, o, u, e, t);
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          if (r.pointInsidePolygon(e, t, this.points, o, s, i, a - 2 * this.cornerLength, [0, -1], n)) return !0;if (r.pointInsidePolygon(e, t, this.points, o, s, i - 2 * this.cornerLength, a, [0, -1], n)) return !0;var l = this.generateCutTrianglePts(i, a, o, s);return r.pointInsidePolygonPoints(e, t, l.topLeft) || r.pointInsidePolygonPoints(e, t, l.topRight) || r.pointInsidePolygonPoints(e, t, l.bottomRight) || r.pointInsidePolygonPoints(e, t, l.bottomLeft);
        } };
    }, i.generateBarrel = function () {
      return this.nodeShapes.barrel = { renderer: this, name: "barrel", points: r.generateUnitNgonPointsFitToSquare(4, 0), draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl(this.name, e, t, n, r, i);
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          var l = this.generateBarrelBezierPts(n + 2 * s, i + 2 * s, e, t),
              u = function u(e) {
            var t = r.qbezierPtAt({ x: e[0], y: e[1] }, { x: e[2], y: e[3] }, { x: e[4], y: e[5] }, .15),
                n = r.qbezierPtAt({ x: e[0], y: e[1] }, { x: e[2], y: e[3] }, { x: e[4], y: e[5] }, .5),
                i = r.qbezierPtAt({ x: e[0], y: e[1] }, { x: e[2], y: e[3] }, { x: e[4], y: e[5] }, .85);return [e[0], e[1], t.x, t.y, n.x, n.y, i.x, i.y, e[4], e[5]];
          },
              c = [].concat(u(l.topLeft), u(l.topRight), u(l.bottomRight), u(l.bottomLeft));return r.polygonIntersectLine(a, o, c, e, t);
        }, generateBarrelBezierPts: function generateBarrelBezierPts(e, t, n, i) {
          var a = t / 2,
              o = e / 2,
              s = n - o,
              l = n + o,
              u = i - a,
              c = i + a,
              d = r.getBarrelCurveConstants(e, t),
              h = d.heightOffset,
              p = d.widthOffset,
              f = d.ctrlPtOffsetPct * e,
              v = { topLeft: [s, u + h, s + f, u, s + p, u], topRight: [l - p, u, l - f, u, l, u + h], bottomRight: [l, c - h, l - f, c, l - p, c], bottomLeft: [s + p, c, s + f, c, s, c - h] };return v.topLeft.isTop = !0, v.topRight.isTop = !0, v.bottomLeft.isBottom = !0, v.bottomRight.isBottom = !0, v;
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          var l = r.getBarrelCurveConstants(i, a),
              u = l.heightOffset,
              c = l.widthOffset;if (r.pointInsidePolygon(e, t, this.points, o, s, i, a - 2 * u, [0, -1], n)) return !0;if (r.pointInsidePolygon(e, t, this.points, o, s, i - 2 * c, a, [0, -1], n)) return !0;for (var d = this.generateBarrelBezierPts(i, a, o, s), h = Object.keys(d), p = 0; p < h.length; p++) {
            var f = h[p],
                v = d[f],
                g = function (e, t, n) {
              var i = n[4],
                  a = n[2],
                  o = n[0],
                  s = n[5],
                  l = n[1],
                  u = Math.min(i, o),
                  c = Math.max(i, o),
                  d = Math.min(s, l),
                  h = Math.max(s, l);if (u <= e && e <= c && d <= t && t <= h) {
                var p = r.bezierPtsToQuadCoeff(i, a, o),
                    f = r.solveQuadratic(p[0], p[1], p[2], e),
                    v = f.filter(function (e) {
                  return 0 <= e && e <= 1;
                });if (v.length > 0) return v[0];
              }return null;
            }(e, t, v);if (null != g) {
              var y = v[5],
                  m = v[3],
                  b = v[1],
                  x = r.qbezierAt(y, m, b, g);if (v.isTop && x <= t) return !0;if (v.isBottom && t <= x) return !0;
            }
          }return !1;
        } };
    }, i.generateBottomRoundrectangle = function () {
      return this.nodeShapes.bottomroundrectangle = { renderer: this, name: "bottomroundrectangle", points: r.generateUnitNgonPointsFitToSquare(4, 0), draw: function draw(e, t, n, r, i) {
          this.renderer.nodeShapeImpl(this.name, e, t, n, r, i);
        }, intersectLine: function intersectLine(e, t, n, i, a, o, s) {
          var l = e - (n / 2 + s),
              u = t - (i / 2 + s),
              c = u,
              d = e + (n / 2 + s),
              h = r.finiteLinesIntersect(a, o, e, t, l, u, d, c, !1);return h.length > 0 ? h : r.roundRectangleIntersectLine(a, o, e, t, n, i, s);
        }, checkPoint: function checkPoint(e, t, n, i, a, o, s) {
          var l = r.getRoundRectangleRadius(i, a),
              u = 2 * l;if (r.pointInsidePolygon(e, t, this.points, o, s, i, a - u, [0, -1], n)) return !0;if (r.pointInsidePolygon(e, t, this.points, o, s, i - u, a, [0, -1], n)) return !0;var c = i / 2 + 2 * n,
              d = a / 2 + 2 * n,
              h = [o - c, s - d, o - c, s, o + c, s, o + c, s - d];return !!r.pointInsidePolygonPoints(e, t, h) || !!r.checkInEllipse(e, t, u, u, o + i / 2 - l, s + a / 2 - l, n) || !!r.checkInEllipse(e, t, u, u, o - i / 2 + l, s + a / 2 - l, n);
        } };
    }, i.registerNodeShapes = function () {
      var e = this.nodeShapes = {},
          t = this;this.generateEllipse(), this.generatePolygon("triangle", r.generateUnitNgonPointsFitToSquare(3, 0)), this.generatePolygon("rectangle", r.generateUnitNgonPointsFitToSquare(4, 0)), e.square = e.rectangle, this.generateRoundRectangle(), this.generateCutRectangle(), this.generateBarrel(), this.generateBottomRoundrectangle(), this.generatePolygon("diamond", [0, 1, 1, 0, 0, -1, -1, 0]), this.generatePolygon("pentagon", r.generateUnitNgonPointsFitToSquare(5, 0)), this.generatePolygon("hexagon", r.generateUnitNgonPointsFitToSquare(6, 0)), this.generatePolygon("heptagon", r.generateUnitNgonPointsFitToSquare(7, 0)), this.generatePolygon("octagon", r.generateUnitNgonPointsFitToSquare(8, 0));var n = new Array(20),
          i = r.generateUnitNgonPoints(5, 0),
          a = r.generateUnitNgonPoints(5, Math.PI / 5),
          o = .5 * (3 - Math.sqrt(5));o *= 1.57;for (var s = 0; s < a.length / 2; s++) {
        a[2 * s] *= o, a[2 * s + 1] *= o;
      }for (var s = 0; s < 5; s++) {
        n[4 * s] = i[2 * s], n[4 * s + 1] = i[2 * s + 1], n[4 * s + 2] = a[2 * s], n[4 * s + 3] = a[2 * s + 1];
      }n = r.fitPolygonToSquare(n), this.generatePolygon("star", n), this.generatePolygon("vee", [-1, -1, 0, -.333, 1, -1, 0, 1]), this.generatePolygon("rhomboid", [-1, -1, .333, -1, 1, 1, -.333, 1]), this.generatePolygon("concavehexagon", [-1, -.95, -.75, 0, -1, .95, 1, .95, .75, 0, 1, -.95]), this.generatePolygon("tag", [-1, -1, .25, -1, 1, 0, .25, 1, -1, 1]), e.makePolygon = function (e) {
        var n,
            r = e.join("$"),
            i = "polygon-" + r;return (n = this[i]) ? n : t.generatePolygon(i, e);
      };
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(1),
        i = {};i.timeToRender = function () {
      return this.redrawTotalTime / this.redrawCount;
    }, i.redraw = function (e) {
      e = e || r.staticEmptyObject();var t = this;void 0 === t.averageRedrawTime && (t.averageRedrawTime = 0), void 0 === t.lastRedrawTime && (t.lastRedrawTime = 0), void 0 === t.lastDrawTime && (t.lastDrawTime = 0), t.requestedFrame = !0, t.renderOptions = e;
    }, i.beforeRender = function (e, t) {
      if (!this.destroyed) {
        t = t || 0;var n = this.beforeRenderCallbacks;n.push({ fn: e, priority: t }), n.sort(function (e, t) {
          return t.priority - e.priority;
        });
      }
    };var a = function a(e, t, n) {
      for (var r = e.beforeRenderCallbacks, i = 0; i < r.length; i++) {
        r[i].fn(t, n);
      }
    };i.startRenderLoop = function () {
      var e = this;if (!e.renderLoopStarted) {
        e.renderLoopStarted = !0;var t = function t(n) {
          if (!e.destroyed) {
            if (e.requestedFrame && !e.skipFrame) {
              a(e, !0, n);var i = r.performanceNow();e.render(e.renderOptions);var o = e.lastDrawTime = r.performanceNow();void 0 === e.averageRedrawTime && (e.averageRedrawTime = o - i), void 0 === e.redrawCount && (e.redrawCount = 0), e.redrawCount++, void 0 === e.redrawTotalTime && (e.redrawTotalTime = 0);var s = o - i;e.redrawTotalTime += s, e.lastRedrawTime = s, e.averageRedrawTime = e.averageRedrawTime / 2 + s / 2, e.requestedFrame = !1;
            } else a(e, !1, n);e.skipFrame = !1, r.requestAnimationFrame(t);
          }
        };r.requestAnimationFrame(t);
      }
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    function r(e) {
      var t = this;t.data = { canvases: new Array(u.CANVAS_LAYERS), contexts: new Array(u.CANVAS_LAYERS), canvasNeedsRedraw: new Array(u.CANVAS_LAYERS), bufferCanvases: new Array(u.BUFFER_COUNT), bufferContexts: new Array(u.CANVAS_LAYERS) };var n = "-webkit-tap-highlight-color: rgba(0,0,0,0);";t.data.canvasContainer = document.createElement("div");var r = t.data.canvasContainer.style;t.data.canvasContainer.setAttribute("style", n), r.position = "relative", r.zIndex = "0", r.overflow = "hidden";var i = e.cy.container();i.appendChild(t.data.canvasContainer), (i.getAttribute("style") || "").indexOf(n) < 0 && i.setAttribute("style", (i.getAttribute("style") || "") + n);for (var l = 0; l < u.CANVAS_LAYERS; l++) {
        var c = t.data.canvases[l] = document.createElement("canvas");t.data.contexts[l] = c.getContext("2d"), c.setAttribute("style", "-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;" + (a.ms() ? " -ms-touch-action: none; touch-action: none; " : "")), c.style.position = "absolute", c.setAttribute("data-id", "layer" + l), c.style.zIndex = String(u.CANVAS_LAYERS - l), t.data.canvasContainer.appendChild(c), t.data.canvasNeedsRedraw[l] = !1;
      }t.data.topCanvas = t.data.canvases[0], t.data.canvases[u.NODE].setAttribute("data-id", "layer" + u.NODE + "-node"), t.data.canvases[u.SELECT_BOX].setAttribute("data-id", "layer" + u.SELECT_BOX + "-selectbox"), t.data.canvases[u.DRAG].setAttribute("data-id", "layer" + u.DRAG + "-drag");for (var l = 0; l < u.BUFFER_COUNT; l++) {
        t.data.bufferCanvases[l] = document.createElement("canvas"), t.data.bufferContexts[l] = t.data.bufferCanvases[l].getContext("2d"), t.data.bufferCanvases[l].style.position = "absolute", t.data.bufferCanvases[l].setAttribute("data-id", "buffer" + l), t.data.bufferCanvases[l].style.zIndex = String(-l - 1), t.data.bufferCanvases[l].style.visibility = "hidden";
      }t.pathsEnabled = !0, t.data.eleTxrCache = new o(t), t.data.lyrTxrCache = new s(t, t.data.eleTxrCache), t.onUpdateEleCalcs(function (e, n) {
        for (var r = 0; r < n.length; r++) {
          var i = n[r],
              a = i._private.rstyle,
              o = a.dirtyEvents;if (i.isNode() && o && 1 === o.length && o.position) ;else if (t.data.eleTxrCache.invalidateElement(i), i.isParent() && o.style) {
            var s = a.prevParentOpacity,
                l = i.pstyle("opacity").pfValue;if (a.prevParentOpacity = l, s !== l) for (var u = i.descendants(), c = 0; c < u.length; c++) {
              t.data.eleTxrCache.invalidateElement(u[c]);
            }
          }
        }n.length > 0 && t.data.lyrTxrCache.invalidateElements(n);
      });
    }var i = n(1),
        a = n(0),
        o = n(126),
        s = n(127),
        l = r,
        u = r.prototype;u.CANVAS_LAYERS = 3, u.SELECT_BOX = 0, u.DRAG = 1, u.NODE = 2, u.BUFFER_COUNT = 3, u.TEXTURE_BUFFER = 0, u.MOTIONBLUR_BUFFER_NODE = 1, u.MOTIONBLUR_BUFFER_DRAG = 2, u.redrawHint = function (e, t) {
      var n = this;switch (e) {case "eles":
          n.data.canvasNeedsRedraw[u.NODE] = t;break;case "drag":
          n.data.canvasNeedsRedraw[u.DRAG] = t;break;case "select":
          n.data.canvasNeedsRedraw[u.SELECT_BOX] = t;}
    };var c = "undefined" != typeof Path2D;u.path2dEnabled = function (e) {
      if (void 0 === e) return this.pathsEnabled;this.pathsEnabled = !!e;
    }, u.usePaths = function () {
      return c && this.pathsEnabled;
    }, [n(128), n(129), n(130), n(131), n(132), n(133), n(134), n(135), n(136), n(137)].forEach(function (e) {
      i.extend(u, e);
    }), e.exports = l;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = n(1),
        a = n(9),
        o = n(19),
        s = { dequeue: "dequeue", downscale: "downscale", highQuality: "highQuality" },
        l = function l(e) {
      var t = this;t.renderer = e, t.onDequeues = [], t.setupDequeueing();
    },
        u = l.prototype;u.reasons = s, u.getTextureQueue = function (e) {
      var t = this;return t.eleImgCaches = t.eleImgCaches || {}, t.eleImgCaches[e] = t.eleImgCaches[e] || [];
    }, u.getRetiredTextureQueue = function (e) {
      var t = this,
          n = t.eleImgCaches.retired = t.eleImgCaches.retired || {};return n[e] = n[e] || [];
    }, u.getElementQueue = function () {
      var e = this;return e.eleCacheQueue = e.eleCacheQueue || new a(function (e, t) {
        return t.reqs - e.reqs;
      });
    }, u.getElementIdToQueue = function () {
      var e = this;return e.eleIdToCacheQueue = e.eleIdToCacheQueue || {};
    }, u.getElement = function (e, t, n, i, a) {
      var o = this,
          l = this.renderer,
          u = e._private.rscratch,
          c = l.cy.zoom();if (0 === t.w || 0 === t.h || !e.visible()) return null;if (null == i && (i = Math.ceil(r.log2(c * n))), i < -4) i = -4;else if (c >= 3.99 || i > 2) return null;var d = Math.pow(2, i),
          h = t.h * d,
          p = t.w * d,
          f = u.imgCaches = u.imgCaches || {},
          v = f[i];if (v) return v;var g;if (g = h <= 25 ? 25 : h <= 50 ? 50 : 50 * Math.ceil(h / 50), h > 1024 || p > 1024 || e.isEdge() || e.isParent()) return null;var y = o.getTextureQueue(g),
          m = y[y.length - 2],
          b = function b() {
        return o.recycleTexture(g, p) || o.addTexture(g, p);
      };m || (m = y[y.length - 1]), m || (m = b()), m.width - m.usedWidth < p && (m = b());for (var x, w = l.eleTextBiggerThanMin(e, d), E = function E(e) {
        return e && e.scaledLabelShown === w;
      }, P = a && a === s.dequeue, C = a && a === s.highQuality, S = a && a === s.downscale, T = i + 1; T <= 2; T++) {
        var D = f[T];if (D) {
          x = D;break;
        }
      }var k = x && x.level === i + 1 ? x : null,
          _ = function _() {
        m.context.drawImage(k.texture.canvas, k.x, 0, k.width, k.height, m.usedWidth, 0, p, h);
      };if (m.context.setTransform(1, 0, 0, 1, 0, 0), m.context.clearRect(m.usedWidth, 0, p, g), E(k)) _();else if (E(x)) {
        if (!C) return o.queueElement(e, x.level - 1), x;for (var T = x.level; T > i; T--) {
          k = o.getElement(e, t, n, T, s.downscale);
        }_();
      } else {
        var M;if (!P && !C && !S) for (var T = i - 1; T >= -4; T--) {
          var D = f[T];if (D) {
            M = D;break;
          }
        }if (E(M)) return o.queueElement(e, i), M;m.context.translate(m.usedWidth, 0), m.context.scale(d, d), l.drawElement(m.context, e, t, w), m.context.scale(1 / d, 1 / d), m.context.translate(-m.usedWidth, 0);
      }return v = f[i] = { ele: e, x: m.usedWidth, texture: m, level: i, scale: d, width: p, height: h, scaledLabelShown: w }, m.usedWidth += Math.ceil(p + 8), m.eleCaches.push(v), o.checkTextureFullness(m), v;
    }, u.invalidateElement = function (e) {
      var t = this,
          n = e._private.rscratch.imgCaches;if (n) for (var r = -4; r <= 2; r++) {
        var a = n[r];if (a) {
          var o = a.texture;o.invalidatedWidth += a.width, n[r] = null, i.removeFromArray(o.eleCaches, a), t.removeFromQueue(e), t.checkTextureUtility(o);
        }
      }
    }, u.checkTextureUtility = function (e) {
      e.invalidatedWidth >= .5 * e.width && this.retireTexture(e);
    }, u.checkTextureFullness = function (e) {
      var t = this,
          n = t.getTextureQueue(e.height);e.usedWidth / e.width > .8 && e.fullnessChecks >= 10 ? i.removeFromArray(n, e) : e.fullnessChecks++;
    }, u.retireTexture = function (e) {
      var t = this,
          n = e.height,
          r = t.getTextureQueue(n);i.removeFromArray(r, e), e.retired = !0;for (var a = e.eleCaches, o = 0; o < a.length; o++) {
        var s = a[o],
            l = s.ele,
            u = s.level,
            c = l._private.rscratch.imgCaches;c && (c[u] = null);
      }i.clearArray(a), t.getRetiredTextureQueue(n).push(e);
    }, u.addTexture = function (e, t) {
      var n = this,
          r = n.getTextureQueue(e),
          i = {};return r.push(i), i.eleCaches = [], i.height = e, i.width = Math.max(1024, t), i.usedWidth = 0, i.invalidatedWidth = 0, i.fullnessChecks = 0, i.canvas = document.createElement("canvas"), i.canvas.width = i.width, i.canvas.height = i.height, i.context = i.canvas.getContext("2d"), i;
    }, u.recycleTexture = function (e, t) {
      for (var n = this, r = n.getTextureQueue(e), a = n.getRetiredTextureQueue(e), o = 0; o < a.length; o++) {
        var s = a[o];if (s.width >= t) return s.retired = !1, s.usedWidth = 0, s.invalidatedWidth = 0, s.fullnessChecks = 0, i.clearArray(s.eleCaches), s.context.setTransform(1, 0, 0, 1, 0, 0), s.context.clearRect(0, 0, s.width, s.height), i.removeFromArray(a, s), r.push(s), s;
      }
    }, u.queueElement = function (e, t) {
      var n = this,
          r = n.getElementQueue(),
          i = n.getElementIdToQueue(),
          a = e.id(),
          o = i[a];if (o) o.level = Math.max(o.level, t), o.reqs++, r.updateItem(o);else {
        var s = { ele: e, level: t, reqs: 1 };r.push(s), i[a] = s;
      }
    }, u.dequeue = function (e) {
      for (var t = this, n = t.getElementQueue(), r = t.getElementIdToQueue(), i = [], a = 0; a < 1 && n.size() > 0; a++) {
        var o = n.pop(),
            l = o.ele;if (null == l._private.rscratch.imgCaches[o.level]) {
          r[l.id()] = null, i.push(o);var u = l.boundingBox();t.getElement(l, u, e, o.level, s.dequeue);
        }
      }return i;
    }, u.removeFromQueue = function (e) {
      var t = this,
          n = t.getElementQueue(),
          r = t.getElementIdToQueue(),
          a = r[e.id()];null != a && (a.reqs = i.MAX_INT, n.updateItem(a), n.pop(), r[e.id()] = null);
    }, u.onDequeue = function (e) {
      this.onDequeues.push(e);
    }, u.offDequeue = function (e) {
      i.removeFromArray(this.onDequeues, e);
    }, u.setupDequeueing = o.setupDequeueing({ deqRedrawThreshold: 100, deqCost: .15, deqAvgCost: .1, deqNoDrawCost: .9, deqFastCost: .9, deq: function deq(e, t, n) {
        return e.dequeue(t, n);
      }, onDeqd: function onDeqd(e, t) {
        for (var n = 0; n < e.onDequeues.length; n++) {
          (0, e.onDequeues[n])(t);
        }
      }, shouldRedraw: function shouldRedraw(e, t, n, i) {
        for (var a = 0; a < t.length; a++) {
          var o = t[a].ele.boundingBox();if (r.boundingBoxesIntersect(o, i)) return !0;
        }return !1;
      }, priority: function priority(e) {
        return e.renderer.beforeRenderPriorities.eleTxrDeq;
      } }), e.exports = l;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      null != e.imageSmoothingEnabled ? e.imageSmoothingEnabled = t : (e.webkitImageSmoothingEnabled = t, e.mozImageSmoothingEnabled = t, e.msImageSmoothingEnabled = t);
    }var i = n(1),
        a = n(2),
        o = n(9),
        s = n(0),
        l = n(19),
        u = function u(e, t) {
      var n = this,
          r = n.renderer = e;n.layersByLevel = {}, n.firstGet = !0, n.lastInvalidationTime = i.performanceNow() - 500, n.skipping = !1, r.beforeRender(function (e, t) {
        t - n.lastInvalidationTime <= 250 ? n.skipping = !0 : n.skipping = !1;
      });var a = function a(e, t) {
        return t.reqs - e.reqs;
      };n.layersQueue = new o(a), n.eleTxrCache = t, n.setupEleCacheInvalidation(), n.setupDequeueing();
    },
        c = u.prototype,
        d = 0,
        h = Math.pow(2, 53) - 1;c.makeLayer = function (e, t) {
      var n = Math.pow(2, t),
          r = Math.ceil(e.w * n),
          i = Math.ceil(e.h * n),
          a = document.createElement("canvas");a.width = r, a.height = i;var o = { id: d = ++d % h, bb: e, level: t, width: r, height: i, canvas: a, context: a.getContext("2d"), eles: [], elesQueue: [], reqs: 0 },
          s = o.context,
          l = -o.bb.x1,
          u = -o.bb.y1;return s.scale(n, n), s.translate(l, u), o;
    }, c.getLayers = function (e, t, n) {
      var r = this,
          o = r.renderer,
          s = o.cy,
          l = s.zoom(),
          u = r.firstGet;if (r.firstGet = !1, null == n) if ((n = Math.ceil(a.log2(l * t))) < -4) n = -4;else if (l >= 3.99 || n > 2) return null;r.validateLayersElesOrdering(n, e);var c,
          d,
          h = r.layersByLevel,
          p = Math.pow(2, n),
          f = h[n] = h[n] || [],
          v = r.levelIsComplete(n, e);if (v) return f;!function () {
        var t = function t(_t4) {
          if (r.validateLayersElesOrdering(_t4, e), r.levelIsComplete(_t4, e)) return d = h[_t4], !0;
        },
            a = function a(e) {
          if (!d) for (var r = n + e; -4 <= r && r <= 2 && !t(r); r += e) {}
        };a(1), a(-1);for (var o = f.length - 1; o >= 0; o--) {
          var s = f[o];s.invalid && i.removeFromArray(f, s);
        }
      }();var g = function g() {
        if (!c) {
          c = a.makeBoundingBox();for (var t = 0; t < e.length; t++) {
            a.updateBoundingBox(c, e[t].boundingBox());
          }
        }return c;
      };if (r.skipping && !u) return null;for (var y = null, m = e.length / 1, b = !u, x = 0; x < e.length; x++) {
        var w = e[x],
            E = w._private.rscratch,
            P = E.imgLayerCaches = E.imgLayerCaches || {},
            C = P[n];if (C) y = C;else {
          if ((!y || y.eles.length >= m || !a.boundingBoxInBoundingBox(y.bb, w.boundingBox())) && !(y = function (e) {
            e = e || {};var t = e.after;if (g(), c.w * p * (c.h * p) > 16e6) return null;var i = r.makeLayer(c, n);if (null != t) {
              var a = f.indexOf(t) + 1;f.splice(a, 0, i);
            } else (void 0 === e.insert || e.insert) && f.unshift(i);return i;
          }({ insert: !0, after: y }))) return null;d || b ? r.queueLayer(y, w) : r.drawEleInLayer(y, w, n, t), y.eles.push(w), P[n] = y;
        }
      }return d || (b ? null : f);
    }, c.getEleLevelForLayerLevel = function (e, t) {
      return e;
    }, c.drawEleInLayer = function (e, t, n, i) {
      var a = this,
          o = this.renderer,
          s = e.context,
          l = t.boundingBox();if (0 !== l.w && 0 !== l.h && t.visible()) {
        var u = a.eleTxrCache,
            c = u.reasons.highQuality;n = a.getEleLevelForLayerLevel(n, i);var d = u.getElement(t, l, null, n, c);d ? (r(s, !1), s.drawImage(d.texture.canvas, d.x, 0, d.width, d.height, l.x1, l.y1, l.w, l.h), r(s, !0)) : o.drawElement(s, t);
      }
    }, c.levelIsComplete = function (e, t) {
      var n = this,
          r = n.layersByLevel[e];if (!r || 0 === r.length) return !1;for (var i = 0, a = 0; a < r.length; a++) {
        var o = r[a];if (o.reqs > 0) return !1;if (o.invalid) return !1;i += o.eles.length;
      }return i === t.length;
    }, c.validateLayersElesOrdering = function (e, t) {
      var n = this.layersByLevel[e];if (n) for (var r = 0; r < n.length; r++) {
        for (var i = n[r], a = -1, o = 0; o < t.length; o++) {
          if (i.eles[0] === t[o]) {
            a = o;break;
          }
        }if (a < 0) this.invalidateLayer(i);else for (var s = a, o = 0; o < i.eles.length; o++) {
          if (i.eles[o] !== t[s + o]) {
            this.invalidateLayer(i);break;
          }
        }
      }
    }, c.updateElementsInLayers = function (e, t) {
      for (var n = this, r = s.element(e[0]), i = 0; i < e.length; i++) {
        for (var a = r ? null : e[i], o = r ? e[i] : e[i].ele, l = o._private.rscratch, u = l.imgLayerCaches = l.imgLayerCaches || {}, c = -4; c <= 2; c++) {
          var d = u[c];d && (a && n.getEleLevelForLayerLevel(d.level) !== a.level || t(d, o, a));
        }
      }
    }, c.haveLayers = function () {
      for (var e = this, t = !1, n = -4; n <= 2; n++) {
        var r = e.layersByLevel[n];if (r && r.length > 0) {
          t = !0;break;
        }
      }return t;
    }, c.invalidateElements = function (e) {
      var t = this;t.lastInvalidationTime = i.performanceNow(), 0 !== e.length && t.haveLayers() && t.updateElementsInLayers(e, function (e, n, r) {
        t.invalidateLayer(e);
      });
    }, c.invalidateLayer = function (e) {
      if (this.lastInvalidationTime = i.performanceNow(), !e.invalid) {
        var t = e.level,
            n = e.eles,
            r = this.layersByLevel[t];i.removeFromArray(r, e), e.elesQueue = [], e.invalid = !0, e.replacement && (e.replacement.invalid = !0);for (var a = 0; a < n.length; a++) {
          var o = n[a]._private.rscratch.imgLayerCaches;o && (o[t] = null);
        }
      }
    }, c.refineElementTextures = function (e) {
      var t = this;t.updateElementsInLayers(e, function (e, n, r) {
        var i = e.replacement;if (i || (i = e.replacement = t.makeLayer(e.bb, e.level), i.replaces = e, i.eles = e.eles), !i.reqs) for (var a = 0; a < i.eles.length; a++) {
          t.queueLayer(i, i.eles[a]);
        }
      });
    }, c.setupEleCacheInvalidation = function () {
      var e = this,
          t = [],
          n = i.debounce(function () {
        e.refineElementTextures(t), t = [];
      }, 50);e.eleTxrCache.onDequeue(function (e) {
        for (var r = 0; r < e.length; r++) {
          t.push(e[r]);
        }n();
      });
    }, c.queueLayer = function (e, t) {
      var n = this,
          r = n.layersQueue,
          i = e.elesQueue,
          a = i.hasId = i.hasId || {};if (!e.replacement) {
        if (t) {
          if (a[t.id()]) return;i.push(t), a[t.id()] = !0;
        }e.reqs ? (e.reqs++, r.updateItem(e)) : (e.reqs = 1, r.push(e));
      }
    }, c.dequeue = function (e) {
      for (var t = this, n = t.layersQueue, r = [], i = 0; i < 1 && 0 !== n.size();) {
        var a = n.peek();if (a.replacement) n.pop();else if (a.replaces && a !== a.replaces.replacement) n.pop();else if (a.invalid) n.pop();else {
          var o = a.elesQueue.shift();o && (t.drawEleInLayer(a, o, a.level, e), i++), 0 === r.length && r.push(!0), 0 === a.elesQueue.length && (n.pop(), a.reqs = 0, a.replaces && t.applyLayerReplacement(a), t.requestRedraw());
        }
      }return r;
    }, c.applyLayerReplacement = function (e) {
      var t = this,
          n = t.layersByLevel[e.level],
          r = e.replaces,
          i = n.indexOf(r);if (!(i < 0 || r.invalid)) {
        n[i] = e;for (var a = 0; a < e.eles.length; a++) {
          var o = e.eles[a]._private,
              s = o.imgLayerCaches = o.imgLayerCaches || {};s && (s[e.level] = e);
        }t.requestRedraw();
      }
    }, c.requestRedraw = i.debounce(function () {
      var e = this.renderer;e.redrawHint("eles", !0), e.redrawHint("drag", !0), e.redraw();
    }, 100), c.setupDequeueing = l.setupDequeueing({ deqRedrawThreshold: 50, deqCost: .15, deqAvgCost: .1, deqNoDrawCost: .9, deqFastCost: .9, deq: function deq(e, t) {
        return e.dequeue(t);
      }, onDeqd: i.noop, shouldRedraw: i.trueify, priority: function priority(e) {
        return e.renderer.beforeRenderPriorities.lyrTxrDeq;
      } }), e.exports = u;
  }, function (e, t, n) {
    "use strict";
    var r,
        i = {};i.arrowShapeImpl = function (e) {
      return (r || (r = { polygon: function polygon(e, t) {
          for (var n = 0; n < t.length; n++) {
            var r = t[n];e.lineTo(r.x, r.y);
          }
        }, "triangle-backcurve": function triangleBackcurve(e, t, n) {
          for (var r, i = 0; i < t.length; i++) {
            var a = t[i];0 === i && (r = a), e.lineTo(a.x, a.y);
          }e.quadraticCurveTo(n.x, n.y, r.x, r.y);
        }, "triangle-tee": function triangleTee(e, t, n) {
          e.beginPath && e.beginPath();for (var r = t, i = 0; i < r.length; i++) {
            var a = r[i];e.lineTo(a.x, a.y);
          }e.closePath && e.closePath(), e.beginPath && e.beginPath();var o = n,
              s = n[0];e.moveTo(s.x, s.y);for (var i = 0; i < o.length; i++) {
            var a = o[i];e.lineTo(a.x, a.y);
          }e.closePath && e.closePath();
        }, "triangle-cross": function triangleCross(e, t, n) {
          e.beginPath && e.beginPath();for (var r = t, i = 0; i < r.length; i++) {
            var a = r[i];e.lineTo(a.x, a.y);
          }e.closePath && e.closePath(), e.beginPath && e.beginPath();var o = n,
              s = n[0];e.moveTo(s.x, s.y);for (var i = 0; i < o.length; i++) {
            var a = o[i];e.lineTo(a.x, a.y);
          }e.closePath && e.closePath();
        }, circle: function circle(e, t, n, r) {
          e.arc(t, n, r, 0, 2 * Math.PI, !1);
        } }))[e];
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = {};i.drawElement = function (e, t, n, r) {
      var i = this;t.isNode() ? i.drawNode(e, t, n, r) : i.drawEdge(e, t, n, r);
    }, i.drawCachedElement = function (e, t, n, i) {
      var a = this,
          o = t.boundingBox();if (0 !== o.w && 0 !== o.h && (!i || r.boundingBoxesIntersect(o, i))) {
        var s = a.data.eleTxrCache.getElement(t, o, n);null != s ? e.drawImage(s.texture.canvas, s.x, 0, s.width, s.height, o.x1, o.y1, o.w, o.h) : a.drawElement(e, t);
      }
    }, i.drawElements = function (e, t) {
      for (var n = this, r = 0; r < t.length; r++) {
        var i = t[r];n.drawElement(e, i);
      }
    }, i.drawCachedElements = function (e, t, n, r) {
      for (var i = this, a = 0; a < t.length; a++) {
        var o = t[a];i.drawCachedElement(e, o, n, r);
      }
    }, i.drawCachedNodes = function (e, t, n, r) {
      for (var i = this, a = 0; a < t.length; a++) {
        var o = t[a];o.isNode() && i.drawCachedElement(e, o, n, r);
      }
    }, i.drawLayeredElements = function (e, t, n, r) {
      var i = this,
          a = i.data.lyrTxrCache.getLayers(t, n);if (a) for (var o = 0; o < a.length; o++) {
        var s = a[o],
            l = s.bb;0 !== l.w && 0 !== l.h && e.drawImage(s.canvas, l.x1, l.y1, l.w, l.h);
      } else i.drawCachedElements(e, t, n, r);
    }, i.drawDebugPoints = function (e, t) {
      for (var n = function n(t, _n4, r) {
        e.fillStyle = r, e.fillRect(t - 1, _n4 - 1, 3, 3);
      }, r = 0; r < t.length; r++) {
        var i = t[r],
            a = i._private.rscratch;if (i.isNode()) {
          var o = i.position();n(o.x, o.y, "magenta");
        } else {
          for (var s = a.allpts, l = 0; l + 1 < s.length; l += 2) {
            n(s[l], s[l + 1], "cyan");
          }n(a.midX, a.midY, "yellow");
        }
      }
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.drawEdge = function (e, t, n, r) {
      var i = this,
          a = t._private.rscratch,
          o = i.usePaths();if (t.visible() && !a.badLine && null != a.allpts && !isNaN(a.allpts[0])) {
        var s = void 0;n && (s = n, e.translate(-s.x1, -s.y1));var l = t.pstyle("overlay-padding").pfValue,
            u = 2 * l,
            c = t.pstyle("overlay-opacity").value,
            d = t.pstyle("overlay-color").value,
            h = t.pstyle("line-color").value,
            p = t.pstyle("opacity").value,
            f = t.pstyle("line-style").value,
            v = t.pstyle("width").pfValue,
            g = function g() {
          var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : p;e.lineWidth = v, e.lineCap = "butt", i.strokeStyle(e, h[0], h[1], h[2], n), i.drawEdgePath(t, e, a.allpts, f);
        },
            y = function y() {
          var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : p;i.drawArrowheads(e, t, n);
        };e.lineJoin = "round";if ("yes" === t.pstyle("ghost").value) {
          var m = t.pstyle("ghost-offset-x").pfValue,
              b = t.pstyle("ghost-offset-y").pfValue,
              x = t.pstyle("ghost-opacity").value,
              w = p * x;e.translate(m, b), g(w), y(w), e.translate(-m, -b);
        }g(), y(), function () {
          var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c;e.lineWidth = u, "self" !== a.edgeType || o ? e.lineCap = "round" : e.lineCap = "butt", i.strokeStyle(e, d[0], d[1], d[2], n), i.drawEdgePath(t, e, a.allpts, "solid");
        }(), function () {
          i.drawElementText(e, t, r);
        }(), n && e.translate(s.x1, s.y1);
      }
    }, r.drawEdgePath = function (e, t, n, r) {
      var i = e._private.rscratch,
          a = t,
          o = void 0,
          s = !1,
          l = this.usePaths();if (l) {
        var u = n.join("$");i.pathCacheKey && i.pathCacheKey === u ? (o = t = i.pathCache, s = !0) : (o = t = new Path2D(), i.pathCacheKey = u, i.pathCache = o);
      }if (a.setLineDash) switch (r) {case "dotted":
          a.setLineDash([1, 1]);break;case "dashed":
          a.setLineDash([6, 3]);break;case "solid":
          a.setLineDash([]);}if (!s && !i.badLine) switch (t.beginPath && t.beginPath(), t.moveTo(n[0], n[1]), i.edgeType) {case "bezier":case "self":case "compound":case "multibezier":
          for (var c = 2; c + 3 < n.length; c += 4) {
            t.quadraticCurveTo(n[c], n[c + 1], n[c + 2], n[c + 3]);
          }break;case "straight":case "segments":case "haystack":
          for (var d = 2; d + 1 < n.length; d += 2) {
            t.lineTo(n[d], n[d + 1]);
          }}t = a, l ? t.stroke(o) : t.stroke(), t.setLineDash && t.setLineDash([]);
    }, r.drawArrowheads = function (e, t, n) {
      var r = t._private.rscratch,
          i = "haystack" === r.edgeType;i || this.drawArrowhead(e, t, "source", r.arrowStartX, r.arrowStartY, r.srcArrowAngle, n), this.drawArrowhead(e, t, "mid-target", r.midX, r.midY, r.midtgtArrowAngle, n), this.drawArrowhead(e, t, "mid-source", r.midX, r.midY, r.midsrcArrowAngle, n), i || this.drawArrowhead(e, t, "target", r.arrowEndX, r.arrowEndY, r.tgtArrowAngle, n);
    }, r.drawArrowhead = function (e, t, n, r, i, a, o) {
      if (!(isNaN(r) || null == r || isNaN(i) || null == i || isNaN(a) || null == a)) {
        var s = this,
            l = t.pstyle(n + "-arrow-shape").value;if ("none" !== l) {
          var u = "hollow" === t.pstyle(n + "-arrow-fill").value ? "both" : "filled",
              c = t.pstyle(n + "-arrow-fill").value,
              d = t.pstyle("width").pfValue,
              h = t.pstyle("opacity").value;void 0 === o && (o = h);var p = e.globalCompositeOperation;1 === o && "hollow" !== c || (e.globalCompositeOperation = "destination-out", s.fillStyle(e, 255, 255, 255, 1), s.strokeStyle(e, 255, 255, 255, 1), s.drawArrowShape(t, n, e, u, d, l, r, i, a), e.globalCompositeOperation = p);var f = t.pstyle(n + "-arrow-color").value;s.fillStyle(e, f[0], f[1], f[2], o), s.strokeStyle(e, f[0], f[1], f[2], o), s.drawArrowShape(t, n, e, c, d, l, r, i, a);
        }
      }
    }, r.drawArrowShape = function (e, t, n, r, i, a, o, s, l) {
      var u = this,
          c = this.usePaths(),
          d = e._private.rscratch,
          h = !1,
          p = void 0,
          f = n,
          v = { x: o, y: s },
          g = e.pstyle("arrow-scale").value,
          y = this.getArrowWidth(i, g),
          m = u.arrowShapes[a];if (c) {
        var b = y + "$" + a + "$" + l + "$" + o + "$" + s;d.arrowPathCacheKey = d.arrowPathCacheKey || {}, d.arrowPathCache = d.arrowPathCache || {};d.arrowPathCacheKey[t] === b ? (p = n = d.arrowPathCache[t], h = !0) : (p = n = new Path2D(), d.arrowPathCacheKey[t] = b, d.arrowPathCache[t] = p);
      }n.beginPath && n.beginPath(), h || m.draw(n, y, l, v, i), !m.leavePathOpen && n.closePath && n.closePath(), n = f, "filled" !== r && "both" !== r || (c ? n.fill(p) : n.fill()), "hollow" !== r && "both" !== r || (n.lineWidth = m.matchEdgeWidth ? i : 1, n.lineJoin = "miter", c ? n.stroke(p) : n.stroke());
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.safeDrawImage = function (e, t, n, r, i, a, o, s, l, u) {
      i <= 0 || a <= 0 || l <= 0 || u <= 0 || e.drawImage(t, n, r, i, a, o, s, l, u);
    }, r.drawInscribedImage = function (e, t, n, r, i) {
      var a = this,
          o = n.position(),
          s = o.x,
          l = o.y,
          u = n.cy().style(),
          c = u.getIndexedStyle.bind(u),
          d = c(n, "background-fit", "value", r),
          h = c(n, "background-repeat", "value", r),
          p = n.width(),
          f = n.height(),
          v = 2 * n.padding(),
          g = p + ("inner" === c(n, "background-width-relative-to", "value", r) ? 0 : v),
          y = f + ("inner" === c(n, "background-height-relative-to", "value", r) ? 0 : v),
          m = n._private.rscratch,
          b = n.pstyle("background-clip").value,
          x = "node" === b,
          w = c(n, "background-image-opacity", "value", r) * i,
          E = t.width || t.cachedW,
          P = t.height || t.cachedH;null != E && null != P || (document.body.appendChild(t), E = t.cachedW = t.width || t.offsetWidth, P = t.cachedH = t.height || t.offsetHeight, document.body.removeChild(t));var C = E,
          S = P;if ("auto" !== c(n, "background-width", "value", r) && (C = "%" === c(n, "background-width", "units", r) ? c(n, "background-width", "pfValue", r) * g : c(n, "background-width", "pfValue", r)), "auto" !== c(n, "background-height", "value", r) && (S = "%" === c(n, "background-height", "units", r) ? c(n, "background-height", "pfValue", r) * y : c(n, "background-height", "pfValue", r)), 0 !== C && 0 !== S) {
        if ("contain" === d) {
          var T = Math.min(g / C, y / S);C *= T, S *= T;
        } else if ("cover" === d) {
          var T = Math.max(g / C, y / S);C *= T, S *= T;
        }var D = s - g / 2;"%" === c(n, "background-position-x", "units", r) ? D += (g - C) * c(n, "background-position-x", "pfValue", r) : D += c(n, "background-position-x", "pfValue", r);var k = l - y / 2;"%" === c(n, "background-position-y", "units", r) ? k += (y - S) * c(n, "background-position-y", "pfValue", r) : k += c(n, "background-position-y", "pfValue", r), m.pathCache && (D -= s, k -= l, s = 0, l = 0);var _ = e.globalAlpha;if (e.globalAlpha = w, "no-repeat" === h) x && (e.save(), m.pathCache ? e.clip(m.pathCache) : (a.nodeShapes[a.getNodeShape(n)].draw(e, s, l, g, y), e.clip())), a.safeDrawImage(e, t, 0, 0, E, P, D, k, C, S), x && e.restore();else {
          var M = e.createPattern(t, h);e.fillStyle = M, a.nodeShapes[a.getNodeShape(n)].draw(e, s, l, g, y), e.translate(D, k), e.fill(), e.translate(-D, -k);
        }e.globalAlpha = _;
      }
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    function r(e, t, n, r, i, a) {
      var a = a || 5;e.beginPath(), e.moveTo(t + a, n), e.lineTo(t + r - a, n), e.quadraticCurveTo(t + r, n, t + r, n + a), e.lineTo(t + r, n + i - a), e.quadraticCurveTo(t + r, n + i, t + r - a, n + i), e.lineTo(t + a, n + i), e.quadraticCurveTo(t, n + i, t, n + i - a), e.lineTo(t, n + a), e.quadraticCurveTo(t, n, t + a, n), e.closePath(), e.fill();
    }var i = n(1),
        a = n(2),
        o = {};o.eleTextBiggerThanMin = function (e, t) {
      if (!t) {
        var n = e.cy().zoom(),
            r = this.getPixelRatio(),
            i = Math.ceil(a.log2(n * r));t = Math.pow(2, i);
      }return !(e.pstyle("font-size").pfValue * t < e.pstyle("min-zoomed-font-size").pfValue);
    }, o.drawElementText = function (e, t, n) {
      var r = this;if (void 0 === n) {
        if (!r.eleTextBiggerThanMin(t)) return;
      } else if (!n) return;if (t.isNode()) {
        var i = t.pstyle("label");if (!i || !i.value) return;var a = t.pstyle("text-halign").strValue;t.pstyle("text-valign").strValue;switch (a) {case "left":
            e.textAlign = "right";break;case "right":
            e.textAlign = "left";break;default:
            e.textAlign = "center";}e.textBaseline = "bottom";
      } else {
        var i = t.pstyle("label"),
            o = t.pstyle("source-label"),
            s = t.pstyle("target-label");if (!(i && i.value || o && o.value || s && s.value)) return;e.textAlign = "center", e.textBaseline = "bottom";
      }r.drawText(e, t), t.isEdge() && (r.drawText(e, t, "source"), r.drawText(e, t, "target"));
    }, o.drawNodeText = o.drawEdgeText = o.drawElementText, o.getFontCache = function (e) {
      var t;this.fontCaches = this.fontCaches || [];for (var n = 0; n < this.fontCaches.length; n++) {
        if (t = this.fontCaches[n], t.context === e) return t;
      }return t = { context: e }, this.fontCaches.push(t), t;
    }, o.setupTextStyle = function (e, t) {
      var n = t.effectiveOpacity(),
          r = t.pstyle("font-style").strValue,
          i = t.pstyle("font-size").pfValue + "px",
          a = t.pstyle("font-family").strValue,
          o = t.pstyle("font-weight").strValue,
          s = t.pstyle("text-opacity").value * t.pstyle("opacity").value * n,
          l = t.pstyle("text-outline-opacity").value * s,
          u = t.pstyle("color").value,
          c = t.pstyle("text-outline-color").value,
          d = t._private.fontKey,
          h = this.getFontCache(e);h.key !== d && (e.font = r + " " + o + " " + i + " " + a, h.key = d), e.lineJoin = "round", this.fillStyle(e, u[0], u[1], u[2], s), this.strokeStyle(e, c[0], c[1], c[2], l);
    }, o.drawText = function (e, t, n) {
      var a = t._private,
          o = a.rscratch,
          s = t.effectiveOpacity();if (0 !== s && 0 !== t.pstyle("text-opacity").value) {
        var l = i.getPrefixedProperty(o, "labelX", n),
            u = i.getPrefixedProperty(o, "labelY", n),
            c = this.getLabelText(t, n);if (null != c && "" !== c && !isNaN(l) && !isNaN(u)) {
          this.setupTextStyle(e, t);var d = n ? n + "-" : "",
              h = i.getPrefixedProperty(o, "labelWidth", n),
              p = i.getPrefixedProperty(o, "labelHeight", n),
              f = i.getPrefixedProperty(o, "labelAngle", n),
              v = t.pstyle(d + "text-margin-x").pfValue,
              g = t.pstyle(d + "text-margin-y").pfValue,
              y = t.isEdge(),
              m = (t.isNode(), t.pstyle("text-halign").value),
              b = t.pstyle("text-valign").value;y && (m = "center", b = "center"), l += v, u += g;var x,
              w = t.pstyle("text-rotation");if (0 !== (x = "autorotate" === w.strValue ? y ? f : 0 : "none" === w.strValue ? 0 : w.pfValue)) {
            var E = l,
                P = u;e.translate(E, P), e.rotate(x), l = 0, u = 0;
          }switch (b) {case "top":
              break;case "center":
              u += p / 2;break;case "bottom":
              u += p;}var C = t.pstyle("text-background-opacity").value,
              S = t.pstyle("text-border-opacity").value,
              T = t.pstyle("text-border-width").pfValue,
              D = t.pstyle("text-background-padding").pfValue;if (C > 0 || T > 0 && S > 0) {
            var k = l - D;switch (m) {case "left":
                k -= h;break;case "center":
                k -= h / 2;}var _ = u - p - D,
                M = h + 2 * D,
                I = p + 2 * D;if (C > 0) {
              var N = e.fillStyle,
                  B = t.pstyle("text-background-color").value;e.fillStyle = "rgba(" + B[0] + "," + B[1] + "," + B[2] + "," + C * s + ")";"roundrectangle" == t.pstyle("text-background-shape").strValue ? r(e, k, _, M, I, 2) : e.fillRect(k, _, M, I), e.fillStyle = N;
            }if (T > 0 && S > 0) {
              var z = e.strokeStyle,
                  L = e.lineWidth,
                  A = t.pstyle("text-border-color").value,
                  O = t.pstyle("text-border-style").value;if (e.strokeStyle = "rgba(" + A[0] + "," + A[1] + "," + A[2] + "," + S * s + ")", e.lineWidth = T, e.setLineDash) switch (O) {case "dotted":
                  e.setLineDash([1, 1]);break;case "dashed":
                  e.setLineDash([4, 2]);break;case "double":
                  e.lineWidth = T / 4, e.setLineDash([]);break;case "solid":
                  e.setLineDash([]);}if (e.strokeRect(k, _, M, I), "double" === O) {
                var R = T / 2;e.strokeRect(k + R, _ + R, M - 2 * R, I - 2 * R);
              }e.setLineDash && e.setLineDash([]), e.lineWidth = L, e.strokeStyle = z;
            }
          }var V = 2 * t.pstyle("text-outline-width").pfValue;if (V > 0 && (e.lineWidth = V), "wrap" === t.pstyle("text-wrap").value) {
            var q = i.getPrefixedProperty(o, "labelWrapCachedLines", n),
                F = p / q.length;switch (b) {case "top":
                u -= (q.length - 1) * F;break;case "center":case "bottom":
                u -= (q.length - 1) * F;}for (var j = 0; j < q.length; j++) {
              V > 0 && e.strokeText(q[j], l, u), e.fillText(q[j], l, u), u += F;
            }
          } else V > 0 && e.strokeText(c, l, u), e.fillText(c, l, u);0 !== x && (e.rotate(-x), e.translate(-E, -P));
        }
      }
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = {};i.drawNode = function (e, t, n, i) {
      var a = this,
          o = void 0,
          s = void 0,
          l = t._private,
          u = l.rscratch,
          c = t.position();if (r.number(c.x) && r.number(c.y) && t.visible()) {
        var d = t.effectiveOpacity(),
            h = a.usePaths(),
            p = void 0,
            f = !1,
            v = t.padding();o = t.width() + 2 * v, s = t.height() + 2 * v;var g = void 0;n && (g = n, e.translate(-g.x1, -g.y1));for (var y = t.pstyle("background-image"), m = y.value, b = new Array(m.length), x = new Array(m.length), w = 0, E = 0; E < m.length; E++) {
          var P = m[E];if (b[E] = null != P && "none" !== P) {
            var C = t.cy().style().getIndexedStyle(t, "background-image-crossorigin", "value", E);w++, x[E] = a.getCachedImage(P, C, function () {
              t.emitAndNotify("background");
            });
          }
        }var S = t.pstyle("background-blacken").value,
            T = t.pstyle("border-width").pfValue,
            D = t.pstyle("background-color").value,
            k = t.pstyle("background-opacity").value * d,
            _ = t.pstyle("border-color").value,
            M = t.pstyle("border-style").value,
            I = t.pstyle("border-opacity").value * d;e.lineJoin = "miter";var N = function N() {
          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : k;a.fillStyle(e, D[0], D[1], D[2], t);
        },
            B = function B() {
          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : I;a.strokeStyle(e, _[0], _[1], _[2], t);
        },
            z = t.pstyle("shape").strValue,
            L = t.pstyle("shape-polygon-points").pfValue;if (h) {
          var A = z + "$" + o + "$" + s + ("polygon" === z ? "$" + L.join("$") : "");e.translate(c.x, c.y), u.pathCacheKey === A ? (p = u.pathCache, f = !0) : (p = new Path2D(), u.pathCacheKey = A, u.pathCache = p);
        }var O = function O() {
          if (!f) {
            var n = c;h && (n = { x: 0, y: 0 }), a.nodeShapes[a.getNodeShape(t)].draw(p || e, n.x, n.y, o, s);
          }h ? e.fill(p) : e.fill();
        },
            R = function R() {
          for (var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d, r = l.backgrounding, i = 0, o = 0; o < x.length; o++) {
            b[o] && x[o].complete && !x[o].error && (i++, a.drawInscribedImage(e, x[o], t, o, n));
          }l.backgrounding = !(i === w), r !== l.backgrounding && t.updateStyle(!1);
        },
            V = function V() {
          var n = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
              r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : d;a.hasPie(t) && (a.drawPie(e, t, r), n && (h || a.nodeShapes[a.getNodeShape(t)].draw(e, c.x, c.y, o, s)));
        },
            q = function q() {
          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : d,
              n = (S > 0 ? S : -S) * t,
              r = S > 0 ? 0 : 255;0 !== S && (a.fillStyle(e, r, r, r, n), h ? e.fill(p) : e.fill());
        },
            F = function F() {
          if (T > 0) {
            if (e.lineWidth = T, e.lineCap = "butt", e.setLineDash) switch (M) {case "dotted":
                e.setLineDash([1, 1]);break;case "dashed":
                e.setLineDash([4, 2]);break;case "solid":case "double":
                e.setLineDash([]);}if (h ? e.stroke(p) : e.stroke(), "double" === M) {
              e.lineWidth = T / 3;var t = e.globalCompositeOperation;e.globalCompositeOperation = "destination-out", h ? e.stroke(p) : e.stroke(), e.globalCompositeOperation = t;
            }e.setLineDash && e.setLineDash([]);
          }
        };if ("yes" === t.pstyle("ghost").value) {
          var j = t.pstyle("ghost-offset-x").pfValue,
              X = t.pstyle("ghost-offset-y").pfValue,
              Y = t.pstyle("ghost-opacity").value,
              W = Y * d;e.translate(j, X), N(Y * k), O(), R(W), V(0 !== S || 0 !== T), q(W), B(Y * I), F(), e.translate(-j, -X);
        }N(), O(), R(), V(0 !== S || 0 !== T), q(), B(), F(), h && e.translate(-c.x, -c.y), function () {
          a.drawElementText(e, t, i);
        }(), function () {
          var n = t.pstyle("overlay-padding").pfValue,
              r = t.pstyle("overlay-opacity").value,
              i = t.pstyle("overlay-color").value;r > 0 && (a.fillStyle(e, i[0], i[1], i[2], r), a.nodeShapes.roundrectangle.draw(e, c.x, c.y, o + 2 * n, s + 2 * n), e.fill());
        }(), n && e.translate(g.x1, g.y1);
      }
    }, i.hasPie = function (e) {
      return e = e[0], e._private.hasPie;
    }, i.drawPie = function (e, t, n, r) {
      t = t[0], r = r || t.position();var i = t.cy().style(),
          a = t.pstyle("pie-size"),
          o = r.x,
          s = r.y,
          l = t.width(),
          u = t.height(),
          c = Math.min(l, u) / 2,
          d = 0;this.usePaths() && (o = 0, s = 0), "%" === a.units ? c *= a.pfValue : void 0 !== a.pfValue && (c = a.pfValue / 2);for (var h = 1; h <= i.pieBackgroundN; h++) {
        var p = t.pstyle("pie-" + h + "-background-size").value,
            f = t.pstyle("pie-" + h + "-background-color").value,
            v = t.pstyle("pie-" + h + "-background-opacity").value * n,
            g = p / 100;g + d > 1 && (g = 1 - d);var y = 1.5 * Math.PI + 2 * Math.PI * d,
            m = 2 * Math.PI * g,
            b = y + m;0 === p || d >= 1 || d + g > 1 || (e.beginPath(), e.moveTo(o, s), e.arc(o, s, c, y, b), e.closePath(), this.fillStyle(e, f[0], f[1], f[2], v), e.fill(), d += g);
      }
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    var r = {},
        i = n(1);r.getPixelRatio = function () {
      var e = this.data.contexts[0];if (null != this.forcedPixelRatio) return this.forcedPixelRatio;var t = e.backingStorePixelRatio || e.webkitBackingStorePixelRatio || e.mozBackingStorePixelRatio || e.msBackingStorePixelRatio || e.oBackingStorePixelRatio || e.backingStorePixelRatio || 1;return (window.devicePixelRatio || 1) / t;
    }, r.paintCache = function (e) {
      for (var t, n = this.paintCaches = this.paintCaches || [], r = !0, i = 0; i < n.length; i++) {
        if (t = n[i], t.context === e) {
          r = !1;break;
        }
      }return r && (t = { context: e }, n.push(t)), t;
    }, r.fillStyle = function (e, t, n, r, i) {
      e.fillStyle = "rgba(" + t + "," + n + "," + r + "," + i + ")";
    }, r.strokeStyle = function (e, t, n, r, i) {
      e.strokeStyle = "rgba(" + t + "," + n + "," + r + "," + i + ")";
    }, r.matchCanvasSize = function (e) {
      var t = this,
          n = t.data,
          r = t.findContainerClientCoords(),
          i = r[2],
          a = r[3],
          o = t.getPixelRatio(),
          s = t.motionBlurPxRatio;e !== t.data.bufferCanvases[t.MOTIONBLUR_BUFFER_NODE] && e !== t.data.bufferCanvases[t.MOTIONBLUR_BUFFER_DRAG] || (o = s);var l,
          u = i * o,
          c = a * o;if (u !== t.canvasWidth || c !== t.canvasHeight) {
        t.fontCaches = null;var d = n.canvasContainer;d.style.width = i + "px", d.style.height = a + "px";for (var h = 0; h < t.CANVAS_LAYERS; h++) {
          l = n.canvases[h], l.width = u, l.height = c, l.style.width = i + "px", l.style.height = a + "px";
        }for (var h = 0; h < t.BUFFER_COUNT; h++) {
          l = n.bufferCanvases[h], l.width = u, l.height = c, l.style.width = i + "px", l.style.height = a + "px";
        }t.textureMult = 1, o <= 1 && (l = n.bufferCanvases[t.TEXTURE_BUFFER], t.textureMult = 2, l.width = u * t.textureMult, l.height = c * t.textureMult), t.canvasWidth = u, t.canvasHeight = c;
      }
    }, r.renderTo = function (e, t, n, r) {
      this.render({ forcedContext: e, forcedZoom: t, forcedPan: n, drawAllLayers: !0, forcedPxRatio: r });
    }, r.render = function (e) {
      function t(e, t, n, r, i) {
        var a = e.globalCompositeOperation;e.globalCompositeOperation = "destination-out", u.fillStyle(e, 255, 255, 255, u.motionBlurTransparency), e.fillRect(t, n, r, i), e.globalCompositeOperation = a;
      }function n(e, n) {
        var i, o, c, d;u.clearingMotionBlur || e !== h.bufferContexts[u.MOTIONBLUR_BUFFER_NODE] && e !== h.bufferContexts[u.MOTIONBLUR_BUFFER_DRAG] ? (i = S, o = P, c = u.canvasWidth, d = u.canvasHeight) : (i = { x: C.x * g, y: C.y * g }, o = E * g, c = u.canvasWidth * g, d = u.canvasHeight * g), e.setTransform(1, 0, 0, 1, 0, 0), "motionBlur" === n ? t(e, 0, 0, c, d) : r || void 0 !== n && !n || e.clearRect(0, 0, c, d), a || (e.translate(i.x, i.y), e.scale(o, o)), l && e.translate(l.x, l.y), s && e.scale(s, s);
      }e = e || i.staticEmptyObject();var r = e.forcedContext,
          a = e.drawAllLayers,
          o = e.drawOnlyNodeLayer,
          s = e.forcedZoom,
          l = e.forcedPan,
          u = this,
          c = void 0 === e.forcedPxRatio ? this.getPixelRatio() : e.forcedPxRatio,
          d = u.cy,
          h = u.data,
          p = h.canvasNeedsRedraw,
          f = u.textureOnViewport && !r && (u.pinching || u.hoverData.dragging || u.swipePanning || u.data.wheelZooming),
          v = void 0 !== e.motionBlur ? e.motionBlur : u.motionBlur,
          g = u.motionBlurPxRatio,
          y = d.hasCompoundNodes(),
          m = u.hoverData.draggingEles,
          b = !(!u.hoverData.selecting && !u.touchData.selecting);v = v && !r && u.motionBlurEnabled && !b;var x = v;r || (u.prevPxRatio !== c && (u.invalidateContainerClientCoordsCache(), u.matchCanvasSize(u.container), u.redrawHint("eles", !0), u.redrawHint("drag", !0)), u.prevPxRatio = c), !r && u.motionBlurTimeout && clearTimeout(u.motionBlurTimeout), v && (null == u.mbFrames && (u.mbFrames = 0), u.mbFrames++, u.mbFrames < 3 && (x = !1), u.mbFrames > u.minMbLowQualFrames && (u.motionBlurPxRatio = u.mbPxRBlurry)), u.clearingMotionBlur && (u.motionBlurPxRatio = 1), u.textureDrawLastFrame && !f && (p[u.NODE] = !0, p[u.SELECT_BOX] = !0);var w = d.style()._private.coreStyle,
          E = d.zoom(),
          P = void 0 !== s ? s : E,
          C = d.pan(),
          S = { x: C.x, y: C.y },
          T = { zoom: E, pan: { x: C.x, y: C.y } },
          D = u.prevViewport;void 0 === D || T.zoom !== D.zoom || T.pan.x !== D.pan.x || T.pan.y !== D.pan.y || m && !y || (u.motionBlurPxRatio = 1), l && (S = l), P *= c, S.x *= c, S.y *= c;var k = u.getCachedZSortedEles();if (f || (u.textureDrawLastFrame = !1), f) {
        u.textureDrawLastFrame = !0;if (!u.textureCache) {
          u.textureCache = {}, u.textureCache.bb = d.mutableElements().boundingBox(), u.textureCache.texture = u.data.bufferCanvases[u.TEXTURE_BUFFER];var _ = u.data.bufferContexts[u.TEXTURE_BUFFER];_.setTransform(1, 0, 0, 1, 0, 0), _.clearRect(0, 0, u.canvasWidth * u.textureMult, u.canvasHeight * u.textureMult), u.render({ forcedContext: _, drawOnlyNodeLayer: !0, forcedPxRatio: c * u.textureMult });var T = u.textureCache.viewport = { zoom: d.zoom(), pan: d.pan(), width: u.canvasWidth, height: u.canvasHeight };T.mpan = { x: (0 - T.pan.x) / T.zoom, y: (0 - T.pan.y) / T.zoom };
        }p[u.DRAG] = !1, p[u.NODE] = !1;var M = h.contexts[u.NODE],
            I = u.textureCache.texture,
            T = u.textureCache.viewport;u.textureCache.bb, M.setTransform(1, 0, 0, 1, 0, 0), v ? t(M, 0, 0, T.width, T.height) : M.clearRect(0, 0, T.width, T.height);var N = w["outside-texture-bg-color"].value,
            B = w["outside-texture-bg-opacity"].value;u.fillStyle(M, N[0], N[1], N[2], B), M.fillRect(0, 0, T.width, T.height);var E = d.zoom();n(M, !1), M.clearRect(T.mpan.x, T.mpan.y, T.width / T.zoom / c, T.height / T.zoom / c), M.drawImage(I, T.mpan.x, T.mpan.y, T.width / T.zoom / c, T.height / T.zoom / c);
      } else u.textureOnViewport && !r && (u.textureCache = null);var z = d.extent(),
          L = u.pinching || u.hoverData.dragging || u.swipePanning || u.data.wheelZooming || u.hoverData.draggingEles,
          A = u.hideEdgesOnViewport && L,
          O = [];if (O[u.NODE] = !p[u.NODE] && v && !u.clearedForMotionBlur[u.NODE] || u.clearingMotionBlur, O[u.NODE] && (u.clearedForMotionBlur[u.NODE] = !0), O[u.DRAG] = !p[u.DRAG] && v && !u.clearedForMotionBlur[u.DRAG] || u.clearingMotionBlur, O[u.DRAG] && (u.clearedForMotionBlur[u.DRAG] = !0), p[u.NODE] || a || o || O[u.NODE]) {
        var R = v && !O[u.NODE] && 1 !== g,
            M = r || (R ? u.data.bufferContexts[u.MOTIONBLUR_BUFFER_NODE] : h.contexts[u.NODE]);n(M, v && !R ? "motionBlur" : void 0), A ? u.drawCachedNodes(M, k.nondrag, c, z) : u.drawLayeredElements(M, k.nondrag, c, z), u.debug && u.drawDebugPoints(M, k.nondrag), a || v || (p[u.NODE] = !1);
      }if (!o && (p[u.DRAG] || a || O[u.DRAG])) {
        var R = v && !O[u.DRAG] && 1 !== g,
            M = r || (R ? u.data.bufferContexts[u.MOTIONBLUR_BUFFER_DRAG] : h.contexts[u.DRAG]);n(M, v && !R ? "motionBlur" : void 0), A ? u.drawCachedNodes(M, k.drag, c, z) : u.drawCachedElements(M, k.drag, c, z), u.debug && u.drawDebugPoints(M, k.drag), a || v || (p[u.DRAG] = !1);
      }if (u.showFps || !o && p[u.SELECT_BOX] && !a) {
        var M = r || h.contexts[u.SELECT_BOX];if (n(M), 1 == u.selection[4] && (u.hoverData.selecting || u.touchData.selecting)) {
          var E = u.cy.zoom(),
              V = w["selection-box-border-width"].value / E;M.lineWidth = V, M.fillStyle = "rgba(" + w["selection-box-color"].value[0] + "," + w["selection-box-color"].value[1] + "," + w["selection-box-color"].value[2] + "," + w["selection-box-opacity"].value + ")", M.fillRect(u.selection[0], u.selection[1], u.selection[2] - u.selection[0], u.selection[3] - u.selection[1]), V > 0 && (M.strokeStyle = "rgba(" + w["selection-box-border-color"].value[0] + "," + w["selection-box-border-color"].value[1] + "," + w["selection-box-border-color"].value[2] + "," + w["selection-box-opacity"].value + ")", M.strokeRect(u.selection[0], u.selection[1], u.selection[2] - u.selection[0], u.selection[3] - u.selection[1]));
        }if (h.bgActivePosistion && !u.hoverData.selecting) {
          var E = u.cy.zoom(),
              q = h.bgActivePosistion;M.fillStyle = "rgba(" + w["active-bg-color"].value[0] + "," + w["active-bg-color"].value[1] + "," + w["active-bg-color"].value[2] + "," + w["active-bg-opacity"].value + ")", M.beginPath(), M.arc(q.x, q.y, w["active-bg-size"].pfValue / E, 0, 2 * Math.PI), M.fill();
        }var F = u.lastRedrawTime;if (u.showFps && F) {
          F = Math.round(F);var j = Math.round(1e3 / F);M.setTransform(1, 0, 0, 1, 0, 0), M.fillStyle = "rgba(255, 0, 0, 0.75)", M.strokeStyle = "rgba(255, 0, 0, 0.75)", M.lineWidth = 1, M.fillText("1 frame = " + F + " ms = " + j + " fps", 0, 20);M.strokeRect(0, 30, 250, 20), M.fillRect(0, 30, 250 * Math.min(j / 60, 1), 20);
        }a || (p[u.SELECT_BOX] = !1);
      }if (v && 1 !== g) {
        var X = h.contexts[u.NODE],
            Y = u.data.bufferCanvases[u.MOTIONBLUR_BUFFER_NODE],
            W = h.contexts[u.DRAG],
            H = u.data.bufferCanvases[u.MOTIONBLUR_BUFFER_DRAG],
            Z = function Z(e, n, r) {
          e.setTransform(1, 0, 0, 1, 0, 0), r || !x ? e.clearRect(0, 0, u.canvasWidth, u.canvasHeight) : t(e, 0, 0, u.canvasWidth, u.canvasHeight);var i = g;e.drawImage(n, 0, 0, u.canvasWidth * i, u.canvasHeight * i, 0, 0, u.canvasWidth, u.canvasHeight);
        };(p[u.NODE] || O[u.NODE]) && (Z(X, Y, O[u.NODE]), p[u.NODE] = !1), (p[u.DRAG] || O[u.DRAG]) && (Z(W, H, O[u.DRAG]), p[u.DRAG] = !1);
      }u.prevViewport = T, u.clearingMotionBlur && (u.clearingMotionBlur = !1, u.motionBlurCleared = !0, u.motionBlur = !0), v && (u.motionBlurTimeout = setTimeout(function () {
        u.motionBlurTimeout = null, u.clearedForMotionBlur[u.NODE] = !1, u.clearedForMotionBlur[u.DRAG] = !1, u.motionBlur = !1, u.clearingMotionBlur = !f, u.mbFrames = 0, p[u.NODE] = !0, p[u.DRAG] = !0, u.redraw();
      }, 100)), r || d.emit("render");
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(2),
        i = {};i.drawPolygonPath = function (e, t, n, r, i, a) {
      var o = r / 2,
          s = i / 2;e.beginPath && e.beginPath(), e.moveTo(t + o * a[0], n + s * a[1]);for (var l = 1; l < a.length / 2; l++) {
        e.lineTo(t + o * a[2 * l], n + s * a[2 * l + 1]);
      }e.closePath();
    }, i.drawRoundRectanglePath = function (e, t, n, i, a) {
      var o = i / 2,
          s = a / 2,
          l = r.getRoundRectangleRadius(i, a);e.beginPath && e.beginPath(), e.moveTo(t, n - s), e.arcTo(t + o, n - s, t + o, n, l), e.arcTo(t + o, n + s, t, n + s, l), e.arcTo(t - o, n + s, t - o, n, l), e.arcTo(t - o, n - s, t, n - s, l), e.lineTo(t, n - s), e.closePath();
    }, i.drawBottomRoundRectanglePath = function (e, t, n, i, a) {
      var o = i / 2,
          s = a / 2,
          l = r.getRoundRectangleRadius(i, a);e.beginPath && e.beginPath(), e.moveTo(t, n - s), e.lineTo(t + o, n - s), e.lineTo(t + o, n), e.arcTo(t + o, n + s, t, n + s, l), e.arcTo(t - o, n + s, t - o, n, l), e.lineTo(t - o, n - s), e.lineTo(t, n - s), e.closePath();
    }, i.drawCutRectanglePath = function (e, t, n, i, a) {
      var o = i / 2,
          s = a / 2,
          l = r.getCutRectangleCornerLength();e.beginPath && e.beginPath(), e.moveTo(t - o + l, n - s), e.lineTo(t + o - l, n - s), e.lineTo(t + o, n - s + l), e.lineTo(t + o, n + s - l), e.lineTo(t + o - l, n + s), e.lineTo(t - o + l, n + s), e.lineTo(t - o, n + s - l), e.lineTo(t - o, n - s + l), e.closePath();
    }, i.drawBarrelPath = function (e, t, n, i, a) {
      var o = i / 2,
          s = a / 2,
          l = t - o,
          u = t + o,
          c = n - s,
          d = n + s,
          h = r.getBarrelCurveConstants(i, a),
          p = h.widthOffset,
          f = h.heightOffset,
          v = h.ctrlPtOffsetPct * p;e.beginPath && e.beginPath(), e.moveTo(l, c + f), e.lineTo(l, d - f), e.quadraticCurveTo(l + v, d, l + p, d), e.lineTo(u - p, d), e.quadraticCurveTo(u - v, d, u, d - f), e.lineTo(u, c + f), e.quadraticCurveTo(u - v, c, u - p, c), e.lineTo(l + p, c), e.quadraticCurveTo(l + v, c, l, c + f), e.closePath();
    };for (var a = Math.sin(0), o = Math.cos(0), s = {}, l = {}, u = Math.PI / 40, c = 0 * Math.PI; c < 2 * Math.PI; c += u) {
      s[c] = Math.sin(c), l[c] = Math.cos(c);
    }i.drawEllipsePath = function (e, t, n, r, i) {
      if (e.beginPath && e.beginPath(), e.ellipse) e.ellipse(t, n, r / 2, i / 2, 0, 0, 2 * Math.PI);else for (var c, d, h = r / 2, p = i / 2, f = 0 * Math.PI; f < 2 * Math.PI; f += u) {
        c = t - h * s[f] * a + h * l[f] * o, d = n + p * l[f] * a + p * s[f] * o, 0 === f ? e.moveTo(c, d) : e.lineTo(c, d);
      }e.closePath();
    }, e.exports = i;
  }, function (e, t, n) {
    "use strict";
    function r(e, t) {
      for (var n = atob(e), r = new ArrayBuffer(n.length), i = new Uint8Array(r), a = 0; a < n.length; a++) {
        i[a] = n.charCodeAt(a);
      }return new Blob([r], { type: t });
    }function i(e) {
      var t = e.indexOf(",");return e.substr(t + 1);
    }function a(e, t, n) {
      var a = t.toDataURL(n, e.quality);switch (e.output) {case "blob":
          return r(i(a), n);case "base64":
          return i(a);case "base64uri":default:
          return a;}
    }var o = n(0),
        s = {};s.createBuffer = function (e, t) {
      var n = document.createElement("canvas");return n.width = e, n.height = t, [n, n.getContext("2d")];
    }, s.bufferCanvasImage = function (e) {
      var t = this.cy,
          n = t.mutableElements(),
          r = n.boundingBox(),
          i = this.findContainerClientCoords(),
          a = e.full ? Math.ceil(r.w) : i[2],
          s = e.full ? Math.ceil(r.h) : i[3],
          l = o.number(e.maxWidth) || o.number(e.maxHeight),
          u = this.getPixelRatio(),
          c = 1;if (void 0 !== e.scale) a *= e.scale, s *= e.scale, c = e.scale;else if (l) {
        var d = 1 / 0,
            h = 1 / 0;o.number(e.maxWidth) && (d = c * e.maxWidth / a), o.number(e.maxHeight) && (h = c * e.maxHeight / s), c = Math.min(d, h), a *= c, s *= c;
      }l || (a *= u, s *= u, c *= u);var p = document.createElement("canvas");p.width = a, p.height = s, p.style.width = a + "px", p.style.height = s + "px";var f = p.getContext("2d");if (a > 0 && s > 0) {
        f.clearRect(0, 0, a, s), f.globalCompositeOperation = "source-over";var v = this.getCachedZSortedEles();if (e.full) f.translate(-r.x1 * c, -r.y1 * c), f.scale(c, c), this.drawElements(f, v), f.scale(1 / c, 1 / c), f.translate(r.x1 * c, r.y1 * c);else {
          var g = t.pan(),
              y = { x: g.x * c, y: g.y * c };c *= t.zoom(), f.translate(y.x, y.y), f.scale(c, c), this.drawElements(f, v), f.scale(1 / c, 1 / c), f.translate(-y.x, -y.y);
        }e.bg && (f.globalCompositeOperation = "destination-over", f.fillStyle = e.bg, f.rect(0, 0, a, s), f.fill());
      }return p;
    }, s.png = function (e) {
      return a(e, this.bufferCanvasImage(e), "image/png");
    }, s.jpg = function (e) {
      return a(e, this.bufferCanvasImage(e), "image/jpeg");
    }, e.exports = s;
  }, function (e, t, n) {
    "use strict";
    var r = {};r.nodeShapeImpl = function (e, t, n, r, i, a, o) {
      switch (e) {case "ellipse":
          return this.drawEllipsePath(t, n, r, i, a);case "polygon":
          return this.drawPolygonPath(t, n, r, i, a, o);case "roundrectangle":
          return this.drawRoundRectanglePath(t, n, r, i, a);case "cutrectangle":
          return this.drawCutRectanglePath(t, n, r, i, a);case "bottomroundrectangle":
          return this.drawBottomRoundRectanglePath(t, n, r, i, a);case "barrel":
          return this.drawBarrelPath(t, n, r, i, a);}
    }, e.exports = r;
  }, function (e, t, n) {
    "use strict";
    var r = n(0),
        i = n(1),
        a = n(18),
        o = function e() {
      if (!(this instanceof e)) return new e();this.length = 0;
    },
        s = o.prototype;s.instanceString = function () {
      return "stylesheet";
    }, s.selector = function (e) {
      return this[this.length++] = { selector: e, properties: [] }, this;
    }, s.css = function (e, t) {
      var n = this.length - 1;if (r.string(e)) this[n].properties.push({ name: e, value: t });else if (r.plainObject(e)) for (var o = e, s = 0; s < a.properties.length; s++) {
        var l = a.properties[s],
            u = o[l.name];if (void 0 === u && (u = o[i.dash2camel(l.name)]), void 0 !== u) {
          var c = l.name,
              d = u;this[n].properties.push({ name: c, value: d });
        }
      }return this;
    }, s.style = s.css, s.generateStyle = function (e) {
      var t = new a(e);return this.appendToStyle(t);
    }, s.appendToStyle = function (e) {
      for (var t = 0; t < this.length; t++) {
        var n = this[t],
            r = n.selector,
            i = n.properties;e.selector(r);for (var a = 0; a < i.length; a++) {
          var o = i[a];e.css(o.name, o.value);
        }
      }return e;
    }, e.exports = o;
  }, function (e, t, n) {
    "use strict";
    e.exports = "snapshot-2fd4aa6cc2-1533526577051";
  }]);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
},{"timers":500}],9:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');
var config = require('./config');
var cytoscape = require('./cytoscape/cytoscape.min');
var nx = require('notatrix');
var sort = require('./sort');
var utils = require('../utils');
var zoom = require('./zoom');

/**
 * Abstraction over the cytoscape canvas.  Handles interaction between the graph
 *  and the user.  For example, all the event handlers are here, the methods that
 *  draw the graph, and the methods that place the mice / locks.
 *
 * @param {App} app a reference to the parent of this module
 */

var Graph = function () {
  function Graph(app) {
    _classCallCheck(this, Graph);

    // save refs
    this.app = app;
    this.config = config;

    // pull this complexity out into its own module
    this.zoom = zoom;

    // keep track for our progress bar
    this.progress = {
      done: 0,
      total: 0
    };

    // GUI-state stuff
    this.intercepted = false;
    this.editing = null;
    this.moving_dependency = null;

    // default options for the cytoscape canvas
    this.options = {
      container: this.app.gui.config.is_browser ? $('#cy') : null,
      boxSelectionEnabled: false,
      autounselectify: true,
      autoungrabify: true,
      zoomingEnabled: true,
      userZoomingEnabled: true,
      wheelSensitivity: 0.1,
      style: require('./cy-style'),
      layout: null,
      elements: []
    };

    // total number of elements in the graph
    this.length = 0;

    // number of "clumps" in the graph (i.e. form-node, pos-node, pos-edge, and
    //  number-node all form a single "clump"). the clump determines the horiz
    //  positioning of the cytoscape eles
    this.clumps = 0;

    // selector for our currently locked node/edge
    this.locked = null;

    // timer to enforce our mouse-move broadcast min-interval
    this.mouseBlocked = false;

    // load configuration prefs
    this.load();
  }

  // ---------------------------------------------------------------------------
  // core functionality

  /**
   * Build a list of cytoscape elements, both nodes and edges.  This function
   *  also validates all the elements.
   *
   * @return {Array} [{ data: Object, classes: String }]
   */


  _createClass(Graph, [{
    key: 'draw',


    /**
     * Create the cytoscape instance and populate it with the nodes and edges we
     *  generate in `this.eles`.
     *
     * @return {Graph} (chaining)
     */
    value: function draw() {

      // cache a ref
      var corpus = this.app.corpus;

      // extend our default cytoscape config based on current params
      this.options.layout = {
        name: 'tree',
        padding: 0,
        nodeDimensionsIncludeLabels: false,
        cols: corpus.is_vertical ? 2 : undefined,
        rows: corpus.is_vertical ? undefined : 2,
        sort: corpus.is_vertical ? sort.vertical : corpus.is_ltr ? sort.ltr : sort.rtl
      };

      // set the cytoscape content
      this.options.elements = corpus.isParsed ? this.eles : [];

      // instantiate and recall zoom/pan
      this.cy = cytoscape(this.options).minZoom(0.1).maxZoom(10.0).zoom(config.zoom).pan(config.pan);

      // see if we should calculate a zoom/pan or use our default
      this.zoom.checkFirst(this);

      // add the mice and locks from `collab`
      this.drawMice();
      this.setLocks();

      // check if we had something locked already before we redrew the graph
      if (config.locked_index === this.app.corpus.index) {

        // add the class to the element
        var locked = this.cy.$('#' + config.locked_id);
        locked.addClass(config.locked_classes);

        if (config.locked_classes.indexOf('merge-source') > -1) {

          // add the classes to adjacent elements if we were merging

          var left = this.getPrevForm();
          if (left && !left.hasClass('activated') && !left.hasClass('blocked') && left.data('type') === 'token') left.addClass('neighbor merge-left');

          var right = this.getNextForm();
          if (right && !right.hasClass('activated') && !right.hasClass('blocked') && right.data('type') === 'token') right.addClass('neighbor merge-right');
        } else if (config.locked_classes.indexOf('combine-source') > -1) {

          // add the classes to the adjacent elements if we were combining

          var _left = this.getPrevForm();
          if (_left && !_left.hasClass('activated') && !_left.hasClass('blocked') && _left.data('type') === 'token') _left.addClass('neighbor combine-left');

          var _right = this.getNextForm();
          if (_right && !_right.hasClass('activated') && !_right.hasClass('blocked') && _right.data('type') === 'token') _right.addClass('neighbor combine-right');
        }

        // make sure we lock it in the same way as if we had just clicked it
        this.lock(locked);
      }

      // set event handler callbacks
      return this.bind();
    }

    /**
     * Bind event handlers to the cytoscape elements and the enclosing canvas.
     *
     * @return {Graph} (chaining)
     */

  }, {
    key: 'bind',
    value: function bind() {
      var _this = this;

      // avoid problems w/ `this`-rebinding in callbacks
      var self = this;

      // make sure zoom is bound to the correct cytoscape instance
      this.zoom.bind(this);

      // set a countdown to triggering a "background" click unless a node/edge intercepts it
      $('#cy canvas, #mute').mouseup(function (e) {

        // force focus off our inputs/textarea
        $(':focus').blur();
        self.intercepted = false;
        setTimeout(function () {
          return self.clear();
        }, 100);
        self.save();
      });

      // don't clear if we clicked inside #edit
      $('#edit').mouseup(function (e) {
        self.intercepted = true;
      });

      // if we're dragging, don't clear; also save after we change the zoom
      $('#cy canvas').mousemove(function (e) {
        self.intercepted = true;
      }).on('wheel', function (e) {
        return self.save();
      });

      this.cy.on('mousemove', function (e) {

        // send out a 'move mouse' event at most every `mouse_move_delay` msecs
        if (self.app.initialized && !self.mouseBlocked) self.app.socket.broadcast('move mouse', e.position);

        // enforce the delay
        self.mouseBlocked = true;
        setTimeout(function () {
          self.mouseBlocked = false;
        }, config.mouse_move_delay);
      });

      // don't clear if we right- or left-click on an element
      this.cy.on('click cxttapend', '*', function (e) {

        self.intercepted = true;

        // debugging
        console.info('clicked ' + e.target.attr('id') + ', data:', e.target.data());
      });

      // bind the cy events
      self.cy.on('click', 'node.form', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.cy.$('.multiword-active').removeClass('multiword-active');

        if (self.moving_dependency) {

          var dep = self.cy.$('.selected');
          var source = self.cy.$('.arc-source');

          // make a new dep, remove the old one
          self.makeDependency(source, target);
          self.removeDependency(dep);
          self.cy.$('.moving').removeClass('moving');
          self.moving_dependency = false;

          var newEdge = self.cy.$('#' + source.attr('id') + ' -> #' + target.attr('id'));

          // right click the new edge and lock it
          newEdge.trigger('cxttapend');
          self.lock(newEdge);
        } else {

          // check if there's anything in-progress
          self.commit();

          self.cy.$('.arc-source').removeClass('arc-source');
          self.cy.$('.arc-target').removeClass('arc-target');
          self.cy.$('.selected').removeClass('selected');

          // handle the click differently based on current state

          if (target.hasClass('merge-right') || target.hasClass('merge-left')) {

            // perform merge
            self.merge(self.cy.$('.merge-source').data('token'), target.data('token'));
            self.unlock();
          } else if (target.hasClass('combine-right') || target.hasClass('combine-left')) {

            // perform combine
            self.combine(self.cy.$('.combine-source').data('token'), target.data('token'));
            self.unlock();
          } else if (target.hasClass('activated')) {

            // de-activate
            self.intercepted = false;
            self.clear();
          } else {

            var _source = self.cy.$('.activated');
            target.addClass('activated');

            // if there was already an activated node
            if (_source.length === 1) {

              // add a new edge
              self.makeDependency(_source, target);
              _source.removeClass('activated');
              target.removeClass('activated');
              self.unlock();
            } else {

              // activate it
              self.lock(target);
            }
          }
        }
      });

      self.cy.on('click', 'node.pos', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.commit();
        self.editing = target;

        self.cy.$('.activated').removeClass('activated');
        self.cy.$('.arc-source').removeClass('arc-source');
        self.cy.$('.arc-target').removeClass('arc-target');
        self.cy.$('.selected').removeClass('selected');

        _this.showEditLabelBox(target);
        self.lock(target);
      });

      self.cy.on('click', '$node > node', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.cy.$('.activated').removeClass('activated');

        if (target.hasClass('multiword-active')) {

          target.removeClass('multiword-active');
          self.unlock();
        } else {

          self.cy.$('.multiword-active').removeClass('multiword-active');
          target.addClass('multiword-active');
          self.lock(target);
        }
      });

      self.cy.on('click', 'edge.dependency', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.commit();
        self.editing = target;

        self.cy.$('.activated').removeClass('activated');
        self.cy.$('.arc-source').removeClass('arc-source');
        self.cy.$('.arc-target').removeClass('arc-target');
        self.cy.$('.selected').removeClass('selected');

        _this.showEditLabelBox(target);
        self.lock(target);
      });
      self.cy.on('cxttapend', 'node.form', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.commit();
        self.editing = target;

        self.cy.$('.activated').removeClass('activated');
        self.cy.$('.arc-source').removeClass('arc-source');
        self.cy.$('.arc-target').removeClass('arc-target');
        self.cy.$('.selected').removeClass('selected');

        _this.showEditLabelBox(target);
        self.lock(target);
      });
      self.cy.on('cxttapend', 'edge.dependency', function (e) {

        var target = e.target;

        if (target.hasClass('locked')) return;

        self.commit();
        self.cy.$('.activated').removeClass('activated');

        if (target.hasClass('selected')) {

          self.cy.$('#' + target.data('source')).removeClass('arc-source');
          self.cy.$('#' + target.data('target')).removeClass('arc-target');
          target.removeClass('selected');
          self.unlock();
        } else {

          self.cy.$('.arc-source').removeClass('arc-source');
          self.cy.$('#' + target.data('source')).addClass('arc-source');

          self.cy.$('.arc-target').removeClass('arc-target');
          self.cy.$('#' + target.data('target')).addClass('arc-target');

          self.cy.$('.selected').removeClass('selected');
          target.addClass('selected');
          self.lock(target);
        }
      });

      return this;
    }

    /**
     * Save the current graph config to `localStorage`.
     */

  }, {
    key: 'save',
    value: function save() {

      if (this.cy) {
        config.zoom = this.cy.zoom();
        config.pan = this.cy.pan();
      }
      var serial = _.pick(config, 'pan', 'zoom', 'locked_index', 'locked_id', 'locked_classes');
      serial = JSON.stringify(serial);
      utils.storage.setPrefs('graph', serial);
    }

    /**
     * Load the graph config from `localStorage` if it exists.
     */

  }, {
    key: 'load',
    value: function load() {

      var serial = utils.storage.getPrefs('graph');
      if (!serial) return;

      serial = JSON.parse(serial);
      config.set(serial);
    }

    /**
     * Save in-progress changes to the graph (labels being edited).
     */

  }, {
    key: 'commit',
    value: function commit() {

      this.cy.$('.input').removeClass('input');

      if (this.editing === null) return; // nothing to do

      if (this.cy.$('.splitting').length) {

        var value = $('#edit').val();
        var index = value.indexOf(' ');
        index = index < 0 ? value.length : index;

        this.splitToken(this.editing, index);
      } else {

        var token = this.editing.data('token') || this.editing.data('targetToken'),
            attr = this.editing.data('attr'),
            _value = utils.validate.attrValue(attr, $('#edit').val());

        if (attr === 'deprel') {

          this.modifyDependency(this.editing, _value);
        } else {

          token[attr] = _value;
          this.editing = null;
          this.app.save({
            type: 'set',
            indices: [this.app.corpus.index]
          });
        }
      }

      this.editing = null;
    }

    /**
     * Remove all the graph state that would indicate we're in the process of
     *  editing a label or activating a particular element.
     */

  }, {
    key: 'clear',
    value: function clear() {

      // intercepted by clicking a canvas subobject || mousemove (i.e. drag) || #edit
      if (this.intercepted) return;

      this.commit();

      this.cy.$('*').removeClass('splitting activated multiword-active ' + 'multiword-selected arc-source arc-target selected moving neighbor ' + 'merge-source merge-left merge-right combine-source combine-left ' + 'combine-right');

      this.moving_dependency = false;

      $('#mute').removeClass('activated');
      $('#edit').removeClass('activated');

      this.app.gui.status.refresh();
      this.unlock();
    }

    // ---------------------------------------------------------------------------
    // abstractions over modifying the corpus

    /**
     * Try to add `src` as a head for `tar`, save changes, and update graph.
     *
     * @param {CytoscapeNode} src
     * @param {CytoscapeNode} tar
     */

  }, {
    key: 'makeDependency',
    value: function makeDependency(src, tar) {

      try {

        src = src.data('token');
        tar = tar.data('token');
        tar.addHead(src);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }

      /*
      // TODO:
      // If the target POS tag is PUNCT set the deprel to @punct [99%]
      // IF the target POS tag is CCONJ set the deprel to @cc [88%]
      // IF the target POS tag is SCONJ set the deprel to @mark [86%]
      // IF the target POS tag is DET set the deprel to @det [83%]
        const POS_TO_REL = {
          'PUNCT': 'punct',
          'DET': 'det',
          'CCONJ': 'cc',
          'SCONJ': 'mark'
      }
        // TODO: Put this somewhere better
      if (thisToken.upostag in POS_TO_REL)
          sentAndPrev = changeConlluAttr(sent, indices, 'deprel', POS_TO_REL[thisToken.upostag]);
        let isValidDep = true;
      if (thisToken.upostag === 'PUNCT' && !is_projective_nodes(sent.tokens, [targetIndex])) {
          log.warn('writeArc(): Non-projective punctuation');
          isValidDep = false
      }*/
    }

    /**
     * Try to change the deprel for the dependency given by `ele` to `deprel`, save
     *  changes, and update graph.
     *
     * @param {CytoscapeEdge} ele
     * @param {String} deprel
     */

  }, {
    key: 'modifyDependency',
    value: function modifyDependency(ele, deprel) {

      try {

        var src = ele.data('sourceToken');
        var tar = ele.data('targetToken');
        tar.modifyHead(src, deprel);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to remove the dependency given by `ele`, save changes, and update graph.
     *
     * @param {CytoscapeEdge} ele
     */

  }, {
    key: 'removeDependency',
    value: function removeDependency(ele) {

      try {

        var src = ele.data('sourceToken');
        var tar = ele.data('targetToken');
        tar.removeHead(src);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to set `ele` as the root of the sentence, save changes, and update graph.
     *
     * @param {CytoscapeNode} ele
     */

  }, {
    key: 'setRoot',
    value: function setRoot(ele) {

      var sent = this.app.corpus.current;
      ele = ele.data('token');

      try {

        if (!this.app.corpus.enhanced) sent.root.dependents.clear();

        ele.addHead(sent.root, 'root');
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to the token given by `ele` as `index`, save changes, and update graph.
     *
     * @param {CytoscapeNode} ele
     * @param {Number} index
     */

  }, {
    key: 'splitToken',
    value: function splitToken(ele, index) {

      try {

        this.app.corpus.current.split(ele.data('token'), index);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to the superToken given by `ele` into normal tokens save changes, and
     *  update graph.
     *
     * @param {CytoscapeNode} ele
     */

  }, {
    key: 'splitSuperToken',
    value: function splitSuperToken(ele) {

      try {

        this.app.corpus.current.split(ele.data('token'));
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to combine `src` and `tar` into a superToken, save changes, and update
     *  graph.
     *
     * @param {CytoscapeNode} src
     * @param {CytoscapeNode} tar
     */

  }, {
    key: 'combine',
    value: function combine(src, tar) {

      try {

        this.app.corpus.current.combine(src, tar);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    /**
     * Try to merge `src` and `tar` into a single normal token, save changes, and
     *  update graph.
     *
     * @param {CytoscapeNode} src
     * @param {CytoscapeNode} tar
     */

  }, {
    key: 'merge',
    value: function merge(src, tar) {

      try {

        this.app.corpus.current.merge(src, tar);
        this.unlock();
        this.app.save({
          type: 'set',
          indices: [this.app.corpus.index]
        });
      } catch (e) {

        if (e instanceof nx.NxError) {

          this.app.gui.status.error(e.message);
        } else {

          throw e;
        }
      }
    }

    // ---------------------------------------------------------------------------
    // methods for traversing the graph

    /**
     * Get the `previous` form relative to the activated form (no wrapping).  This
     *  is useful for when we want to get the neighbors of a node (e.g. for merge
     *  or combine).  The `previous` form is the `form-node` with `clump` one less.
     *  If there is no `previous` form, returns undefined.
     *
     * @return {(CytoscapeCollection|undefined)}
     */

  }, {
    key: 'getPrevForm',
    value: function getPrevForm() {

      var clump = this.cy.$('.activated').data('clump');
      if (clump === undefined) return;

      clump -= 1;

      return this.cy.$('.form[clump = ' + clump + ']');
    }

    /**
     * Get the `next` form relative to the activated form (no wrapping).  This
     *  is useful for when we want to get the neighbors of a node (e.g. for merge
     *  or combine).  The `next` form is the `form-node` with `clump` one greater.
     *  If there is no `next` form, returns undefined.
     *
     * @return {(CytoscapeCollection|undefined)}
     */

  }, {
    key: 'getNextForm',
    value: function getNextForm() {

      var clump = this.cy.$('.activated').data('clump');
      if (clump === undefined) return;

      clump += 1;

      return this.cy.$('.form[clump = ' + clump + ']');
    }

    /**
     * Show #edit on the `previous` cytoscape element, determined by the order it
     *  was drawn to the graph.
     */

  }, {
    key: 'selectPrevEle',
    value: function selectPrevEle() {

      var num = this.cy.$('.input').data('num');
      this.intercepted = false;
      this.clear();

      num += 1;
      if (num === 0) num = this.length;
      if (num > this.length) num = 1;

      var ele = this.cy.$('[num = ' + num + ']');
      this.editing = ele;
      if (ele.length) this.showEditLabelBox(ele);
    }

    /**
     * Show #edit on the `next` cytoscape element, determined by the order it
     *  was drawn to the graph.
     */

  }, {
    key: 'selectNextEle',
    value: function selectNextEle() {

      var num = this.cy.$('.input').data('num');
      this.intercepted = false;
      this.clear();

      num -= 1;
      if (num === 0) num = this.length;
      if (num > this.length) num = 1;

      var ele = this.cy.$('[num = ' + num + ']');
      this.editing = ele;
      if (ele.length) this.showEditLabelBox(ele);
    }

    /**
     * Flash the #edit box, but stay in `splitting` mode (this affects what happens
     *  during `commit`).
     */

  }, {
    key: 'flashTokenSplitInput',
    value: function flashTokenSplitInput(ele) {

      ele.addClass('splitting');
      this.editing = ele;
      this.showEditLabelBox(ele);
    }

    /**
     * Flash the #edit box around the current `input` node.  Also locks the target
     *  and flashes the #mute.
     */

  }, {
    key: 'showEditLabelBox',
    value: function showEditLabelBox(target) {

      target.addClass('input');

      // get rid of direction arrows
      var label = target.data('label').replace(/[⊳⊲]/, '');
      target.data('label', label);

      // get bounding box
      var bbox = target.renderedBoundingBox();
      bbox.color = target.style('background-color');
      if (target.data('name') === 'dependency') {
        bbox.w = 100;
        bbox.h = this.cy.nodes()[0].renderedHeight();
        bbox.color = 'white';

        if (this.app.corpus.is_vertical) {
          bbox.y1 += (bbox.y2 - bbox.y1) / 2 - 15;
          bbox.x1 = bbox.x2 - 70;
        } else {
          bbox.x1 += (bbox.x2 - bbox.x1) / 2 - 50;
        }
      }

      // TODO: rank the labels + make the style better
      var autocompletes = target.data('name') === 'pos-node' ? utils.validate.U_POS : target.data('name') === 'dependency' ? utils.validate.U_DEPRELS : [];

      // add the edit input
      $('#edit').val('').focus().val(label).css('top', bbox.y1).css('left', bbox.x1).css('height', bbox.h).css('width', bbox.w + 5).attr('target', target.attr('id')).addClass('activated').selfcomplete({
        lookup: autocompletes,
        tabDisabled: false,
        autoSelectFirst: true,
        lookupLimit: 5,
        width: 'flex'
      });

      // add the background-mute div
      $('#mute').addClass('activated');
      /*.css('height', this.app.corpus.is_vertical
        ? `${this.length * 50}px`
        : $(window).width() - 10);*/

      $('#edit').focus(); // move cursor to the end
      if (target.data('name') === 'dependency') $('#edit').select(); // highlight the current contents

      this.lock(target);
      this.app.gui.status.refresh();
    }

    // ---------------------------------------------------------------------------
    // methods for collaboration

    /**
     * Add `mouse` nodes for each of the users on the current corpus index.
     */

  }, {
    key: 'drawMice',
    value: function drawMice() {
      var _this2 = this;

      this.app.collab.getMouseNodes().forEach(function (mouse) {

        var id = mouse.id.replace(/[#:]/g, '_');

        if (!_this2.cy.$('#' + id + '.mouse').length) _this2.cy.add({
          data: { id: id },
          classes: 'mouse'
        });

        _this2.cy.$('#' + id + '.mouse').position(mouse.position).css('background-color', '#' + mouse.color);
      });
    }

    /**
     * Add the `locked` class to each of the elements being edited by other users
     *  on the current corpus index.
     */

  }, {
    key: 'setLocks',
    value: function setLocks() {
      var _this3 = this;

      this.cy.$('.locked').removeClass('locked').data('locked_by', null).css('background-color', '').css('line-color', '');

      this.app.collab.getLocks().forEach(function (lock) {

        _this3.cy.$('#' + lock.locked).addClass('locked').data('locked_by', lock.id).css('background-color', '#' + lock.color).css('line-color', '#' + lock.color);
      });
    }

    /**
     * Add a lock to `ele`, save it to the config, and broadcast it to the other
     *  users.
     *
     * @param {(CytoscapeEdge|CytoscapeNode)}
     */

  }, {
    key: 'lock',
    value: function lock(ele) {

      if (!ele || !ele.length) return this.unlock();

      this.locked = ele;
      config.locked_index = this.app.corpus.index;
      config.locked_id = ele.id();

      var keys = Object.keys(_.pick(ele[0]._private.classes._obj, function (value) {
        return !!value;
      }));
      keys = _.intersection(keys, ['selected', 'activated', 'multiword-active', 'merge-source', 'combine-source']);

      config.locked_classes = keys.join(' ');
      this.save();
      this.app.socket.broadcast('lock graph', ele.id());
    }

    /**
     * Remove the lock for the current user, save and broadcast.
     */

  }, {
    key: 'unlock',
    value: function unlock() {

      this.locked = null;
      config.locked_index = null;
      config.locked_id = null;
      config.locked_classes = null;
      this.save();
      this.app.socket.broadcast('unlock graph');
    }
  }, {
    key: 'eles',
    get: function get() {
      var _this4 = this;

      // helper function to get subscripted index numbers for superTokens
      function toSubscript(str) {
        var subscripts = { 0: '₀', 1: '₁', 2: '₂', 3: '₃', 4: '₄', 5: '₅',
          6: '₆', 7: '₇', 8: '₈', 9: '₉', '-': '₋', '(': '₍', ')': '₎' };

        if (str == 'null') return '';

        return str.split('').map(function (char) {
          return subscripts[char] || char;
        }).join('');
      }

      // helper function to get index numbers for a particular format
      function getIndex(token, format) {
        return format === 'CoNLL-U' ? token.indices.conllu : format === 'CG3' ? token.indices.cg3 : token.indices.absolute;
      }

      // reset our progress tracker
      this.progress.done = 0;
      this.progress.total = 0;

      // cache these
      var sent = this.app.corpus.current,
          format = this.app.corpus.format;

      // num is like clump except not including superTokens, eles in the list
      var num = 0,
          eles = [];

      // walk over all the tokens
      sent.index().iterate(function (token) {

        // don't draw other analyses
        if (token.indices.cytoscape == null && !token.isSuperToken) return;

        // cache some values
        var id = getIndex(token, format);
        var clump = token.indices.cytoscape;
        var pos = format === 'CG3' ? token.xpostag || token.upostag : token.upostag || token.xpostag;
        var isRoot = sent.root.dependents.has(token);

        // after iteration, this will just be the max
        _this4.clumps = clump;

        if (token.isSuperToken) {

          eles.push({ // multiword label
            data: {
              id: 'multiword-' + id,
              clump: clump,
              name: 'multiword',
              label: token.form + ' ' + toSubscript('' + id),
              length: (token.form.length > 3 ? token.form.length * 0.7 : token.form.length) + 'em',
              token: token
            },
            classes: 'multiword'
          });
        } else {

          _this4.progress.total += 2;
          if (pos && pos !== '_') _this4.progress.done += 1;
          if (token.heads.length) _this4.progress.done += 1;

          var parent = token.name === 'SubToken' ? 'multiword-' + getIndex(sent.getSuperToken(token), format) : undefined;

          eles.push({ // "number" node
            data: {
              id: 'num-' + id,
              clump: clump,
              name: 'number',
              label: id,
              pos: pos,
              parent: parent,
              token: token
            },
            classes: 'number'
          }, { // "form" node
            data: {
              id: 'form-' + id,
              num: ++num,
              clump: clump,
              name: 'form',
              attr: 'form',
              form: token.form,
              label: token.form || '_',
              length: ((token.form || '_').length > 3 ? (token.form || '_').length * 0.7 : (token.form || '_').length) + 'em',
              type: parent ? 'subToken' : 'token',
              state: 'normal',
              parent: 'num-' + id,
              token: token
            },
            classes: isRoot ? 'form root' : 'form'
          }, { // "pos" node
            data: {
              id: 'pos-node-' + id,
              num: ++num,
              clump: clump,
              name: 'pos-node',
              attr: format === 'CG3' ? 'xpostag' : 'upostag',
              pos: pos,
              label: pos || '',
              length: (pos || '').length * 0.7 + 1 + 'em',
              token: token
            },
            classes: utils.validate.posNodeClasses(pos)
          }, { // "pos" edge
            data: {
              id: 'pos-edge-' + id,
              clump: clump,
              name: 'pos-edge',
              pos: pos,
              source: 'form-' + id,
              target: 'pos-node-' + id
            },
            classes: 'pos'
          });

          // iterate over the token's heads to get edges
          token.mapHeads(function (head, i) {

            // if not enhanced, only draw the first dependency
            if (i && !sent.options.enhanced) return;

            // TODO: improve this (basic) algorithm
            function getEdgeHeight(corpus, src, tar) {

              var diff = tar.indices.absolute - src.indices.absolute;

              var edgeHeight = config.edge_height * diff;
              if (corpus.is_ltr) edgeHeight *= -1;
              if (Math.abs(edgeHeight) !== 1) edgeHeight *= config.edge_coeff;
              if (corpus.is_vertical) edgeHeight = 45;

              return edgeHeight;
            }

            _this4.progress.total += 1;
            if (head.deprel && head.deprel !== '_') _this4.progress.done += 1;

            // roots don't get edges drawn (just bolded)
            if (head.token.name === 'RootToken') return;

            var deprel = head.deprel || '';

            var id = getIndex(token, format),
                headId = getIndex(head.token, format),
                label = _this4.app.corpus.is_ltr ? token.indices.absolute > head.token.indices.absolute ? deprel + '\u22B3' : '\u22B2' + deprel : token.indices.absolute > head.token.indices.absolute ? '\u22B2' + deprel : deprel + '\u22B3';

            eles.push({
              data: {
                id: 'dep_' + id + '_' + headId,
                name: 'dependency',
                num: ++num,
                attr: 'deprel',
                deprel: deprel,
                source: 'form-' + headId,
                sourceToken: head.token,
                target: 'form-' + id,
                targetToken: token,
                length: (deprel || '').length / 3 + 'em',
                label: label,
                ctrl: new Array(4).fill(getEdgeHeight(_this4.app.corpus, head.token, token))
              },
              classes: utils.validate.depEdgeClasses(sent, token, head),
              style: {
                'control-point-weights': '0.1 0.5 1',
                'target-endpoint': '0% -50%',
                'source-endpoint': token.indices.absolute < head.token.indices.absolute ? -10 * config.edge_coeff + 'px -50%' : 10 * config.edge_coeff + 'px -50%'
              }
            });
          });
        }
      });

      this.length = num;
      return eles;
    }
  }]);

  return Graph;
}();

module.exports = Graph;

},{"../utils":32,"./config":6,"./cy-style":7,"./cytoscape/cytoscape.min":8,"./sort":10,"./zoom":11,"jquery":393,"notatrix":461,"underscore":502}],10:[function(require,module,exports){
'use strict';

var _ = require('underscore');

// NB: sorting will break if sentence has more than this many tokens
var LARGE_NUMBER = 10000;

/**
 * Function to sort nodes with vertical orientation.
 *
 * @param {CytoscapeNode} n1
 * @param {CytoscapeNode} n2
 */
function vertical(n1, n2) {

  var num = function num(node) {
    var id = parseInt(node.data('num')),
        offset = node.data('name') === 'pos-node' ? 0 : 0.5;

    return isNaN(id) ? -Infinity : id + offset;
  };

  var num1 = num(n1);
  var num2 = num(n2);

  return num1 === num2 ? 0 : num1 < num2 ? -1 : 1;
}

/**
 * Function to sort nodes with left-to-right orientation.
 *
 * @param {CytoscapeNode} n1
 * @param {CytoscapeNode} n2
 */
function ltr(n1, n2) {

  var num = function num(node) {
    var id = parseInt(node.data('num')),
        offset = node.data('name') === 'pos-node' ? LARGE_NUMBER : 0;

    return isNaN(id) ? -Infinity : id + offset;
  };

  var num1 = num(n1);
  var num2 = num(n2);

  return num1 === num2 ? 0 : num1 < num2 ? -1 : 1;
}

/**
 * Function to sort nodes with right-to-left orientation.
 *
 * @param {CytoscapeNode} n1
 * @param {CytoscapeNode} n2
 */
function rtl(n1, n2) {

  var num = function num(node) {
    var id = parseInt(node.data('num')),
        offset = node.data('name') === 'pos-node' ? 0 : LARGE_NUMBER;

    return isNaN(id) ? -Infinity : id + offset;
  };

  var num1 = num(n1);
  var num2 = num(n2);

  return num1 === num2 ? 0 : num1 < num2 ? 1 : -1;
}

module.exports = {
  vertical: vertical,
  ltr: ltr,
  rtl: rtl
};

},{"underscore":502}],11:[function(require,module,exports){
'use strict';

var _graph = null;

/**
 * Bind the cytoscape graph to the internal reference.
 *
 * @param {Graph} graph
 */
function bind(graph) {
  _graph = graph;
}

/**
 * Zoom in and save changes.
 */
function _in() {

  if (!_graph) return;

  var zoom = _graph.config.zoom || _graph.cy.zoom();
  zoom *= 1.1;

  _graph.cy.zoom(zoom);
  _graph.save();
}

/**
 * Zoom out and save changes.
 */
function out() {

  if (!_graph) return;

  var zoom = _graph.config.zoom || _graph.cy.zoom();
  zoom /= 1.1;

  _graph.cy.zoom(zoom);
  _graph.save();
}

/**
 * Zoom to a particular value and save changes.
 *
 * @param {Number} zoom
 */
function to(zoom) {

  if (!_graph) return;

  _graph.cy.zoom(zoom);
  _graph.save();
}

/**
 * Wrapper around the cytoscape zoom-fit function (and save).
 */
function fit() {

  if (!_graph) return;

  _graph.cy.fit().center();
  _graph.save();
}

/**
 * Check if we have any zoom/pan saved in the config.  If not, use a default one.
 *
 * @param {Graph} graph
 */
function checkFirst(graph) {
  if (!graph.config.drawn_sentence) {

    graph.cy.fit().center();
    graph.config.zoom = graph.cy.zoom();
    graph.config.pan = graph.cy.pan();
    graph.config.drawn_sentence = true;
  }
}

module.exports = {
  bind: bind,
  'in': _in, // 'in' is a reserved keyword
  out: out,
  to: to,
  fit: fit,
  checkFirst: checkFirst
};

},{}],12:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');
var utils = require('../utils');

/**
 * Abstraction to deal with interaction with #chat element and its descendents.
 *  Handles outgoing and incoming messages and alerts, event callbacks, and
 *  updating user spans.
 *
 * @param {GUI} gui reference to the parent
 */

var Chat = function () {
  function Chat(gui) {
    _classCallCheck(this, Chat);

    this.gui = gui;
    this.is_visible = true;
    this.is_minimized = false;
  }

  /**
   * Add an "alert" to the #chat.  Alert messages show up centrally aligned in
   *  the #chat.  This method also escapes '%u' strings in the message and
   *  replaces them with the `User::dom`.
   *
   * @param {String} message message to be alerted
   * @param {Array} users [User] list of users to be interleaved
   */


  _createClass(Chat, [{
    key: 'alert',
    value: function alert(message) {
      var users = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];


      var messages = $('#chat-messages'),
          alert = $('<span>').addClass('message message-alert');

      // do the interleaving
      message.split('%u').forEach(function (chunk, i) {

        if (i && users[i - 1]) alert.append(users[i - 1].dom());

        if (chunk) alert.append($('<span>').addClass('content').text(chunk));
      });

      messages.append(alert).closest('div').scrollTop(messages.prop('scrollHeight'));
    }

    /**
     * Send a message from the current user to the chat.  Also broadcasts the
     *  message to the other users.
     *
     * @param {CollaborationInterface} collab
     */

  }, {
    key: 'sendMessage',
    value: function sendMessage(collab) {

      // get the message
      var input = $('#chat-input'),
          message = input.val().trim();

      // don't send just whitespace
      if (!message) return;

      // broadcast
      var self = collab.self;
      this.gui.app.socket.broadcast('new message', {
        id: self.id,
        message: message
      });

      // add it to #chat
      this.newMessage(self, message, true);

      // reset the input
      input.val('');
    }

    /**
     * Add a message to #chat with content `text` from `user`.  If `self == true`,
     *  then the message will be right-aligned.  Otherwise, it will be left-
     *  aligned.
     *
     * @param {User} user
     * @param {String} text
     * @param {Boolean} self (optional, default = `false`)
     */

  }, {
    key: 'newMessage',
    value: function newMessage(user, text) {
      var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


      var messages = $('#chat-messages');
      var dom = $('<li>').addClass('message').addClass(self ? 'self' : 'other').append($('<div>').addClass('message-content').append($('<div>').addClass('message-text').text(text)).append($('<span>').addClass('message-timestamp meta').text(new Date().toLocaleTimeString()))).append($('<div>').addClass('message-sender meta').html(user.dom()));

      messages.append(dom).closest('div').scrollTop(messages.prop('scrollHeight'));
    }

    /**
     * Scan through #chat and update each `.message-sender-info` span for the given
     *  `user` to use the most recent values of `user.name` and `user.viewing`.
     *
     * @param {User} user
     */

  }, {
    key: 'updateUser',
    value: function updateUser(user) {

      var dom = $('.message-sender-info[name="' + user.id + '"]');
      dom.find('.message-sender-name').text(user.name);
      dom.find('.message-sender-viewing').text(user.viewing);
    }

    /**
     * Force to redraw #chat based on our internal state.  Called every time there
     *  is a change.
     */

  }, {
    key: 'refresh',
    value: function refresh() {

      $('#chat').css('display', this.is_visible ? 'flex' : 'none');

      $('#chat-expand').css('display', this.is_minimized ? 'none' : 'flex');

      $('#chat-minimize i').removeClass('fa-window-maximize fa-window-minimize').addClass(this.is_minimized ? 'fa-window-maximize' : 'fa-window-minimize');

      $('#chat-available').removeClass('red green').addClass(this.gui.app.socket.initialized ? 'green' : 'red');

      $('#currently-online-number').text(this.gui.app.collab.size);
    }

    /**
     * Bind callbacks.
     */

  }, {
    key: 'bind',
    value: function bind() {

      var self = this;

      $('#chat-send').click(function (e) {
        return self.sendMessage(self.gui.app.collab);
      });

      $('#chat-persist *, #chat-persist').click(function (e) {

        if ($(e.target).is('#chat-close')) return;

        self.is_minimized = !self.is_minimized;
        self.refresh();
      });

      $('#chat-close').click(function (e) {

        self.is_visible = false;
        self.refresh();
      });
    }
  }]);

  return Chat;
}();

module.exports = Chat;

},{"../utils":32,"jquery":393,"underscore":502}],13:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var utils = require('../utils');

var _gui = {

	is_browser: utils.check_if_browser(),

	pinned_menu_items: new Set(['discard-corpus', 'show-help']),
	is_textarea_visible: true,
	is_table_visible: false,
	is_label_bar_visible: true,
	column_visibilities: new Array(10).fill(true),
	textarea_height: 238,
	autoparsing: true,

	statusNormalFadeout: 3000,
	statusErrorFadeout: 5000,

	set: function set(params) {
		return _.each(params, function (value, key) {
			if (_gui[key] !== undefined) _gui[key] = value;
		});
	}

};

module.exports = _gui;

},{"../utils":32,"underscore":502}],14:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');

var GraphMenu = function () {
  function GraphMenu(gui) {
    _classCallCheck(this, GraphMenu);

    this.gui = gui;
  }

  _createClass(GraphMenu, [{
    key: 'bind',
    value: function bind() {

      var self = this;

      $('#LTR').click(function (e) {

        var corpus = self.gui.app.corpus;

        corpus.is_ltr = !corpus.is_ltr;
        self.gui.app.save({
          type: 'set',
          indices: [corpus.index]
        });
        self.gui.refresh();
      });

      $('#vertical').click(function (e) {

        var corpus = self.gui.app.corpus;

        corpus.is_vertical = !corpus.is_vertical;
        self.gui.app.save({
          type: 'set',
          indices: [corpus.index]
        });
        self.gui.refresh();
      });

      $('#enhanced').click(function (e) {

        var corpus = self.gui.app.corpus;

        if (corpus.is_enhanced) {
          corpus.current.unenhance();
        } else {
          corpus.current.enhance();
        }

        self.gui.app.save({
          type: 'set',
          indices: [corpus.index]
        });
        self.gui.refresh();
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {

      var corpus = this.gui.app.corpus;

      $('#LTR .fa').removeClass('fa-align-left fa-align-right').addClass(corpus.is_ltr ? 'fa-align-left' : 'fa-align-right');

      $('#vertical .fa').toggleClass('fa-rotate-90', corpus.is_vertical);

      $('#enhanced .fa').removeClass('fa-tree fa-magic').addClass(corpus.is_enhanced ? 'fa-magic' : 'fa-tree');
    }
  }]);

  return GraphMenu;
}();

module.exports = GraphMenu;

},{"jquery":393,"underscore":502}],15:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = require('jquery');
var _ = require('underscore');
var utils = require('../utils');
var Chat = require('./chat');
var config = require('./config');
var corpus = require('../corpus');
var GraphMenu = require('./graph-menu');
var keys = require('./keyboard');
var Labeler = require('./labeler');
var Menu = require('./menu');
var modalFactory = require('./modals');
var Status = require('./status');
var Table = require('./table');
var Textarea = require('./textarea');

var GUI = function () {
    function GUI(app) {
        _classCallCheck(this, GUI);

        this.app = app;

        // bind subelements
        this.chat = new Chat(this);
        this.config = config;
        this.graphMenu = new GraphMenu(this);
        this.keys = keys;
        this.labeler = new Labeler(this);
        this.menu = new Menu(this);
        this.modals = modalFactory(this);
        this.status = new Status(this);
        this.table = new Table(this);
        this.textarea = new Textarea(this);

        this.load();
        this.bind();
    }

    _createClass(GUI, [{
        key: 'save',
        value: function save() {

            var serial = _.pick(this.config, 'column_visibilities', 'is_label_bar_visible', 'is_table_visible', 'is_textarea_visible', 'pinned_menu_items', 'textarea_height', 'autoparsing');
            serial = JSON.stringify(serial);
            utils.storage.setPrefs('gui', serial);
        }
    }, {
        key: 'load',
        value: function load() {

            var serial = utils.storage.getPrefs('gui');
            if (!serial) return;

            serial = JSON.parse(serial);
            serial.pinned_menu_items = new Set(serial.pinned_menu_items || []);

            this.config.set(serial);
        }
    }, {
        key: 'bind',
        value: function bind() {

            // ignore all this stuff if we're in Node
            if (!this.config.is_browser) return;

            var self = this;

            // bind all subelements
            require('./selfcomplete');
            this.chat.bind();
            this.graphMenu.bind();
            this.menu.bind();
            this.status.bind();
            this.textarea.bind();

            // graph interception stuff
            $('.controls').click(function (e) {
                return $(':focus:not(#edit)').blur();
            });
            $('#edit').click(function (e) {
                self.app.graph.intercepted = true;
            });

            // keystroke handling & such
            window.onkeyup = function (e) {
                return self.keys.up(self.app, e);
            };
            window.onkeydown = function (e) {
                return self.keys.down(self.app, e);
            };
            window.onbeforeunload = function (e) {
                return self.app.save();
            };
        }
    }, {
        key: 'refresh',
        value: function refresh() {

            // ignore all this stuff if we're in node
            if (!this.config.is_browser) return;

            // refresh all subelements
            this.chat.refresh();
            this.graphMenu.refresh();
            this.labeler.refresh();
            this.menu.refresh();
            this.status.refresh();
            this.textarea.refresh();

            // and draw the graph
            this.app.graph.draw();

            // show the completeness
            var percent = 100 * (this.app.graph.progress.total ? this.app.graph.progress.done / this.app.graph.progress.total : 0);

            $('#progress-bar').css('width', percent + '%');
        }
    }]);

    return GUI;
}();

module.exports = GUI;

},{"../corpus":5,"../utils":32,"./chat":12,"./config":13,"./graph-menu":14,"./keyboard":16,"./labeler":17,"./menu":18,"./modals":19,"./selfcomplete":22,"./status":23,"./table":24,"./textarea":25,"jquery":393,"underscore":502}],16:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var $ = require('jquery');

var KEYS = {
  DELETE: 46,
  BACKSPACE: 8,
  ENTER: 13,
  ESC: 27,
  TAB: 9,
  RIGHT: 39,
  LEFT: 37,
  UP: 38,
  DOWN: 40,
  MINUS: 173,
  MINUS_: 189,
  EQUALS: 61,
  EQUALS_: 187,
  SHIFT: 16,
  CTRL: 17,
  OPT: 18,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  META: 224,
  C: 67,
  D: 68,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  P: 80,
  R: 82,
  S: 83,
  T: 84,
  X: 88,
  Y: 89,
  Z: 90,
  0: 48,
  QUESTION_MARK: 191
};

var pressed = new Set();

function name(which) {
  return _.invert(KEYS)[which];
}

function keyup(app, event) {

  var collab = app.collab,
      corpus = app.corpus,
      graph = app.graph,
      gui = app.gui;

  pressed.delete(event.which);
  console.log('keyup>', event.which, name(event.which) || event.key, pressed);

  // catch CTRL+<key> sequence first
  if (pressed.has(KEYS.CTRL)) {

    if (event.which === KEYS.PAGE_DOWN) {
      if (pressed.has(KEYS.SHIFT)) {
        corpus.last();
      } else {
        corpus.next();
      }
    } else if (event.which === KEYS.PAGE_UP) {
      if (pressed.has(KEYS.SHIFT)) {
        corpus.first();
      } else {
        corpus.prev();
      }
    } else if (event.which === KEYS.Z && !pressed.has(KEYS.SHIFT)) {
      undoManager.undo();
    } else if (event.which === KEYS.Y || pressed.has(KEYS.Z)) {
      undoManager.redo();
    } else if (event.which === KEYS.L) {
      $('#label-input').focus();
    } else if (47 < event.which && event.which < 58) {
      // key in 0-9

      var num = event.which - 48;
      graph.zoom.to(Math.pow(1.5, num - 5));
      gui.refresh();
    } else if (pressed.has(KEYS.OPT) && event.which === KEYS.T && corpus.format === 'CoNLL-U') {
      gui.config.is_table_visible = true;
      gui.refresh();
      gui.table.toggleEditing(false);
    }

    return;
  }

  var focus = $(':focus');

  if (focus.is('.conllu-table')) {

    var table = gui.table;
    var td = focus;

    switch (event.which) {
      case KEYS.ENTER:
        table.toggleEditing();
        break;

      case KEYS.TAB:
        if (pressed.has(KEYS.SHIFT)) {
          table.goLeft(true);
          table.toggleEditing(true);
        } else {
          table.goRight(true);
          table.toggleEditing(true);
        }
        break;

      case KEYS.UP:
        if (!table.editing) table.goUp();
        break;

      case KEYS.DOWN:
        if (!table.editing) table.goDown();
        break;

      case KEYS.LEFT:
        if (!table.editing) table.goLeft();
        break;

      case KEYS.RIGHT:
        if (!table.editing) table.goRight();
        break;

      case KEYS.ESC:
        var originalValue = td.attr('original-value') || '';
        td.text(originalValue);
        table.toggleEditing(false);
        break;

      case KEYS.BACKSPACE:
      case KEYS.DELETE:
        if (table.editing) break;
        td.text('');
        table.toggleEditing(false);
        break;

      case KEYS.MINUS_:
      case KEYS.MINUS:
        if (!table.editing) $('th').filter('[col-id="' + td.attr('col-id') + '"]').trigger('click');
        break;
    }

    return;
  }

  if (focus.is('#current-sentence')) {

    switch (event.which) {
      case KEYS.ENTER:
        corpus.index = parseInt($('#current-sentence').val()) - 1;
        break;

      case KEYS.LEFT:
      case KEYS.J:
        corpus.prev();
        break;

      case KEYS.RIGHT:
      case KEYS.K:
        corpus.next();
        break;

      case KEYS.MINUS:
        corpus.removeSentence();
        break;

      case KEYS.EQUALS:
        corpus.insertSentence();
        break;
    }

    return;
  }

  if (focus.is('#edit')) {

    switch (event.which) {
      case KEYS.ENTER:
        app.graph.intercepted = false;
        graph.clear();
        break;

      case KEYS.TAB:
        graph.intercepted = false;
        if (pressed.has(KEYS.SHIFT)) {
          graph.selectPrevEle();
        } else {
          graph.selectNextEle();
        }
        break;

      case KEYS.ESC:
        app.graph.intercepted = false;
        app.graph.editing = null;
        graph.clear();
        break;
    }

    return;
  }

  if (focus.is('#text-data')) {

    switch (event.which) {
      case KEYS.ESC:
        focus.blur();
        break;

      case KEYS.ENTER:
        console.log('onEnter() not implemented'); //onEnter(event);
        break;

      case KEYS.TAB:

        var cursor = $('#text-data').prop('selectionStart'),
            contents = $('#text-data').val(),
            before = contents.substring(0, cursor),
            after = contents.substring(cursor, contents.length);

        $('#text-data').val(before + '\t' + after);
        break;

      default:
        // wait a full second before parsing (this prevents immediate trimming
        //   of whitespace and other annoying side effects), and avoid redundant
        //   parsing if we edit again w/in that 1-sec window
        clearTimeout(gui.parseTimer);
        gui.parseTimer = setTimeout(function () {

          if (gui.config.autoparsing) {
            corpus.parse($('#text-data').val());
          } else {
            if (corpus.current) corpus.current.input = $('#text-data').val();
          }
        }, 1000);
        break;
    }

    return;
  }

  if (focus.is('#chat-input')) {
    if (event.which === KEYS.ENTER) {

      gui.chat.sendMessage(collab);
    }
    return;
  }

  if (event.which === KEYS.QUESTION_MARK) {
    console.log('help modal not implemented :(');
    return;
  }

  if (graph.cy) switch (event.which) {
    case KEYS.DELETE:
    case KEYS.BACKSPACE:
    case KEYS.X:
      if (graph.cy.$('.selected').length) {
        graph.removeDependency(graph.cy.$('.selected'));
      } /* else if (graph.cy.$('.supAct').length) {
         removeSup(st);
        }*/
      break;

    case KEYS.D:
      if (graph.cy.$('.selected').length) {
        graph.cy.$('.selected').toggleClass('moving');
        graph.moving_dependency = !graph.moving_dependency;
      }
      break;

    case KEYS.P:
      /* if (text not focused)
        setPunct();*/
      console.log('setPunct() not implemented');
      break;

    case KEYS.R:
      if (graph.cy.$('node.form.activated')) graph.setRoot(graph.cy.$('node.form.activated'));
      break;

    case KEYS.S:

      var token = graph.cy.$('.activated');
      var superToken = graph.cy.$('.multiword-active');

      if (token.length) {

        graph.flashTokenSplitInput(token);
      } else if (superToken.length) {

        graph.splitSuperToken(superToken);
      }
      gui.status.refresh();
      break;

    case KEYS.M:

      graph.cy.$('.form').removeClass('combine-source combine-left combine-right');

      if (graph.cy.$('.merge-source').length) {

        graph.cy.$('.neighbor').removeClass('merge-left merge-right neighbor');

        graph.cy.$('.merge-source').removeClass('merge-source').addClass('activated');

        graph.lock(graph.cy.$('.activated'));
      } else if (graph.cy.$('.activated').length) {

        if (graph.cy.$('.activated').data('type') !== 'token') break;

        graph.cy.$('.activated').addClass('merge-source');

        graph.cy.$('.neighbor').removeClass('neighbor combine-source combine-left combine-right');

        var left = graph.getPrevForm();
        if (!left.hasClass('activated') && !left.hasClass('blocked') && left.data('type') === 'token') left.addClass('neighbor').addClass('merge-left');

        var right = graph.getNextForm();
        if (!right.hasClass('activated') && !right.hasClass('blocked') && right.data('type') === 'token') right.addClass('neighbor').addClass('merge-right');

        graph.lock(graph.cy.$('.activated'));
      }
      gui.status.refresh();
      break;

    case KEYS.C:

      graph.cy.$('.form').removeClass('merge-source merge-left merge-right');

      if (graph.cy.$('.combine-source').length) {

        graph.cy.$('.neighbor').removeClass('combine-left combine-right neighbor');

        graph.cy.$('.combine-source').removeClass('combine-source').addClass('activated');

        graph.lock(graph.cy.$('.activated'));
      } else if (graph.cy.$('.activated').length) {

        if (graph.cy.$('.activated').data('type') !== 'token') break;

        graph.cy.$('.activated').addClass('combine-source');

        graph.cy.$('.neighbor').removeClass('neighbor merge-source merge-left merge-right');

        var _left = graph.getPrevForm();
        if (!_left.hasClass('activated') && !_left.hasClass('blocked') && _left.data('type') === 'token') _left.addClass('neighbor combine-left');

        var _right = graph.getNextForm();
        if (!_right.hasClass('activated') && !_right.hasClass('blocked') && _right.data('type') === 'token') _right.addClass('neighbor combine-right');

        graph.lock(graph.cy.$('.activated'));
      }
      gui.status.refresh();
      break;

    case KEYS.LEFT:

      // avoid panning the window
      if (event.preventDefault) event.preventDefault();

      if (graph.cy.$('.merge-left').length) {

        var src = graph.cy.$('.merge-source');
        var tar = graph.cy.$('.merge-left');
        if (!tar.hasClass('locked')) graph.merge(src.data('token'), tar.data('token'));
      } else if (graph.cy.$('.combine-left').length) {

        var _src = graph.cy.$('.combine-source');
        var _tar = graph.cy.$('.combine-left');
        if (!_tar.hasClass('locked')) graph.combine(_src.data('token'), _tar.data('token'));
      }
      break;

    case KEYS.RIGHT:

      // avoid panning the window
      if (event.preventDefault) event.preventDefault();

      if (graph.cy.$('.merge-right').length) {

        var _src2 = graph.cy.$('.merge-source');
        var _tar2 = graph.cy.$('.merge-right');
        if (!_tar2.hasClass('locked')) graph.merge(_src2.data('token'), _tar2.data('token'));
      } else if (graph.cy.$('.combine-right').length) {

        var _src3 = graph.cy.$('.combine-source');
        var _tar3 = graph.cy.$('.combine-right');
        if (!_tar3.hasClass('locked')) graph.combine(_src3.data('token'), _tar3.data('token'));
      }
      break;

    case KEYS.EQUALS:
    case KEYS.EQUALS_:
      if (event.shiftKey) {
        graph.zoom.in();
      } else {
        graph.zoom.fit();
      }
      break;

    case KEYS.MINUS:
    case KEYS.MINUS_:
      if (event.shiftKey) {
        graph.zoom.out();
      } else {
        graph.zoom.fit();
      }
      break;

    case KEYS.ENTER:
      graph.intercepted = false;
      graph.clear();
      break;

    case KEYS.ESC:
      graph.intercepted = false;
      graph.clear();
      break;

  }
}

function keydown(app, event) {

  pressed.add(event.which);
  if (event.which === KEYS.TAB) event.preventDefault();

  if (event.which === KEYS.ENTER && $(':focus').is('td')) event.preventDefault();
}

module.exports = KEYS;
module.exports.pressed = pressed;
module.exports.up = keyup;
module.exports.down = keydown;

/*



function onEnter(event) {
  log.debug(`called onEnter()`);

  let sentence = $('#text-data').val(),
    cursor = $('#text-data').prop('selectionStart') - 1,
    lines = sentence.split(/\n/),
    lineId = null, before, during, after,
    cursorLine = 0;

  if (gui.is_table_view) {

    const target = $(event.target);
    cursor = parseInt(target.attr('row-id')) || parseInt(target.attr('col-id'));
    cursorLine = target.attr('row-id');

  } else {

    if (manager.format === 'Unknown' || manager.format === 'plain text')
      return;

    // get current line number
    let acc = 0;
    $.each(lines, (i, line) => {
      acc += line.length;
      if (acc + i < cursor)
        cursorLine = i + 1;
    });
    log.debug(`onEnter(): cursor on line[${cursorLine}]: "${lines[cursorLine]}"`);

    // advance the cursor until we are at the end of a line that isn't followed by a comment
    //   or at the very beginning of the textarea
    if (cursor !== 0 || sentence.startsWith('#')) {
      log.debug(`onEnter(): cursor[${cursor}]: "${sentence[cursor]}" (not at textarea start OR textarea has comments)`)
      while (sentence[cursor + 1] === '#' || sentence[cursor] !== '\n') {
        log.debug(`onEnter(): cursor[${cursor}]: "${sentence[cursor]}", line[${cursorLine}]: ${lines[cursorLine]}`);
        if (cursor === sentence.length)
          break;
        if (sentence[cursor] === '\n')
          cursorLine++;
        cursor++;
      }
    } else {
      log.debug(`onEnter(): cursor[${cursor}]: "${sentence[cursor]}" (at textarea start)`)
      cursorLine = -1;
    }
  }

  log.debug(`onEnter(): cursor[${cursor}]: "${sentence[cursor]}", line[${cursorLine}]: ${lines[cursorLine]}`);

  if (event.preventDefault) // bc of testing, sometimes these are fake events
    event.preventDefault();

  switch (manager.format) {
    case ('CoNLL-U'):

      throw new Error('deprecated');
      if (cursor) {
        const tabs = lines[cursorLine].split('\t');
        const token = manager.current.getById(tabs[0]).token;
        manager.current.insertTokenAfter(token);

      } else {
        const token = manager.current[0].token;
        manager.current.insertTokenBefore(token);
      }

      // parse but persist the table settings
      const is_table_view = manager.current.is_table_view;
      const column_visibilities = manager.current.column_visibilities;
      manager.parse(manager.conllu);
      manager.current.is_table_view = is_table_view;
      manager.current.column_visibilities = column_visibilities;

      break;

    case ('CG3'):

      throw new errors.NotImplementedError('can\'t onEnter with CG3 :/');*/
/*
// advance to the end of an analysis
log.debug(`onEnter(): line[${cursorLine}]: "${lines[cursorLine]}", cursor[${cursor}]: "${sentence[cursor]}"`);
while (cursorLine < lines.length - 1) {
    if (lines[cursorLine + 1].startsWith('"<'))
        break;
    cursorLine++;
    cursor += lines[cursorLine].length + 1;
    log.debug(`onEnter(): incrementing line[${cursorLine}]: "${lines[cursorLine]}", cursor[${cursor}]: "${sentence[cursor]}"`);
}
  lineId = lines.slice(0, cursorLine + 1).reduce((acc, line) => {
    return acc + line.startsWith('"<');
}, 0) + 1;
log.debug(`onEnter(): inserting line with id: ${lineId}`);
log.debug(`onEnter(): resetting all content lines: [${lines}]`);
  const incrementIndices = (lines, lineId) => {
  return lines.map((line) => {
    if (line.startsWith('#'))
      return line;
    (line.match(/[#>][0-9]+/g) || []).map((match) => {
      let id = parseInt(match.slice(1));
      id += (id >= lineId ? 1 : 0);
      line = line.replace(match, `${match.slice(0,1)}${id}`)
    });
    return line;
  });
}
before = incrementIndices(lines.slice(0, cursorLine + 1), lineId);
during = [`"<_>"`, `\t${getCG3Analysis(lineId, {id:lineId})}`];
after = incrementIndices(lines.slice(cursorLine + 1), lineId);
  log.debug(`onEnter(): preceding line(s) : [${before}]`);
log.debug(`onEnter(): interceding lines : [${during}]`);
log.debug(`onEnter(): proceeding line(s): [${after}]`);
  $('#text-data').val(before.concat(during, after).join('\n'))
  .prop('selectionStart', cursor)
  .prop('selectionEnd', cursor);*/

/*
break;
default:
insertSentence();
}
gui.refresh();
}
*/

},{"jquery":393,"underscore":502}],17:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');

var Labeler = function () {
  function Labeler(gui) {
    _classCallCheck(this, Labeler);

    this.gui = gui;
  }

  _createClass(Labeler, [{
    key: 'bind',
    value: function bind() {

      var self = this;

      $('#label-input').keyup(function (e) {
        if (e.which === self.gui.keys.ENTER) {

          if (!self.current) return;

          var target = $(e.target),
              names = target.val().trim().split(/\s+/);

          names.split(/\s+/).forEach(function (name) {

            if (self.labeler.get(name)) return;

            self.gui.status.normal('add-label-' + name);
            self.labeler.addLabel(name, [self.current]);
          });

          $('#label-input').val('');
          self.refresh();
        }
      });

      $('#label-clear-filter').click(function (e) {

        self.labeler._filter = new Set();
        self.gui.refresh();
      });

      $('#labels-horiz .label-text').click(function (e) {

        var target = $(e.target),
            name = target.closest('li').attr('name');

        if (self.labeler.sentenceHasLabel(name)) {

          self.gui.status.normal('add-label-' + name);
          self.labeler.addLabel(name, [self.current]);
        } else {

          self.gui.status.normal('remove-label-' + name);
          self.labeler.removeLabel(name, [self.current]);
        }

        self.gui.refresh();
        flashDropdown(name);
      });

      $('#labels-horiz .refresh-color').click(function (e) {

        var target = $(e.target),
            name = target.closest('li').attr('name');

        self.labeler.get(name)._label.changeColor();
        self.refresh();
        flashDropdown(name);
      });

      $('#labels-horiz input[name="label-name"]').keyup(function (e) {
        if (event.which === self.gui.keys.ENTER) {

          var target = $(e.target),
              oldName = target.closest('li').attr('name'),
              newName = target.val();

          self.labeler.changeLabelName(oldName, newName);
          self.gui.update();
          flashDropdown(name, 'label-name');
        }
      });

      $('#labels-horiz input[name="label-desc"]').keyup(function (e) {
        if (event.which === self.gui.keys.ENTER) {

          var target = $(e.target),
              _name = target.closest('li').attr('name'),
              desc = target.val();

          self.labeler.changeLabelDesc(_name, desc);
          self.gui.update();
          flashDropdown(_name, 'label-desc');
        }
      });

      $('#labels-horiz input[name="label-color"]').keyup(function (e) {
        if (event.which === self.gui.keys.ENTER) {

          var target = $(e.target),
              _name2 = target.closest('li').attr('name'),
              color = target.val();

          self.labeler.changeLabelColor(_name2, color);
          self.gui.update();
          flashDropdown(_name2, 'label-color');
        }
      });

      $('#labels-horiz input[name="filtering"]').click(function (e) {

        var target = $(e.target),
            name = target.closest('li').attr('name');

        if (self.labeler._filter.has(name)) {
          self.labeler.removeFromFilter(name);
        } else {
          self.labeler.addToFilter(name);
        }

        self.gui.refresh();
        flashDropdown(name);
      });

      $('#labels-horiz .delete-button').click(function (e) {

        var target = $(e.target),
            name = target.closest('li').attr('name');

        var response = confirm('Are you sure you want to delete the label "' + name + '"?');
        if (!response) return;

        self.gui.status.normal('remove-label-' + name);
        self.labeler.removeLabel(name);

        self.gui.refresh();
        flashDropdown(name);
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      var _this = this;

      var config = this.gui.config;

      $('#label-container').css('display', config.is_label_bar_visible && config.is_textarea_visible ? 'flex' : 'none');

      $('#label-clear-filter .label-text').toggleClass('disabled', !!this.labeler._filter.size);

      $('.label.horiz').detach();
      _.each(this.labeler._labels, function (label) {

        label = label._label;

        $('#labels-horiz').append($('<li>').attr('name', label.name).addClass('label horiz').addClass(_this.labeler.sentenceHasLabel(_this.current) ? 'in-comments' : 'not-in-comments').addClass(_this.labeler.sentenceInFilter(_this.current) ? 'filtering' : 'not-filtering').append($('<div>').addClass('label-text').text(label.name).css('background-color', '#' + label.bColor).css('color', '#' + label.tColor)).append($('<div>').addClass('label-hidden').append($('<div>').addClass('label-hidden-group').append($('<div>').addClass('label-hidden-item').append($('<strong>').text('Name')).append($('<input>').attr('name', 'label-name').val(label.name))).append($('<div>').addClass('label-hidden-item').append($('<strong>').text('Description')).append($('<input>').attr('name', 'label-desc').val(label.desc))).append($('<div>').addClass('label-hidden-item').append($('<strong>').text('Color')).append($('<div>').addClass('label-hidden-item-inner').append($('<span>').addClass('hex-color-group').text('#').append($('<input>').attr('name', 'label-color').attr('pattern', '[A-Fa-f\\d]{6}').val(label.bColor))).append($('<button>').attr('type', 'button').addClass('btn btn-secondary refresh-color').css('background-color', '#' + label.bColor).append($('<i>').addClass('fa fa-refresh')))))).append($('<hr>')).append($('<div>').addClass('label-hidden-group').append($('<div>').addClass('label-hidden-item').append($('<div>').addClass('label-hidden-item-inner').append($('<input>').attr('name', 'filtering').attr('type', 'checkbox').prop('checked', _this.labeler.sentenceInFilter(_this.current))).append($('<span>').addClass('filtering-label checkbox-label').text('filtering'))))).append($('<hr>')).append($('<div>').addClass('label-hidden-group').append($('<div>').addClass('label-hidden-item delete-item').append($('<button>').attr('type', 'button').addClass('btn btn-secondary delete-button').text('delete'))))));
      });

      this.bind();
    }
  }, {
    key: 'current',
    get: function get() {
      return this.gui.app.corpus.current;
    }
  }, {
    key: 'labeler',
    get: function get() {
      return this.gui.app.corpus._corpus._labeler;
    }
  }]);

  return Labeler;
}();

module.exports = Labeler;

},{"jquery":393,"underscore":502}],18:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');
var utils = require('../utils');

var Menu = function () {
  function Menu(gui) {
    _classCallCheck(this, Menu);

    this.gui = gui;
    this.is_visible = false;
  }

  _createClass(Menu, [{
    key: 'bind',
    value: function bind() {

      var self = this;

      $('#content').click(function (e) {

        var isDescendent = !!$(e.target).closest('#dropdown-container').length;
        if (isDescendent) return;

        self.is_visible = false;
        self.refresh();
      });

      $('#btnMenuDropdown').click(function (e) {

        self.is_visible = !self.is_visible;
        self.refresh();
      });

      $('#btnPrevSentence').click(function (e) {
        return self.gui.app.corpus.prev();
      });
      $('#btnNextSentence').click(function (e) {
        return self.gui.app.corpus.next();
      });
      $('#current-sentence').blur(function (e) {

        var index = parseInt($('current-sentence').val()) - 1;
        self.gui.app.corpus.index = index;
      });
      $('#btnRemoveSentence').click(function (e) {
        return self.gui.app.corpus.removeSentence();
      });
      $('#btnAddSentence').click(function (e) {
        return self.gui.app.corpus.insertSentence();
      });

      $('.pin').click(function (e) {

        var name = $(e.target).closest('.dropdown-group-item').attr('name');

        if (self.gui.config.pinned_menu_items.has(name)) {
          self.gui.config.pinned_menu_items.delete(name);
        } else {
          self.gui.config.pinned_menu_items.add(name);
        }

        self.gui.save();
        self.refresh();
      });

      $('[name="chat"]').click(function (e) {

        var chat = self.gui.chat;
        chat.is_visible = !chat.is_visible;

        chat.refresh();
      });

      $('[name="logout"]').click(function (e) {
        utils.link('/logout?treebank_id=' + utils.getTreebankId(), '_self');
      });
      $('[name="login"]').click(function (e) {
        utils.link('/oauth/login?treebank_id=' + utils.getTreebankId(), '_self');
      });
      $('[name="manage-repos"]').click(function (e) {
        utils.link('/repos');
      });
      $('[name="manage-permissions"]').click(function (e) {
        utils.link('/permissions');
      });

      $('[name="save-corpus"]').click(function (e) {
        if (!$(e.target).is('.pin')) self.gui.app.save();
      });
      $('[name="upload-file"]').click(function (e) {
        var target = $(e.target);
        if (!target.is('.pin') && !target.closest('a').hasClass('disabled')) self.gui.modals.uploadFile.show();
      });
      $('[name="upload-url"]').click(function (e) {
        var target = $(e.target);
        if (!target.is('.pin') && !target.closest('a').hasClass('disabled')) self.gui.modals.uploadURL.show();
      });
      $('[name="download-corpus"]').click(function (e) {
        if (!$(e.target).is('.pin')) self.gui.app.download();
      });
      $('[name="discard-corpus"]').click(function (e) {
        if ($(e.target).is('.pin')) return;

        var response = confirm('Do you want to clear the corpus (remove all sentences)?');
        if (!response) return;

        self.gui.app.discard();
      });

      $('[name="export-as-latex"]').click(function (e) {
        if (!$(e.target).is('.pin')) utils.export.latex(self.gui.app);
      });
      $('[name="export-as-png"]').click(function (e) {
        if (!$(e.target).is('.pin')) utils.export.png(self.gui.app);
      });
      $('[name="export-as-svg"]').click(function (e) {
        var target = $(e.target);
        if (!target.is('.pin') && !target.closest('a').hasClass('disabled')) utils.export.svg(self.gui.app);
      });

      $('#btnUndo').click(function (e) {
        return self.gui.app.undoer.undo();
      });
      $('#btnRedo').click(function (e) {
        return self.gui.app.undoer.redo();
      });

      $('[name="show-labels"]').click(function (e) {
        if ($(e.target).is('.pin')) return;

        self.gui.config.is_label_bar_visible = !self.gui.config.is_label_bar_visible;
        self.gui.refresh();
      });
      $('[name="show-help"]').click(function (e) {
        if (!$(e.target).is('.pin')) utils.link('/help', '_self');
      });
      $('[name="show-settings"]').click(function (e) {
        if (!$(e.target).is('.pin')) utils.link('/settings?treebank_id=' + utils.getTreebankId(), '_self');
      });
      $('[name="show-table"]').click(function (e) {
        var target = $(e.target);
        if (target.is('.pin') || target.closest('a').hasClass('disabled')) return;

        self.gui.config.is_table_visible = !self.gui.config.is_table_visible;
        self.gui.refresh();
      });

      $('#btnToggleTextarea').click(function (e) {

        self.gui.config.is_textarea_visible = !self.gui.config.is_textarea_visible;
        self.gui.refresh();
      });

      // tab converters
      $('.format-tab').click(function (e) {

        var target = $(e.target);

        if (target.hasClass('disabled') || target.hasClass('fa')) return;

        var corpus = self.gui.app.corpus;

        if (corpus.format === target.attr('name')) return;

        if (!corpus.isParsed) corpus.parse(corpus.unparsed);

        corpus.format = target.attr('name');
        self.gui.refresh();
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {

      var config = this.gui.config;

      // internals

      $('.btn').removeClass('disabled').prop('disabled', false);

      $('#dropdown-container .dropdown-toggle').removeClass('open');
      if (this.is_visible) $('#dropdown-container .dropdown-toggle').addClass('open');

      $('#dropdown-container .dropdown-content').removeClass('menu-show menu-hidden').addClass(this.is_visible ? 'menu-show' : 'menu-hidden');

      $('.pinnable').removeClass('pinned').addClass('unpinned');
      config.pinned_menu_items.forEach(function (name) {

        $('.pinnable[name="' + name + '"]').removeClass('unpinned').addClass('pinned');
      });

      $('.btn-group .btn').css('border-radius', '0');
      $('.btn-group').each(function (i, group) {

        group = $(group);
        var visible = false,
            first = null,
            last = null;

        group.children().each(function (j, btn) {
          btn = $(btn);

          if (!btn.hasClass('unpinned') && btn.hasClass('btn')) {
            first = first || btn;
            last = btn;
          }

          if (btn.hasClass('pinnable')) {
            visible = visible || btn.hasClass('pinned');
          } else {
            visible = true;
          }
        });

        group.css('display', visible ? 'inline-flex' : 'none');
        if (first) first.css('border-top-left-radius', '5px').css('border-bottom-left-radius', '5px');
        if (last) last.css('border-top-right-radius', '5px').css('border-bottom-right-radius', '5px');
      });

      // corpus navigation

      var corpus = this.gui.app.corpus,
          indices = corpus.getIndices();

      $('#current-sentence').val(indices.current);
      $('#total-sentences').text(indices.total);
      if (!corpus.index) $('#btnPrevSentence').addClass('disabled');
      if (corpus.index === (corpus._corpus.filtered.length || corpus.length) - 1) $('#btnNextSentence').addClass('disabled');

      // other buttons

      var server_running = this.gui.app.server.is_running;
      $('[name="upload-file"]').toggleClass('disabled', !server_running).prop('disabled', !server_running);

      $('.export-button').toggleClass('disabled', !this.gui.app.graph.length);
      $('[name="export-as-svg"]') // TODO: until SVG is fixed
      .addClass('disabled');
      $('[name="show-table"]').toggleClass('disabled', corpus.format !== 'CoNLL-U');

      $('#btnUndo').prop('disabled', !this.gui.app.undoer.hasUndo());
      $('#btnRedo').prop('disabled', !this.gui.app.undoer.hasRedo());

      // deactive all the other format tabs
      //   NB: when unparsed, none will be active
      $('.nav-link').removeClass('active').filter('[name="' + corpus.format + '"]').toggleClass('active', corpus.isParsed);

      $('#btnToggleTextarea .fa').removeClass('fa-chevron-down fa-chevron-up');

      if (config.is_textarea_visible) {

        $('#data-container').show();
        $('#top-buttons-container').removeClass('extra-space');
        $('.format-tab').show();

        $('#btnToggleTable').show().find('.fa').removeClass('fa-table fa-code').addClass(config.is_table_visible ? 'fa-code' : 'fa-table').toggleClass('disabled', corpus.format !== 'CoNLL-U').prop('disabled', corpus.format !== 'CoNLL-U').show();

        $('#btnToggleTextarea .fa').addClass('fa-chevron-up');
      } else {

        $('#data-container').hide();
        $('#top-buttons-container').addClass('extra-space');
        $('.format-tab').not('.active').hide();
        $('#btnToggleTable').hide();
        $('#btnToggleTextarea .fa').addClass('fa-chevron-down');
      }
    }
  }]);

  return Menu;
}();

module.exports = Menu;

},{"../utils":32,"jquery":393,"underscore":502}],19:[function(require,module,exports){
'use strict';

module.exports = function (gui) {
  return {

    uploadFile: require('./upload-file')(gui),
    uploadURL: require('./upload-url')(gui)

  };
};

},{"./upload-file":20,"./upload-url":21}],20:[function(require,module,exports){
'use strict';

var $ = require('jquery');
var _gui = null;

/**
 * Show the modal.
 */
function show() {
  console.log('show');
  console.trace();
  $('#upload-file-modal').show().find('[type="submit"]').prop('disabled', !_gui.app.server.is_running);
}

/**
 * Hide the modal.
 */
function hide() {
  $('#upload-file-modal').hide();
}

/**
 * Bind the click-handler.
 */
function bind() {

  $('#upload-file-modal').find('[name="close"]').click(hide);
}

module.exports = function (gui) {

  _gui = gui;
  bind();

  return {
    hide: hide,
    show: show
  };
};

},{"jquery":393}],21:[function(require,module,exports){
'use strict';

var $ = require('jquery');
var _gui = null;

/**
 * Show the modal.
 */
function show() {
  $('#upload-url-modal').show().find('[type="submit"]').prop('disabled', !_gui.app.server.is_running);
}

/**
 * Hide the modal.
 */
function hide() {
  $('#upload-url-modal').hide();
}

/**
 * Bind the click-handler.
 */
function bind() {

  $('#upload-url-modal').find('[name="close"]').click(hide);
}

module.exports = function (gui) {

  _gui = gui;
  bind();

  return {
    hide: hide,
    show: show
  };
};

},{"jquery":393}],22:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Note: I had to change the name from [Aa]utocomplete to [Ss]elfcomplete
// in order to get this to work at the same time as JQuery-UI

/**
*  Ajax Selfcomplete for jQuery, version 1.4.4
*  (c) 2017 Tomas Kirda
*
*  Ajax Selfcomplete for jQuery is freely distributable under the terms of an MIT-style license.
*  For details, see the web site: https://github.com/devbridge/jQuery-Selfcomplete
*/

/*jslint  browser: true, white: true, single: true, this: true, multivar: true */
/*global define, window, document, jQuery, exports, require */

// Expose plugin as an AMD module if AMD loader is present:
(function (factory) {
    "use strict";

    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof require === 'function') {
        // Browserify
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var utils = function () {
        return {
            escapeRegExChars: function escapeRegExChars(value) {
                return value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
            },
            createNode: function createNode(containerClass) {
                var div = document.createElement('div');
                div.className = containerClass;
                div.style.position = 'absolute';
                div.style.display = 'none';
                return div;
            }
        };
    }(),
        keys = {
        ESC: 27,
        TAB: 9,
        RETURN: 13,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
    },
        noop = $.noop;

    function Selfcomplete(el, options) {
        var that = this;

        // Shared variables:
        that.element = el;
        that.el = $(el);
        that.suggestions = [];
        that.badQueries = [];
        that.selectedIndex = -1;
        that.currentValue = that.element.value;
        that.timeoutId = null;
        that.cachedResponse = {};
        that.onChangeTimeout = null;
        that.onChange = null;
        that.isLocal = false;
        that.suggestionsContainer = null;
        that.noSuggestionsContainer = null;
        that.options = $.extend({}, Selfcomplete.defaults, options);
        that.classes = {
            selected: 'selfcomplete-selected',
            suggestion: 'selfcomplete-suggestion'
        };
        that.hint = null;
        that.hintValue = '';
        that.selection = null;

        // Initialize and set options:
        that.initialize();
        that.setOptions(options);
    }

    Selfcomplete.utils = utils;

    $.Selfcomplete = Selfcomplete;

    Selfcomplete.defaults = {
        ajaxSettings: {},
        autoSelectFirst: false,
        appendTo: 'body',
        serviceUrl: null,
        lookup: null,
        onSelect: null,
        width: 'auto',
        minChars: 1,
        maxHeight: 300,
        deferRequestBy: 0,
        params: {},
        formatResult: _formatResult,
        formatGroup: _formatGroup,
        delimiter: null,
        zIndex: 9999,
        type: 'GET',
        noCache: false,
        onSearchStart: noop,
        onSearchComplete: noop,
        onSearchError: noop,
        preserveInput: false,
        containerClass: 'selfcomplete-suggestions',
        tabDisabled: false,
        dataType: 'text',
        currentRequest: null,
        triggerSelectOnValidInput: true,
        preventBadQueries: true,
        lookupFilter: _lookupFilter,
        paramName: 'query',
        transformResult: _transformResult,
        showNoSuggestionNotice: false,
        noSuggestionNotice: 'No results',
        orientation: 'bottom',
        forceFixPosition: false
    };

    function _lookupFilter(suggestion, originalQuery, queryLowerCase) {
        return suggestion.value.toLowerCase().startsWith(queryLowerCase) !== false;
    };

    function _transformResult(response) {
        return typeof response === 'string' ? $.parseJSON(response) : response;
    };

    function _formatResult(suggestion, currentValue) {
        // Do not replace anything if the current value is empty
        if (!currentValue) {
            return suggestion.value;
        }

        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';

        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\/strong>').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/&lt;(\/?strong)&gt;/g, '<$1>');
    };

    function _formatGroup(suggestion, category) {
        return '<div class="selfcomplete-group">' + category + '</div>';
    };

    Selfcomplete.prototype = {

        initialize: function initialize() {
            var that = this,
                suggestionSelector = '.' + that.classes.suggestion,
                selected = that.classes.selected,
                options = that.options,
                container;

            // Remove selfcomplete attribute to prevent native suggestions:
            that.element.setAttribute('selfcomplete', 'off');

            // html() deals with many types: htmlString or Element or Array or jQuery
            that.noSuggestionsContainer = $('<div class="selfcomplete-no-suggestion"></div>').html(this.options.noSuggestionNotice).get(0);

            that.suggestionsContainer = Selfcomplete.utils.createNode(options.containerClass);

            container = $(that.suggestionsContainer);

            container.appendTo(options.appendTo || 'body');

            // Only set width if it was provided:
            if (options.width !== 'auto') {
                container.css('width', options.width);
            }

            // Listen for mouse over event on suggestions list:
            container.on('mouseover.selfcomplete', suggestionSelector, function () {
                that.activate($(this).data('index'));
            });

            // Deselect active element when mouse leaves suggestions container:
            container.on('mouseout.selfcomplete', function () {
                that.selectedIndex = -1;
                container.children('.' + selected).removeClass(selected);
            });

            // Listen for click event on suggestions list:
            container.on('click.selfcomplete', suggestionSelector, function () {
                that.select($(this).data('index'));
            });

            container.on('click.selfcomplete', function () {
                clearTimeout(that.blurTimeoutId);
            });

            that.fixPositionCapture = function () {
                if (that.visible) {
                    that.fixPosition();
                }
            };

            $(window).on('resize.selfcomplete', that.fixPositionCapture);

            that.el.on('keydown.selfcomplete', function (e) {
                that.onKeyPress(e);
            });
            that.el.on('keyup.selfcomplete', function (e) {
                that.onKeyUp(e);
            });
            that.el.on('blur.selfcomplete', function () {
                that.onBlur();
            });
            that.el.on('focus.selfcomplete', function () {
                that.onFocus();
            });
            that.el.on('change.selfcomplete', function (e) {
                that.onKeyUp(e);
            });
            that.el.on('input.selfcomplete', function (e) {
                that.onKeyUp(e);
            });
        },

        onFocus: function onFocus() {
            var that = this;

            that.fixPosition();

            if (that.el.val().length >= that.options.minChars) {
                that.onValueChange();
            }
        },

        onBlur: function onBlur() {
            var that = this;

            // If user clicked on a suggestion, hide() will
            // be canceled, otherwise close suggestions
            that.blurTimeoutId = setTimeout(function () {
                that.hide();
            }, 200);
        },

        abortAjax: function abortAjax() {
            var that = this;
            if (that.currentRequest) {
                that.currentRequest.abort();
                that.currentRequest = null;
            }
        },

        setOptions: function setOptions(suppliedOptions) {
            var that = this,
                options = $.extend({}, that.options, suppliedOptions);

            that.isLocal = Array.isArray(options.lookup);

            if (that.isLocal) {
                options.lookup = that.verifySuggestionsFormat(options.lookup);
            }

            options.orientation = that.validateOrientation(options.orientation, 'bottom');

            // Adjust height, width and z-index:
            $(that.suggestionsContainer).css({
                'max-height': options.maxHeight + 'px',
                'width': options.width + 'px',
                'z-index': options.zIndex
            });

            this.options = options;
        },

        clearCache: function clearCache() {
            this.cachedResponse = {};
            this.badQueries = [];
        },

        clear: function clear() {
            this.clearCache();
            this.currentValue = '';
            this.suggestions = [];
        },

        disable: function disable() {
            var that = this;
            that.disabled = true;
            clearTimeout(that.onChangeTimeout);
            that.abortAjax();
        },

        enable: function enable() {
            this.disabled = false;
        },

        fixPosition: function fixPosition() {
            // Use only when container has already its content

            var that = this,
                $container = $(that.suggestionsContainer),
                containerParent = $container.parent().get(0);
            // Fix position automatically when appended to body.
            // In other cases force parameter must be given.
            if (containerParent !== document.body && !that.options.forceFixPosition) {
                return;
            }

            // Choose orientation
            var orientation = that.options.orientation,
                containerHeight = $container.outerHeight(),
                height = that.el.outerHeight(),
                offset = that.el.offset(),
                styles = { 'top': offset.top, 'left': offset.left };

            if (orientation === 'auto') {
                var viewPortHeight = $(window).height(),
                    scrollTop = $(window).scrollTop(),
                    topOverflow = -scrollTop + offset.top - containerHeight,
                    bottomOverflow = scrollTop + viewPortHeight - (offset.top + height + containerHeight);

                orientation = Math.max(topOverflow, bottomOverflow) === topOverflow ? 'top' : 'bottom';
            }

            if (orientation === 'top') {
                styles.top += -containerHeight;
            } else {
                styles.top += height;
            }

            // If container is not positioned to body,
            // correct its position using offset parent offset
            if (containerParent !== document.body) {
                var opacity = $container.css('opacity'),
                    parentOffsetDiff;

                if (!that.visible) {
                    $container.css('opacity', 0).show();
                }

                parentOffsetDiff = $container.offsetParent().offset();
                styles.top -= parentOffsetDiff.top;
                styles.left -= parentOffsetDiff.left;

                if (!that.visible) {
                    $container.css('opacity', opacity).hide();
                }
            }

            if (that.options.width === 'auto') {
                styles.width = that.el.outerWidth() + 'px';
            }

            $container.css(styles);
        },

        isCursorAtEnd: function isCursorAtEnd() {
            var that = this,
                valLength = that.el.val().length,
                selectionStart = that.element.selectionStart,
                range;

            if (typeof selectionStart === 'number') {
                return selectionStart === valLength;
            }
            if (document.selection) {
                range = document.selection.createRange();
                range.moveStart('character', -valLength);
                return valLength === range.text.length;
            }
            return true;
        },

        onKeyPress: function onKeyPress(e) {
            var that = this;

            // If suggestions are hidden and user presses arrow down, display suggestions:
            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {
                that.suggest();
                return;
            }

            if (that.disabled || !that.visible) {
                return;
            }

            switch (e.which) {
                case keys.ESC:
                    that.el.val(that.currentValue);
                    that.hide();
                    break;
                case keys.RIGHT:
                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {
                        that.selectHint();
                        break;
                    }
                    return;
                case keys.TAB:
                    if (that.hint && that.options.onHint) {
                        that.selectHint();
                        return;
                    }
                    if (that.selectedIndex === -1) {
                        that.hide();
                        return;
                    }
                    that.select(that.selectedIndex);
                    if (that.options.tabDisabled === false) {
                        return;
                    }
                    break;
                case keys.RETURN:
                    if (that.selectedIndex === -1) {
                        that.hide();
                        return;
                    }
                    that.select(that.selectedIndex);
                    break;
                case keys.UP:
                    that.moveUp();
                    break;
                case keys.DOWN:
                    that.moveDown();
                    break;
                default:
                    return;
            }

            // Cancel event if function did not return:
            e.stopImmediatePropagation();
            e.preventDefault();
        },

        onKeyUp: function onKeyUp(e) {
            var that = this;

            if (that.disabled) {
                return;
            }

            switch (e.which) {
                case keys.UP:
                case keys.DOWN:
                    return;
            }

            clearTimeout(that.onChangeTimeout);

            if (that.currentValue !== that.el.val()) {
                that.findBestHint();
                if (that.options.deferRequestBy > 0) {
                    // Defer lookup in case when value changes very quickly:
                    that.onChangeTimeout = setTimeout(function () {
                        that.onValueChange();
                    }, that.options.deferRequestBy);
                } else {
                    that.onValueChange();
                }
            }
        },

        onValueChange: function onValueChange() {
            if (this.ignoreValueChange) {
                this.ignoreValueChange = false;
                return;
            }

            var that = this,
                options = that.options,
                value = that.el.val(),
                query = that.getQuery(value);

            if (that.selection && that.currentValue !== query) {
                that.selection = null;
                (options.onInvalidateSelection || $.noop).call(that.element);
            }

            clearTimeout(that.onChangeTimeout);
            that.currentValue = value;
            that.selectedIndex = -1;

            // Check existing suggestion for the match before proceeding:
            if (options.triggerSelectOnValidInput && that.isExactMatch(query)) {
                that.select(0);
                return;
            }

            if (query.length < options.minChars) {
                that.hide();
            } else {
                that.getSuggestions(query);
            }
        },

        isExactMatch: function isExactMatch(query) {
            var suggestions = this.suggestions;

            return suggestions.length === 1 && suggestions[0].value.toLowerCase() === query.toLowerCase();
        },

        getQuery: function getQuery(value) {
            var delimiter = this.options.delimiter,
                parts;

            if (!delimiter) {
                return value;
            }
            parts = value.split(delimiter);
            return $.trim(parts[parts.length - 1]);
        },

        getSuggestionsLocal: function getSuggestionsLocal(query) {
            var that = this,
                options = that.options,
                queryLowerCase = query.toLowerCase(),
                filter = options.lookupFilter,
                limit = parseInt(options.lookupLimit, 10),
                data;

            data = {
                suggestions: $.grep(options.lookup, function (suggestion) {
                    return filter(suggestion, query, queryLowerCase);
                })
            };

            if (limit && data.suggestions.length > limit) {
                data.suggestions = data.suggestions.slice(0, limit);
            }

            return data;
        },

        getSuggestions: function getSuggestions(q) {
            var response,
                that = this,
                options = that.options,
                serviceUrl = options.serviceUrl,
                params,
                cacheKey,
                ajaxSettings;

            options.params[options.paramName] = q;

            if (options.onSearchStart.call(that.element, options.params) === false) {
                return;
            }

            params = options.ignoreParams ? null : options.params;

            if ($.isFunction(options.lookup)) {
                options.lookup(q, function (data) {
                    that.suggestions = data.suggestions;
                    that.suggest();
                    options.onSearchComplete.call(that.element, q, data.suggestions);
                });
                return;
            }

            if (that.isLocal) {
                response = that.getSuggestionsLocal(q);
            } else {
                if ($.isFunction(serviceUrl)) {
                    serviceUrl = serviceUrl.call(that.element, q);
                }
                cacheKey = serviceUrl + '?' + $.param(params || {});
                response = that.cachedResponse[cacheKey];
            }

            if (response && Array.isArray(response.suggestions)) {
                that.suggestions = response.suggestions;
                that.suggest();
                options.onSearchComplete.call(that.element, q, response.suggestions);
            } else if (!that.isBadQuery(q)) {
                that.abortAjax();

                ajaxSettings = {
                    url: serviceUrl,
                    data: params,
                    type: options.type,
                    dataType: options.dataType
                };

                $.extend(ajaxSettings, options.ajaxSettings);

                that.currentRequest = $.ajax(ajaxSettings).done(function (data) {
                    var result;
                    that.currentRequest = null;
                    result = options.transformResult(data, q);
                    that.processResponse(result, q, cacheKey);
                    options.onSearchComplete.call(that.element, q, result.suggestions);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);
                });
            } else {
                options.onSearchComplete.call(that.element, q, []);
            }
        },

        isBadQuery: function isBadQuery(q) {
            if (!this.options.preventBadQueries) {
                return false;
            }

            var badQueries = this.badQueries,
                i = badQueries.length;

            while (i--) {
                if (q.indexOf(badQueries[i]) === 0) {
                    return true;
                }
            }

            return false;
        },

        hide: function hide() {
            var that = this,
                container = $(that.suggestionsContainer);

            if ($.isFunction(that.options.onHide) && that.visible) {
                that.options.onHide.call(that.element, container);
            }

            that.visible = false;
            that.selectedIndex = -1;
            clearTimeout(that.onChangeTimeout);
            $(that.suggestionsContainer).hide();
            that.signalHint(null);
        },

        suggest: function suggest() {
            if (!this.suggestions.length) {
                if (this.options.showNoSuggestionNotice) {
                    this.noSuggestions();
                } else {
                    this.hide();
                }
                return;
            }

            var that = this,
                options = that.options,
                groupBy = options.groupBy,
                formatResult = options.formatResult,
                value = that.getQuery(that.currentValue),
                className = that.classes.suggestion,
                classSelected = that.classes.selected,
                container = $(that.suggestionsContainer),
                noSuggestionsContainer = $(that.noSuggestionsContainer),
                beforeRender = options.beforeRender,
                html = '',
                category,
                formatGroup = function formatGroup(suggestion, index) {
                var currentCategory = suggestion.data[groupBy];

                if (category === currentCategory) {
                    return '';
                }

                category = currentCategory;

                return options.formatGroup(suggestion, category);
            };

            if (options.triggerSelectOnValidInput && that.isExactMatch(value)) {
                that.select(0);
                return;
            }

            // Build suggestions inner HTML:
            $.each(that.suggestions, function (i, suggestion) {
                if (groupBy) {
                    html += formatGroup(suggestion, value, i);
                }

                html += '<div class="' + className + '" data-index="' + i + '">' + formatResult(suggestion, value, i) + '</div>';
            });

            this.adjustContainerWidth();

            noSuggestionsContainer.detach();
            container.html(html);

            if ($.isFunction(beforeRender)) {
                beforeRender.call(that.element, container, that.suggestions);
            }

            that.fixPosition();
            container.show();

            // Select first value by default:
            if (options.autoSelectFirst) {
                that.selectedIndex = 0;
                container.scrollTop(0);
                container.children('.' + className).first().addClass(classSelected);
            }

            that.visible = true;
            that.findBestHint();
        },

        noSuggestions: function noSuggestions() {
            var that = this,
                beforeRender = that.options.beforeRender,
                container = $(that.suggestionsContainer),
                noSuggestionsContainer = $(that.noSuggestionsContainer);

            this.adjustContainerWidth();

            // Some explicit steps. Be careful here as it easy to get
            // noSuggestionsContainer removed from DOM if not detached properly.
            noSuggestionsContainer.detach();

            // clean suggestions if any
            container.empty();
            container.append(noSuggestionsContainer);

            if ($.isFunction(beforeRender)) {
                beforeRender.call(that.element, container, that.suggestions);
            }

            that.fixPosition();

            container.show();
            that.visible = true;
        },

        adjustContainerWidth: function adjustContainerWidth() {
            var that = this,
                options = that.options,
                width,
                container = $(that.suggestionsContainer);

            // If width is auto, adjust width before displaying suggestions,
            // because if instance was created before input had width, it will be zero.
            // Also it adjusts if input width has changed.
            if (options.width === 'auto') {
                width = that.el.outerWidth();
                container.css('width', width > 0 ? width : 300);
            } else if (options.width === 'flex') {
                // Trust the source! Unset the width property so it will be the max length
                // the containing elements.
                container.css('width', '');
            }
        },

        findBestHint: function findBestHint() {
            var that = this,
                value = that.el.val().toLowerCase(),
                bestMatch = null;

            if (!value) {
                return;
            }

            $.each(that.suggestions, function (i, suggestion) {
                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;
                if (foundMatch) {
                    bestMatch = suggestion;
                }
                return !foundMatch;
            });

            that.signalHint(bestMatch);
        },

        signalHint: function signalHint(suggestion) {
            var hintValue = '',
                that = this;
            if (suggestion) {
                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);
            }
            if (that.hintValue !== hintValue) {
                that.hintValue = hintValue;
                that.hint = suggestion;
                (this.options.onHint || $.noop)(hintValue);
            }
        },

        verifySuggestionsFormat: function verifySuggestionsFormat(suggestions) {
            // If suggestions is string array, convert them to supported format:
            if (suggestions.length && typeof suggestions[0] === 'string') {
                return $.map(suggestions, function (value) {
                    return { value: value, data: null };
                });
            }

            return suggestions;
        },

        validateOrientation: function validateOrientation(orientation, fallback) {
            orientation = $.trim(orientation || '').toLowerCase();

            if ($.inArray(orientation, ['auto', 'bottom', 'top']) === -1) {
                orientation = fallback;
            }

            return orientation;
        },

        processResponse: function processResponse(result, originalQuery, cacheKey) {
            var that = this,
                options = that.options;

            result.suggestions = that.verifySuggestionsFormat(result.suggestions);

            // Cache results if cache is not disabled:
            if (!options.noCache) {
                that.cachedResponse[cacheKey] = result;
                if (options.preventBadQueries && !result.suggestions.length) {
                    that.badQueries.push(originalQuery);
                }
            }

            // Return if originalQuery is not matching current query:
            if (originalQuery !== that.getQuery(that.currentValue)) {
                return;
            }

            that.suggestions = result.suggestions;
            that.suggest();
        },

        activate: function activate(index) {
            var that = this,
                activeItem,
                selected = that.classes.selected,
                container = $(that.suggestionsContainer),
                children = container.find('.' + that.classes.suggestion);

            container.find('.' + selected).removeClass(selected);

            that.selectedIndex = index;

            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {
                activeItem = children.get(that.selectedIndex);
                $(activeItem).addClass(selected);
                return activeItem;
            }

            return null;
        },

        selectHint: function selectHint() {
            var that = this,
                i = $.inArray(that.hint, that.suggestions);

            that.select(i);
        },

        select: function select(i) {
            var that = this;
            that.hide();
            that.onSelect(i);
        },

        moveUp: function moveUp() {
            var that = this;

            if (that.selectedIndex === -1) {
                return;
            }

            if (that.selectedIndex === 0) {
                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);
                that.selectedIndex = -1;
                that.ignoreValueChange = false;
                that.el.val(that.currentValue);
                that.findBestHint();
                return;
            }

            that.adjustScroll(that.selectedIndex - 1);
        },

        moveDown: function moveDown() {
            var that = this;

            if (that.selectedIndex === that.suggestions.length - 1) {
                return;
            }

            that.adjustScroll(that.selectedIndex + 1);
        },

        adjustScroll: function adjustScroll(index) {
            var that = this,
                activeItem = that.activate(index);

            if (!activeItem) {
                return;
            }

            var offsetTop,
                upperBound,
                lowerBound,
                heightDelta = $(activeItem).outerHeight();

            offsetTop = activeItem.offsetTop;
            upperBound = $(that.suggestionsContainer).scrollTop();
            lowerBound = upperBound + that.options.maxHeight - heightDelta;

            if (offsetTop < upperBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop);
            } else if (offsetTop > lowerBound) {
                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);
            }

            if (!that.options.preserveInput) {
                // During onBlur event, browser will trigger "change" event,
                // because value has changed, to avoid side effect ignore,
                // that event, so that correct suggestion can be selected
                // when clicking on suggestion with a mouse
                that.ignoreValueChange = true;
                that.el.val(that.getValue(that.suggestions[index].value));
            }

            that.signalHint(null);
        },

        onSelect: function onSelect(index) {
            var that = this,
                onSelectCallback = that.options.onSelect,
                suggestion = that.suggestions[index];

            that.currentValue = that.getValue(suggestion.value);

            if (that.currentValue !== that.el.val() && !that.options.preserveInput) {
                that.el.val(that.currentValue);
            }

            that.signalHint(null);
            that.suggestions = [];
            that.selection = suggestion;

            if ($.isFunction(onSelectCallback)) {
                onSelectCallback.call(that.element, suggestion);
            }
        },

        getValue: function getValue(value) {
            var that = this,
                delimiter = that.options.delimiter,
                currentValue,
                parts;

            if (!delimiter) {
                return value;
            }

            currentValue = that.currentValue;
            parts = currentValue.split(delimiter);

            if (parts.length === 1) {
                return value;
            }

            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;
        },

        dispose: function dispose() {
            var that = this;
            that.el.off('.selfcomplete').removeData('selfcomplete');
            $(window).off('resize.selfcomplete', that.fixPositionCapture);
            $(that.suggestionsContainer).remove();
        }
    };

    // Create chainable jQuery plugin:
    $.fn.devbridgeSelfcomplete = function (options, args) {
        var dataKey = 'selfcomplete';
        // If function invoked without argument return
        // instance of the first matched element:
        if (!arguments.length) {
            return this.first().data(dataKey);
        }

        return this.each(function () {
            var inputElement = $(this),
                instance = inputElement.data(dataKey);

            if (typeof options === 'string') {
                if (instance && typeof instance[options] === 'function') {
                    instance[options](args);
                }
            } else {
                // If instance already exists, destroy it:
                if (instance && instance.dispose) {
                    instance.dispose();
                }
                instance = new Selfcomplete(this, options);
                inputElement.data(dataKey, instance);
            }
        });
    };

    // Don't overwrite if it already exists
    if (!$.fn.selfcomplete) {
        $.fn.selfcomplete = $.fn.devbridgeSelfcomplete;
    }
});

},{"jquery":393}],23:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = require('jquery');

var Status = function () {
    function Status(gui) {
        _classCallCheck(this, Status);

        this.gui = gui;
    }

    _createClass(Status, [{
        key: 'bind',
        value: function bind() {

            var self = this;

            // turn off autoparsing
            $('#parse-status').click(function (e) {

                var gui = self.gui;
                gui.config.autoparsing = !gui.config.autoparsing;

                if (gui.config.autoparsing) {
                    self.gui.app.corpus.parse($('#text-data').val());
                } else {
                    self.gui.app.corpus.current.input = $('#text-data').val();
                    self.gui.app.corpus.format = null;
                }

                gui.save();
                gui.refresh();
            });
        }
    }, {
        key: 'refresh',
        value: function refresh() {

            var corpus = this.gui.app.corpus,
                graph = this.gui.app.graph,
                gui = this.gui;

            $('#parse-status').removeClass('red green').addClass(gui.config.autoparsing ? 'green' : 'red').text(gui.config.autoparsing ? 'on' : 'off');

            var graphStatus = void 0;
            if (!corpus.isParsed) {

                graphStatus = 'blocked';
            } else if (!graph.eles.length) {

                graphStatus = 'uninitialised';
            } else if (graph.cy.$('.splitting').length) {

                graphStatus = 'splitting node';
            } else if (graph.cy.$('.merge-source').length) {

                graphStatus = 'merging tokens';
            } else if (graph.cy.$('.combine-source').length) {

                graphStatus = 'forming multiword token';
            } else if (graph.editing) {

                graphStatus = 'editing ' + graph.editing.data('name');
            } else {

                graphStatus = 'viewing';
            }

            $('#graph-status').removeClass('red green').addClass(corpus.isParsed ? 'green' : 'red').text(graphStatus);
        }
    }, {
        key: 'normal',
        value: function normal(message) {

            var config = this.gui.config;

            if (!config.is_browser) return;

            var div = $('<div>').addClass('status normal').text(message).fadeOut(config.statusNormalFadeout);

            $('#status-container .flowing').prepend(div);

            setTimeout(function () {
                return div.detach();
            }, config.statusNormalFadeout);
        }
    }, {
        key: 'error',
        value: function error(message) {

            var config = this.gui.config;

            if (!config.is_browser) return;

            var div = $('<div>').addClass('status error').text('Error: ' + message).fadeOut(config.statusErrorFadeout);

            $('#status-container .flowing').prepend(div);

            setTimeout(function () {
                return div.detach();
            }, config.statusErrorFadeout);
        }
    }]);

    return Status;
}();

module.exports = Status;

},{"jquery":393}],24:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = require('jquery');
var _ = require('underscore');
var utils = require('../utils');

var Table = function () {
  function Table(gui) {
    _classCallCheck(this, Table);

    this.gui = gui;
    this.col = 1;
    this.cols = 10;
    this.row = 0;
    this.rows = 0;
  }

  _createClass(Table, [{
    key: 'toConllu',
    value: function toConllu() {

      var rows = [];
      for (var i = 0; i <= this.rows; i++) {

        var row = [];
        for (var j = 0; j < 10; j++) {

          row.push($('[row-id="' + i + '"][col-id="' + j + '"]').text() || '_');
        }

        rows.push(row.join('\t'));
      }

      return rows.join('\n');
    }
  }, {
    key: 'goRight',
    value: function goRight(wrap) {

      if (this.col === this.cols - 1) {
        if (!wrap) return;

        this.col = 0;
        this.row += 1;
        if (this.row > this.rows) this.row = 0;
      }

      this.col += 1;

      $('#table-data .editing').blur();
      $('.focused').removeClass('focused');

      var td = $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').addClass('focused').prop('contenteditable', false).focus();
    }
  }, {
    key: 'goLeft',
    value: function goLeft(wrap) {

      if (this.col === 1) {
        if (!wrap) return;

        this.col = this.cols;
        this.row -= 1;
        if (this.row < 0) this.row = this.rows;
      }

      this.col -= 1;

      $('#table-data .editing').blur();
      $('.focused').removeClass('focused');

      var td = $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').addClass('focused').prop('contenteditable', false).focus();
    }
  }, {
    key: 'goUp',
    value: function goUp() {

      if (this.row === 0) return;

      this.row -= 1;

      $('#table-data .editing').blur();
      $('.focused').removeClass('focused');

      var td = $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').addClass('focused').prop('contenteditable', false).focus();
    }
  }, {
    key: 'goDown',
    value: function goDown() {

      if (this.row === this.rows) return;

      this.row += 1;

      $('#table-data .editing').blur();
      $('.focused').removeClass('focused');

      var td = $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').addClass('focused').prop('contenteditable', false).focus();
    }
  }, {
    key: 'toggleEditing',
    value: function toggleEditing(toggle) {

      var td = $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').toggleClass('editing', toggle);

      if (td.hasClass('editing')) {

        td.prop('contenteditable', true).focus();
      } else {

        td.blur();
        $('[col-id="' + this.col + '"][row-id="' + this.row + '"]').addClass('focused').focus();
      }

      console.log(td.prop('contenteditable'));
    }
  }, {
    key: 'bind',
    value: function bind() {

      var self = this;

      $(window).resize(function () {
        $('#data-container > div').css({ 'width': '', 'height': '' });
      });

      $('#table-data th').click(function (e) {

        var target = $(e.target),
            col = target.closest('.hideable').attr('col-id'),
            columns = self.gui.config.column_visibilities;

        if (!target.closest('.hideable').length) return;

        columns[col] = !columns[col];
        self.refresh();
      });

      $('#table-data td').click(function (e) {

        var target = $(e.target);
        self.row = parseInt(target.attr('row-id'));
        self.col = parseInt(target.attr('col-id'));

        $('.focused').removeClass('focused').blur();
        target.addClass('focused');

        self.toggleEditing(true);
      }).blur(function (e) {

        var target = $(e.target),
            uuid = target.attr('uuid'),
            token = self.gui.app.corpus.current.query(function (t) {
          return t.uuid === uuid;
        })[0],
            field = target.attr('field'),
            originalValue = target.attr('original-value') || '',
            value = target.text() || '';

        target.prop('contenteditable', false).removeClass('editing').removeClass('focused');

        if (value === originalValue) return;

        self.gui.app.corpus.parse(self.toConllu());
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {

      $('#table-data th').removeClass('column-show column-hide').find('.fa').removeClass('fa-angle-double-left fa-angle-double-right');

      console.log('refresh table');
      this.gui.config.column_visibilities.forEach(function (vis, i) {

        var column = $('#table-data [col-id="' + i + '"]');

        console.log(i, vis, column);
        column.filter('th').addClass(vis ? 'column-show' : 'column-hide').find('.fa').addClass(vis ? 'fa-angle-double-left' : 'fa-angle-double-right');

        column.filter('td').removeClass('column-show column-hide').addClass(vis ? 'column-show' : 'column-hide');
      });
    }
  }, {
    key: 'rebuild',
    value: function rebuild() {
      var _this = this;

      $('#table-data tbody').empty();

      var i = 0;
      this.gui.app.corpus.current.iterate(function (token) {
        var tr = $('<tr>').attr('tabindex', '-1').attr('id', 'table_' + i);

        ['id', 'form', 'lemma', 'upostag', 'xpostag', 'feats', 'head', 'deprel', 'deps', 'misc'].forEach(function (field, j) {

          var value = field === 'id' ? token.indices.conllu : field === 'head' && token.heads._items.length ? token.heads._items[0].token.indices.conllu : field === 'deprel' && token.heads._items.length ? token.heads._items[0].deprel : field === 'deps' && token.heads._items.length ? function () {
            var val = '';
            token.mapHeads(function (head, i) {
              if (i != 0) val += '|';
              val += head.token.indices.conllu + ':' + head.deprel;
            });
            return val;
          } : token[field];

          var valid = {},
              td = $('<td>'),
              inputSpan = $('<span>').attr('name', 'input'),
              errorSpan = $('<span>').attr('name', 'error');

          if (value !== '_') {
            if (j === 3) valid = utils.validate.is_upos(value);
            if (j === 7) valid = utils.validate.is_udeprel(value);
          }

          var visibilities = _this.gui.config.column_visibilities;

          td.addClass('conllu-table').attr('tabindex', '-1').attr('row-id', i).attr('col-id', j).attr('num', 10 * i + j).attr('uuid', token.uuid).attr('field', field).attr('original-value', value).attr('name', j === 0 ? 'index' : 'content').addClass(visibilities[j] ? 'column-show' : 'column-hide');

          inputSpan.text(value);

          /*
          if (!valid)
            document.l10n.formatValue(valid.err, valid.data).then(title => {
              errorSpan.addClass('fa fa-exclamation-triangle')
                .addClass('parse-error')
                .attr('aria-hidden', 'true')
                .attr('title', title);
            });
          */

          tr.append(td.append(inputSpan).append(errorSpan));
        });

        $('#table-data tbody').append(tr);
        _this.rows = i;
        i++;
      });

      this.refresh();
      this.bind();
    }
  }, {
    key: 'editing',
    get: function get() {
      return $('#table-data .editing').length;
    }
  }]);

  return Table;
}();

module.exports = Table;

},{"../utils":32,"jquery":393,"underscore":502}],25:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var $ = require('jquery');
var config = require('./config');
var nx = require('notatrix');
var utils = require('../utils');

var Textarea = function () {
  function Textarea(gui) {
    _classCallCheck(this, Textarea);

    this.gui = gui;
  }

  _createClass(Textarea, [{
    key: 'bind',
    value: function bind() {

      var self = this;

      // textarea resizing
      $('#text-data').mouseup(function (e) {

        config.textarea_height = $(e.target).css('height');
        self.gui.app.graph.draw();
        self.gui.save();
      });
    }
  }, {
    key: 'refresh',
    value: function refresh() {

      var corpus = this.gui.app.corpus;

      // show the data
      if (config.is_textarea_visible) {

        if (corpus.format !== 'CoNLL-U') config.is_table_visible = false;

        if (config.is_table_visible) {

          $('#table-data').show();
          $('#text-data').hide();
          this.gui.table.rebuild();
        } else {

          $('#table-data').hide();
          $('#text-data').val(corpus.textdata).css('height', config.textarea_height).show();
        }
      }

      // show errors and warnings
      $('.format-tab').removeClass('disabled').find('.tab-warning, .tab-error').hide();
      utils.forEachFormat(function (format) {
        if (corpus.current.isParsed) {

          if (corpus.format === format) {

            var loss = corpus.current.to(format).loss;

            if (loss.length) $('.format-tab[name="' + format + '"] .tab-warning').show().attr('title', 'Unable to encode ' + loss.join(', '));
          } else {
            try {

              corpus.current.to(format);
            } catch (e) {

              $('.format-tab[name="' + format + '"]').addClass('disabled').find('.tab-error').show().attr('title', e.message);
            }
          }
        } else {

          var s = new nx.Sentence(corpus.textdata, { interpretAs: format });
          if (s.Error) $('.format-tab[name="' + format + '"]').addClass('disabled').find('.tab-error').show().attr('title', s.Error.message);
        }
      });
    }
  }]);

  return Textarea;
}();

module.exports = Textarea;

},{"../utils":32,"./config":13,"jquery":393,"notatrix":461,"underscore":502}],26:[function(require,module,exports){
'use strict';

require('babel-polyfill');

var $ = require('jquery');
var App = require('./app');

// on ready
$(function () {
  window.app = new App();
});

},{"./app":1,"babel-polyfill":37,"jquery":393}],27:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = require('jquery');
var _ = require('underscore');
var utils = require('./utils');

var Server = function () {
	function Server(app) {
		_classCallCheck(this, Server);

		this.app = app;
		this.is_running = false;
		this.treebank_id = utils.getTreebankId();
	}

	_createClass(Server, [{
		key: 'connect',
		value: function connect() {
			var _this = this;

			try {
				$.ajax({
					type: 'GET',
					url: '/running',
					success: function success(data) {

						console.info('AJAX connect success with response:', data);

						_this.is_running = true;
						_this.app.gui.status.normal('connected to server');
						_this.load();
					},
					error: function error(data) {

						console.info('AJAX connect failed with response:', data);
						_this.app.gui.status.error('unable to connect to server');

						var serial = utils.storage.load();
						if (serial) _this.app.load(serial);
					}
				});
			} catch (e) {

				console.info('AJAX connected failed with response:', e.message);
				this.app.gui.status.error('unable to connect to server');

				var serial = utils.storage.load();
				if (serial) this.app.load(serial);
			}
		}
	}, {
		key: 'save',
		value: function save(serial) {
			var _this2 = this;

			if (!this.is_running) return null;

			try {

				serial = JSON.stringify(serial);

				$.ajax({
					type: 'POST',
					url: '/save?treebank_id=' + this.treebank_id,
					contentType: "application/json; charset=utf-8",
					data: serial,
					dataType: 'json',
					success: function success(data) {

						if (data.error) {

							console.info('AJAX save failed with response:', data);
							_this2.app.gui.status.error('unable to save to server');
						} else {
							console.info('AJAX save success with response:', data);
						}
					},
					error: function error(data) {

						console.info('AJAX save failed with response:', data);
						_this2.app.gui.status.error('unable to save to server');
					}
				});
			} catch (e) {

				console.info('AJAX save failed with response:', data);
				this.app.gui.status.error('unable to save to server');
			}
		}
	}, {
		key: 'load',
		value: function load() {
			var _this3 = this;

			if (!this.is_running) return null;

			try {
				$.ajax({
					type: 'GET',
					url: '/load?treebank_id=' + this.treebank_id,
					success: function success(data) {

						if (data.error) {

							console.info('AJAX load failed with response:', data);
							_this3.app.gui.status.error('unable to load from server');

							var serial = utils.storage.load();
							if (serial) _this3.app.load(serial);
						} else {

							//console.info('AJAX load success with response:', data);
							data = JSON.parse(data);
							_this3.app.load(data);
						}
					},
					error: function error(data) {

						console.info('AJAX load failed with response:', data);
						_this3.app.gui.status.error('unable to load from server');

						var serial = utils.storage.load();
						if (serial) _this3.app.load(serial);
					}
				});
			} catch (e) {

				console.info('AJAX load failed with response:', data);
				this.app.gui.status.error('unable to load from server');

				var serial = utils.storage.load();
				if (serial) this.app.load(serial);
			}
		}
	}]);

	return Server;
}();

module.exports = Server;

},{"./utils":32,"jquery":393,"underscore":502}],28:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('underscore');
var utils = require('./utils');
var _Socket = require('socket.io-client');

/**
 * Abstraction over a SocketIO connection.  Handles sending and receiving small
 *  packets from a server.
 *
 * NB: this handles all server communication except for the (de)serialization of
 *  the corpus (this is handled via AJAX calls).
 *
 * @param {App} app a reference to the parent of this module.
 */

var Socket = function () {
    function Socket(app) {
        _classCallCheck(this, Socket);

        this.app = app;

        // save some internal state to avoid loops and errors
        this._socket = null;
        this.initialized = false;
        this.isOpen = false;
    }

    /**
     * Make a connection to the server and set callbacks for the various messages
     *  we expect to receive.
     */


    _createClass(Socket, [{
        key: 'connect',
        value: function connect() {
            var _this = this;

            // we shouldn't try to connect if we're just testing
            if (!utils.check_if_browser()) return;

            // cache this access
            var collab = this.app.collab,
                corpus = this.app.corpus,
                graph = this.app.graph,
                gui = this.app.gui;

            // request a server connection
            this._socket = new _Socket();

            // handle server approving our request for connection
            this._socket.on('initialization', function (data) {

                // internals
                _this.initialized = true;
                _this.isOpen = true;

                // make a note of our id, name, etc
                collab.setSelf(data);
            });

            // another user connected to the document
            this._socket.on('connection', function (d) {
                return collab.addUser(d);
            });

            // a user diconnected from the document
            this._socket.on('disconnection', function (d) {
                return collab.removeUser(d);
            });

            // a user modified the corpus
            this._socket.on('modify corpus', function (data) {

                var user = collab.getUser(data.id);

                var index = corpus.index;

                // check whether we need to change our corpus index
                switch (data.type) {
                    case 'insert':
                        if (data.indices[0] <= index) index++;
                        break;

                    case 'remove':
                        if (data.indices[0] < index) index--;
                        break;

                    case 'redo':
                    case 'undo':
                        index = data.serial.index;
                        break;

                    case 'set':
                        break;

                    case 'parse':
                        if (data.indices[0] < index) index += data.indices.length - 1;
                        break;
                }

                // send a chat alert
                gui.chat.alert('%u: \'' + data.type + '\' index ' + data.indices[0], [user]);

                // update the undo stack
                _this.app.undoer.push(data.serial);

                // load the newest serialization
                _this.app.load(data.serial);

                // navigate to the correct index
                _this.app.corpus.index = index;
            });

            // a user modified their current index
            this._socket.on('modify index', function (data) {

                var user = collab.getUser(data.id);
                user.viewing = data.index;
                gui.chat.updateUser(user);
            });

            // a user clicked on a graph node
            this._socket.on('lock graph', function (data) {

                var user = collab.getUser(data.id);
                user.locked = data.locked;
                graph.setLocks();
            });

            // a user clicked off of a graph node
            this._socket.on('unlock graph', function (data) {

                var user = collab.getUser(data.id);
                user.locked = data.locked;
                graph.setLocks();
            });

            // a user moved their mouse in the graph area
            this._socket.on('move mouse', function (data) {

                var user = collab.getUser(data.id);
                user.mouse = data.mouse;
                graph.drawMice();
            });

            // a user sent a chat message
            this._socket.on('new message', function (data) {

                var user = collab.getUser(data.id);
                gui.chat.newMessage(user, data.message, false);
            });
        }

        /**
         * Broadcast (/emit) a packet of type <name> with arguments <data> to the server.
         *
         * @param {String} name the name of the event we want to notify the server of
         * @param {Object} data any other arguments for the event
         */

    }, {
        key: 'broadcast',
        value: function broadcast(name, data) {

            // debugging
            // console.log('broadcast', name, data);

            // do the work
            this._socket.emit(name, data);
        }
    }]);

    return Socket;
}();

module.exports = Socket;

},{"./utils":32,"socket.io-client":487,"underscore":502}],29:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Corpus = require('./corpus');

var Stack = function () {
  function Stack() {
    _classCallCheck(this, Stack);

    this._items = [];
  }

  _createClass(Stack, [{
    key: 'push',
    value: function push(item) {
      this._items.push(item);
    }
  }, {
    key: 'pop',
    value: function pop() {
      return this._items.pop();
    }
  }, {
    key: 'peek',
    value: function peek() {
      return this._items.slice(-1)[0];
    }
  }, {
    key: 'clear',
    value: function clear() {
      this._items = [];
    }
  }, {
    key: 'length',
    get: function get() {
      return this._items.length;
    }
  }]);

  return Stack;
}();

var UndoManager = function () {
  function UndoManager(app) {
    _classCallCheck(this, UndoManager);

    this.app = app;
    this.active = false;
    this.current = null;
    this.reset();
  }

  _createClass(UndoManager, [{
    key: 'reset',
    value: function reset() {

      this.undoStack = new Stack();
      this.redoStack = new Stack();
    }
  }, {
    key: 'hasUndo',
    value: function hasUndo() {
      return !!this.undoStack.length;
    }
  }, {
    key: 'hasRedo',
    value: function hasRedo() {
      return !!this.redoStack.length;
    }
  }, {
    key: 'push',
    value: function push(serial) {

      if (this.active) return false;

      // do some comparisons here to change for changes
      console.log(serial);
      console.log(this.current);
      //if (JSON.stringify(serial) === JSON.stringify(this.current))
      //return false;

      this.undoStack.push(this.current);
      this.redoStack.clear();
      this.current = serial;

      return true;
    }
  }, {
    key: 'undo',
    value: function undo() {

      if (!this.hasUndo()) return false;

      this.active = true;
      var current = this.app.corpus.serialize();
      this.redoStack.push(this.current);
      this.current = current;

      var undo = this.undoStack.pop();
      this.app.corpus = new Corpus(this.app, undo);
      this.app.socket.broadcast('modify corpus', {
        type: 'undo',
        serial: undo
      });
      this.app.save();
      this.app.gui.refresh();
      this.active = false;

      return true;
    }
  }, {
    key: 'redo',
    value: function redo() {

      if (!this.hasRedo()) return false;

      this.active = true;
      var current = this.app.corpus.serialize();
      this.undoStack.push(this.current);
      this.current = current;

      var redo = this.redoStack.pop();
      this.app.corpus = new Corpus(this.app, redo);
      this.app.socket.broadcast('modify corpus', {
        type: 'redo',
        serial: redo
      });
      this.app.save();
      this.app.gui.refresh();
      this.active = false;

      return true;
    }
  }]);

  return UndoManager;
}();

module.exports = UndoManager;

},{"./corpus":5}],30:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var $ = require('jquery');
var C2S = require('canvas2svg');
var funcs = require('./funcs');

function latex(app) {

  if (!app.graph.length) return;

  var tokensLine = '',
      posLine = '',
      deprelLines = [];

  app.graph.eles.forEach(function (node) {
    if (node.data.name === 'form') {
      if (node.data.token.upostag === undefined) return 'error';

      tokensLine += ' \\& ' + node.data.label;
      posLine += '\\&{\\tt ' + node.data.token.upostag + '}';
    }

    if (node.data.name === 'dependency') {
      if (node.data.label === undefined) return 'error';

      var source = node.data.sourceToken.indices.cytoscape,
          target = node.data.targetToken.indices.cytoscape,
          label = node.data.deprel || '_';

      deprelLines.push('depedge{' + source + '}{' + target + '}{' + label + '}');
    }
  });

  tokensLine = tokensLine.replace('\\&', '') + ' \\\\';
  posLine = posLine.replace('\\&', '') + ' \\\\';

  // now make the LaTeX from it
  var latex = ['\\begin{dependency}', '  \\begin{deptext}[column sep=0.4cm]', '    ' + tokensLine, '    ' + posLine, '  \\end{deptext}'].concat(deprelLines.map(function (line) {
    return '  \\' + line;
  }), '\\end{dependency} \\\\').join('\n');

  funcs.download(app.corpus.filename + '.tex', 'application/x-latex', latex);

  return latex;
}

function png(app) {

  if (!app.graph.length) return;

  var link = $('<a>').attr('download', app.corpus.filename + '.png').attr('href', app.graph.cy.png());
  $('body').append(link);
  link[0].click();

  return;
}

function svg(app) {

  if (!app.graph.cy) return;

  var ctx = new C2S(app.graph.cy.width(), app.graph.cy.height());
  app.graph.cy.renderer().renderTo(ctx); // DEBUG: this doesn't work

  funcs.download(app.corpus.filename + '.svg', 'image/svg+xml', ctx.getSerializedSvg());
}

module.exports = {
  latex: latex,
  png: png,
  svg: svg
};

},{"./funcs":31,"canvas2svg":46,"jquery":393,"underscore":502}],31:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var $ = require('jquery');
var uuidv4 = require('uuid/v4');

function check_if_browser() {
  try {
    return !!window;
  } catch (e) {
    return false;
  }
}

module.exports = {

  check_if_browser: check_if_browser,

  download: function download(filename, mimetype, uriComponent) {

    var link = $('<a>').attr('download', filename).attr('href', 'data:' + mimetype + '; charset=utf-8,' + encodeURIComponent(uriComponent));
    $('body').append(link);
    link[0].click();
    return true;
  },

  getTreebankId: function getTreebankId() {

    if (!check_if_browser()) return null;

    var match = location.href.match(/treebank_id=([0-9a-f-]{36})(#|\/|$|&)/);
    return match ? match[1] : uuidv4();
  },

  link: function link(href) {
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_blank';

    var link = $('<a>').attr('href', href).attr('target', target);
    $('body').append(link);
    link[0].click();
  },

  noop: function noop(arg) {
    return arg;
  },

  thin: function thin(arg) {
    return !!arg ? arg : undefined;
  },

  getPresentUsers: function getPresentUsers(room) {
    return Object.keys(room.users).length;
  },

  dedup: function dedup(master, slave) {

    var dedup = {};

    _.each(slave, function (value, key) {
      if (master[key] !== value) dedup[key] = value;
    });

    return dedup;
  },

  forEachFormat: function forEachFormat(callback) {
    ['Brackets', 'CG3', 'CoNLL-U', 'plain text', 'SD'].forEach(callback);
  }
};

},{"jquery":393,"underscore":502,"uuid/v4":505}],32:[function(require,module,exports){
'use strict';

var _ = require('underscore');
var funcs = require('./funcs');

module.exports = _.extend(funcs, {

  export: require('./export'),
  storage: require('./local-storage'),
  validate: require('./validate')

});

},{"./export":30,"./funcs":31,"./local-storage":33,"./validate":34,"underscore":502}],33:[function(require,module,exports){
'use strict';

var funcs = require('./funcs');
var KEY = '__ud_annotatrix_prefs_';

function isAvailable() {

  try {
    localStorage;
  } catch (e) {
    return false;
  }

  // Taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API

  try {
    var x = '__storage_test__';

    localStorage.setItem(x, x);
    localStorage.removeItem(x);
    return true;
  } catch (e) {

    return e instanceof DOMException && (e.code === 1014 // Firefox
    || e.code === 22 // everything else

    // test name field too, because code might not be present
    || e.name === 'NS_ERROR_DOM_QUOTA_REACHED' // Firefox
    || e.name === 'QuotaExceededError') // everything else

    // acknowledge QuotaExceededError only if there's something already stored
    && localStorage.length !== 0;
  }
}

function getAvailableSpace() {

  // Returns the remaining available space in localStorage
  if (!isAvailable()) return 0;

  var max = 10 * 1024 * 1024,
      testKey = 'size-test-' + Math.random().toString(); // generate random key
  var i = 64,
      string1024 = '',
      string = '',
      found = 0;

  if (localStorage) {

    error = error || 25e4;

    // fill a string with 1024 symbols/bytes
    while (i--) {
      string1024 += 1e16;
    } // fill a string with "max" amount of symbols/bytes
    i = max / 1024;
    while (i--) {
      string += string1024;
    }i = max;

    // binary search
    while (i > 1) {
      try {
        localStorage.setItem(testKey, string.substr(0, i));
        localStorage.removeItem(testKey);

        if (found < i - error) {
          found = i;
          i *= 1.5;
        } else {
          break;
        }
      } catch (e) {
        localStorage.removeItem(testKey);
        i = found + (i - found) / 2;
      }
    }
  }

  return found;
}

function isQuotaExceeded(event) {

  if (event && event.code === 22) {
    return true;
  } else if (event && event.code === 1014) {
    return event.name === 'NS_ERROR_DOM_QUOTA_REACHED';
  } else if (event) {
    return event.number === -2147024882; // IE8
  }

  return false;
}

function formatUploadSize(fileSize) {

  if (fileSize < 1024) return fileSize + ' B';

  if (fileSize < 1048576) return (fileSize / 1024).toFixed(1) + ' kB';

  return (fileSize / 1048576).toFixed(1) + ' mB';
}

function save(value) {

  if (!isAvailable()) return null;

  value = JSON.stringify(value);
  return localStorage.setItem(funcs.getTreebankId(), value);
}

function load() {

  if (!isAvailable()) return null;

  var serial = localStorage.getItem(funcs.getTreebankId());
  return JSON.parse(serial);
}

function clear() {

  if (!isAvailable()) return null;

  return localStorage.removeItem(funcs.getTreebankId());
}

function setPrefs(item, prefs) {

  if (!isAvailable() || !item) return null;

  return localStorage.setItem(KEY + item, prefs);
}

function getPrefs(item) {

  if (!isAvailable() || !item) return null;

  return localStorage.getItem(KEY + item);
}

module.exports = {
  isAvailable: isAvailable,
  //isQuotaExceeded,
  getAvailableSpace: getAvailableSpace,
  //formatUploadSize,
  save: save,
  load: load,
  clear: clear,
  getPrefs: getPrefs,
  setPrefs: setPrefs
};

},{"./funcs":31}],34:[function(require,module,exports){
'use strict';

var $ = require('jquery');
var _ = require('underscore');

var U_DEPRELS = ['acl', 'advcl', 'advmod', 'amod', 'appos', 'aux', 'case', 'cc', 'ccomp', 'clf', 'compound', 'conj', 'cop', 'csubj', 'dep', 'det', 'discourse', 'dislocated', 'expl', 'fixed', 'flat', 'goeswith', 'iobj', 'list', 'mark', 'nmod', 'nsubj', 'nummod', 'obj', 'obl', 'orphan', 'parataxis', 'punct', 'reparandum', 'root', 'vocative', 'xcomp'];
var U_POS = ['ADJ', 'ADP', 'ADV', 'AUX', 'CCONJ', 'DET', 'INTJ', 'NOUN', 'NUM', 'PART', 'PRON', 'PROPN', 'PUNCT', 'SCONJ', 'SYM', 'VERB', 'X'];

// TODO: Make this more clever, e.g. CCONJ can have a dependent in certain
// circumstances, e.g. and / or
var U_POS_LEAF = ['AUX', 'CCONJ', 'PART', 'PUNCT', 'SCONJ']; // no ADP

function is_upos(s) {

  // Checks if a relation is in the list of valid parts of speech
  // @s = the input relation
  // returns a bool
  s = (s || '').toUpperCase();

  var is_upos = false;
  U_POS.forEach(function (u_pos) {
    if (s === u_pos) is_upos = true;
  });

  return is_upos;
}

function is_udeprel(s) {

  // Checks if a relation is in the list of valid relations
  // @s = the input relation
  // returns a bool

  // Language-specific relations are `${universal_relation}:${some_string}`
  s = (s || '').split(':')[0].toLowerCase();

  var is_deprel = false;
  U_DEPRELS.forEach(function (u_deprel) {
    if (s.toLowerCase() === u_deprel) is_deprel = true;
  });

  return is_deprel;
}

function is_leaf(s, t) {

  function is_upos_leaf(pos) {

    var is_leaf = false;
    U_POS_LEAF.forEach(function (upos) {
      if (upos === pos) is_leaf = true;
    });

    return is_leaf;
  }

  // Checks if a node is in the list of part-of-speech tags which
  // are usually leaf nodes
  // @s = part of speech tag

  // http://universaldependencies.org/u/dep/punct.html
  // Tokens with the relation punct always attach to content words (except in cases of ellipsis) and can never have dependents.

  return is_upos_leaf(t.upostag || t.xpostag) && is_upos_leaf(s.upostag || s.xpostag);
}

/*
function is_projective_nodes(tree, nodeList) {
  log.debug(`called is_projective_nodes(tree: ${JSON.stringify(tree)}, nodeList: ${JSON.stringify(nodeList)})`);

  let heads = {};

  $.each(tree, (i, node) => {
      if (node) {
          if (node.head && node.id) {
              heads[id] = head;
              nodes.push(id);
          }
      }
  });

  const nodes = Object.keys(heads);
  log.debug(`is_projective_nodes(): heads: ${JSON.stringify(heads)}`);

  $.each(nodeList, (i, nodeIdFromList) => {
    const nodeToCheck = nodes[nodeIdFromList],
      headToCheck = heads[nodeIdFromList];

    $.each(nodes, (j, node) => {
      const head = heads[node];

      log.debug(`is_projective_nodes(): checking (node: ${nodeToCheck}, head: ${headToCheck}) against (node: ${node}, head: ${head})`);
      if (node > nodeToCheck && node < headToCheck
        && (head > headToCheck || head < nodeToCheck))
        return false;
      if (node > headToCheck && node < nodeToCheck
        && (head > nodeToCheck || head < headToCheck))
        return false;
      if (head > nodeToCheck && head < headToCheck
        && (node < nodeToCheck || node > headToCheck))
        return false;
      if (head > headToCheck && head < nodeToCheck
        && (node > nodeToCheck || node < headToCheck))
        return false;
    });
  });

  log.debug(`is_projective_nodes(): got true`);
  return true;
}
*/

/*
function is_projective(tree) {
    log.debug(`called is_projective(${JSON.stringify(tree)})`);

    // Checks to see if a graph is projective
    var nodes = [];
    var heads = {};
    for(let node in tree) {
        if (!tree[node] || tree[node] == undefined) {
            continue;
        }
        var head = tree[node].head;
        var id = tree[node].id;
        if (!head || !id) {
            continue;
        }
        head = parseInt(head);
        id = parseInt(id.slice(2));
        heads[id] = head;
        nodes.push(id);
    }

//    console.log('is_projective()','heads', heads);
//    console.log('is_projective()','nodes', nodes);

    var res = true;

    for(let i in nodes) {
        var n_i =  nodes[i];
        for(let j in nodes) {
            var n_j =  nodes[j];
            //console.log('i:',nodes[i],'j:',nodes[j],'h(i):',heads[n_i],'h(j):',heads[n_j]);
            if ((nodes[j] > nodes[i]) && (nodes[j] < heads[n_i])) {
                if ((heads[n_j] > heads[n_i]) || (heads[n_j] < nodes[i])) {
                    res = false;
                    console.log('[0] is_projective()',res);
                    return res;
                }
            }
            if ((nodes[j] > heads[n_i]) && (nodes[j] < nodes[i])) {
                if ((heads[n_j] > nodes[i]) || (heads[n_j] < heads[n_i])) {
                    res = false;
                    console.log('[1] is_projective()',res);
                    return res;
                }
            }
            if (heads[n_j] > nodes[i] && heads[n_j] < heads[n_i]) {
                if (nodes[j] < nodes[i] || nodes[j] > heads[n_i]) {
                    res = false;
                    console.log('[2] is_projective()',res);
                    return res;
                }
            }
            if (heads[n_j] > heads[n_i] && heads[n_j] < nodes[i]) {
                if (nodes[j] > nodes[i] || nodes[j] < heads[n_i]) {
                    res = false;
                    console.log('[3] is_projective()',res);
                    return res;
                }
            }
        }
    }
//    console.log('is_projective()', res);

    return res;
}
*/

/*
function is_relation_conflict(tree) {
  log.debug(`called is_relation_conflict(${JSON.stringify(tree)})`);


  let count = new Map();
  $.each(tree, (i, word) => {
    if (word.deprel !== undefined) {
      list = (count.has(word.deprel) ? count.get(word.deprel) : []).concat(word.head);
      count.set(word.deprel, list);
    }
  });
  log.debug(`count: ${JSON.stringify(count)}`);


  let totalSubjects = new Map();
  if (count.has('nsubj')) {
    $.each(count.get('nsubj'), (i, nsubj) => {
      value = (totalSubjects.has(nsubj) ? totalSubjects.get(nsubj) + 1 : 1);
      totalSubjects.set(nsubj, value);
    });
  }
  if (count.has('csubj')) {
    $.each(count.get('csubj'), (i, csubj) => {
      value = (totalSubjects.has(csubj) ? totalSubjects.get(csubj) + 1 : 1);
      totalSubjects.set(nsubj, value);
    });
  }
  log.debug(`totalSubjects: ${JSON.stringify(totalSubjects)}`);


  let totalObjects = new Map();
  if (count.has('obj')) {
    $.each(count.get('obj'), (i, obj) => {
      value = (totalObjects.has(obj) ? totalObjects.get(obj) + 1 : 1);
      totalObjects.set(obj, value);
    });
  }
  log.debug(`totalObjects: ${JSON.stringify(totalObjects)}`);


  let conflicts = new Map();
  totalSubjects.forEach((i, subj, map) => {
    if (i > 1) {
      list = (conflicts.has(subj) ? conflicts.get(subj) : []).concat('subj');
      conflicts.set(subj, list);
    }
  });
  totalObjects.forEach((i, obj, map) => {
    if (i > 1) {
      list = (conflicts.has(obj) ? conflicts.get(obj) : []).concat('obj');
      conflicts.set(obj, list);
    }
  });
  if (count.has('obj') && count.has('ccomp'))
      conflicts.set('objccomp', []);
  log.debug(`conflicts: ${JSON.stringify(conflicts)}`);


  return conflicts;
}
*/

function is_cycle(sent, src, tar) {

  // recursive DFS
  function is_cycle_util(sent, src, tar) {

    // visit node
    seen.add(src);

    // iterate neighbors
    var is_cycle = false;

    src.mapHeads(function (head, i) {
      if (i && !sent.options.enhanced) return;

      is_cycle = head.token === tar ? true // got back to original node
      : seen.has(head.token) ? false : is_cycle_util(sent, head.token, tar); // recurse
    });

    return is_cycle;
  }

  // keep track of visited nodes
  var seen = new Set();
  return is_cycle_util(sent, src, tar);
}

function depEdgeClasses(sent, token, head) {

  var classes = new Set(['dependency']);

  if (is_leaf(head.token, token)) classes.add('error');

  if (is_cycle(sent, head.token, token)) classes.add('error');

  if (!head.deprel || head.deprel === '_') {
    classes.add('incomplete');
  } else if (!is_udeprel(head.deprel)) {
    classes.add('error');
  }

  return Array.from(classes).join(' ');
}

function posNodeClasses(pos) {
  return is_upos(pos) ? 'pos' : 'pos error';
}

function attrValue(attr, value) {
  return value;
}

module.exports = {
  U_DEPRELS: U_DEPRELS,
  U_POS: U_POS,
  depEdgeClasses: depEdgeClasses,
  posNodeClasses: posNodeClasses,
  is_upos: is_upos,
  is_udeprel: is_udeprel,
  attrValue: attrValue
};

},{"jquery":393,"underscore":502}],35:[function(require,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],36:[function(require,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],37:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"core-js/fn/regexp/escape":50,"core-js/shim":373,"regenerator-runtime/runtime":38}],38:[function(require,module,exports){
(function (global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],39:[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],40:[function(require,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();

},{}],41:[function(require,module,exports){
(function (global){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],42:[function(require,module,exports){

},{}],43:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],44:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],45:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function () {
    if (!(this instanceof Buffer)) {
      return undefined
    }
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":44,"ieee754":391}],46:[function(require,module,exports){
/*!!
 *  Canvas 2 Svg v1.0.15
 *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.
 *
 *  Licensed under the MIT license:
 *  http://www.opensource.org/licenses/mit-license.php
 *
 *  Author:
 *  Kerry Liu
 *
 *  Copyright (c) 2014 Gliffy Inc.
 */

;(function() {
    "use strict";

    var STYLES, ctx, CanvasGradient, CanvasPattern, namedEntities;

    //helper function to format a string
    function format(str, args) {
        var keys = Object.keys(args), i;
        for (i=0; i<keys.length; i++) {
            str = str.replace(new RegExp("\\{" + keys[i] + "\\}", "gi"), args[keys[i]]);
        }
        return str;
    }

    //helper function that generates a random string
    function randomString(holder) {
        var chars, randomstring, i;
        if (!holder) {
            throw new Error("cannot create a random attribute name for an undefined object");
        }
        chars = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
        randomstring = "";
        do {
            randomstring = "";
            for (i = 0; i < 12; i++) {
                randomstring += chars[Math.floor(Math.random() * chars.length)];
            }
        } while (holder[randomstring]);
        return randomstring;
    }

    //helper function to map named to numbered entities
    function createNamedToNumberedLookup(items, radix) {
        var i, entity, lookup = {}, base10, base16;
        items = items.split(',');
        radix = radix || 10;
        // Map from named to numbered entities.
        for (i = 0; i < items.length; i += 2) {
            entity = '&' + items[i + 1] + ';';
            base10 = parseInt(items[i], radix);
            lookup[entity] = '&#'+base10+';';
        }
        //FF and IE need to create a regex from hex values ie &nbsp; == \xa0
        lookup["\\xa0"] = '&#160;';
        return lookup;
    }

    //helper function to map canvas-textAlign to svg-textAnchor
    function getTextAnchor(textAlign) {
        //TODO: support rtl languages
        var mapping = {"left":"start", "right":"end", "center":"middle", "start":"start", "end":"end"};
        return mapping[textAlign] || mapping.start;
    }

    //helper function to map canvas-textBaseline to svg-dominantBaseline
    function getDominantBaseline(textBaseline) {
        //INFO: not supported in all browsers
        var mapping = {"alphabetic": "alphabetic", "hanging": "hanging", "top":"text-before-edge", "bottom":"text-after-edge", "middle":"central"};
        return mapping[textBaseline] || mapping.alphabetic;
    }

    // Unpack entities lookup where the numbers are in radix 32 to reduce the size
    // entity mapping courtesy of tinymce
    namedEntities = createNamedToNumberedLookup(
        '50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,' +
            '5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,' +
            '5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,' +
            '5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,' +
            '68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,' +
            '6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,' +
            '6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,' +
            '75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,' +
            '7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,' +
            '7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,' +
            'sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,' +
            'st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,' +
            't9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,' +
            'tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,' +
            'u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,' +
            '81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,' +
            '8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,' +
            '8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,' +
            '8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,' +
            '8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,' +
            'nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,' +
            'rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,' +
            'Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,' +
            '80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,' +
            '811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro', 32);


    //Some basic mappings for attributes and default values.
    STYLES = {
        "strokeStyle":{
            svgAttr : "stroke", //corresponding svg attribute
            canvas : "#000000", //canvas default
            svg : "none",       //svg default
            apply : "stroke"    //apply on stroke() or fill()
        },
        "fillStyle":{
            svgAttr : "fill",
            canvas : "#000000",
            svg : null, //svg default is black, but we need to special case this to handle canvas stroke without fill
            apply : "fill"
        },
        "lineCap":{
            svgAttr : "stroke-linecap",
            canvas : "butt",
            svg : "butt",
            apply : "stroke"
        },
        "lineJoin":{
            svgAttr : "stroke-linejoin",
            canvas : "miter",
            svg : "miter",
            apply : "stroke"
        },
        "miterLimit":{
            svgAttr : "stroke-miterlimit",
            canvas : 10,
            svg : 4,
            apply : "stroke"
        },
        "lineWidth":{
            svgAttr : "stroke-width",
            canvas : 1,
            svg : 1,
            apply : "stroke"
        },
        "globalAlpha": {
            svgAttr : "opacity",
            canvas : 1,
            svg : 1,
            apply : "fill stroke"
        },
        "font":{
            //font converts to multiple svg attributes, there is custom logic for this
            canvas : "10px sans-serif"
        },
        "shadowColor":{
            canvas : "#000000"
        },
        "shadowOffsetX":{
            canvas : 0
        },
        "shadowOffsetY":{
            canvas : 0
        },
        "shadowBlur":{
            canvas : 0
        },
        "textAlign":{
            canvas : "start"
        },
        "textBaseline":{
            canvas : "alphabetic"
        }
    };

    /**
     *
     * @param gradientNode - reference to the gradient
     * @constructor
     */
    CanvasGradient = function(gradientNode, ctx) {
        this.__root = gradientNode;
        this.__ctx = ctx;
    };

    /**
     * Adds a color stop to the gradient root
     */
    CanvasGradient.prototype.addColorStop = function(offset, color) {
        var stop = this.__ctx.__createElement("stop"), regex, matches;
        stop.setAttribute("offset", offset);
        if(color.indexOf("rgba") !== -1) {
            //separate alpha value, since webkit can't handle it
            regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
            matches = regex.exec(color);
            stop.setAttribute("stop-color", format("rgb({r},{g},{b})", {r:matches[1], g:matches[2], b:matches[3]}));
            stop.setAttribute("stop-opacity", matches[4]);
        } else {
            stop.setAttribute("stop-color", color);
        }
        this.__root.appendChild(stop);
    };

    CanvasPattern = function(pattern, ctx) {
        this.__root = pattern;
        this.__ctx = ctx;
    };

    /**
     * The mock canvas context
     * @param o - options include:
     * width - width of your canvas (defaults to 500)
     * height - height of your canvas (defaults to 500)
     * enableMirroring - enables canvas mirroring (get image data) (defaults to false)
     * document - the document object (defaults to the current document)
     */
    ctx = function(o) {

        var defaultOptions = { width:500, height:500, enableMirroring : false}, options;

        //keep support for this way of calling C2S: new C2S(width,height)
        if(arguments.length > 1) {
            options = defaultOptions;
            options.width = arguments[0];
            options.height = arguments[1];
        } else if( !o ) {
            options = defaultOptions;
        } else {
            options = o;
        }

        if(!(this instanceof ctx)) {
            //did someone call this without new?
            return new ctx(options);
        }

        //setup options
        this.width = options.width || defaultOptions.width;
        this.height = options.height || defaultOptions.height;
        this.enableMirroring = options.enableMirroring !== undefined ? options.enableMirroring : defaultOptions.enableMirroring;

        this.canvas = this;   ///point back to this instance!
        this.__document = options.document || document;
        this.__canvas = this.__document.createElement("canvas");
        this.__ctx = this.__canvas.getContext("2d");

        this.__setDefaultStyles();
        this.__stack = [this.__getStyleState()];
        this.__groupStack = [];

        //the root svg element
        this.__root = this.__document.createElementNS("http://www.w3.org/2000/svg", "svg");
        this.__root.setAttribute("version", 1.1);
        this.__root.setAttribute("xmlns", "http://www.w3.org/2000/svg");
        this.__root.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
        this.__root.setAttribute("width", this.width);
        this.__root.setAttribute("height", this.height);

        //make sure we don't generate the same ids in defs
        this.__ids = {};

        //defs tag
        this.__defs = this.__document.createElementNS("http://www.w3.org/2000/svg", "defs");
        this.__root.appendChild(this.__defs);

        //also add a group child. the svg element can't use the transform attribute
        this.__currentElement = this.__document.createElementNS("http://www.w3.org/2000/svg", "g");
        this.__root.appendChild(this.__currentElement);
    };


    /**
     * Creates the specified svg element
     * @private
     */
    ctx.prototype.__createElement = function (elementName, properties, resetFill) {
        if (typeof properties === "undefined") {
            properties = {};
        }

        var element = this.__document.createElementNS("http://www.w3.org/2000/svg", elementName),
            keys = Object.keys(properties), i, key;
        if(resetFill) {
            //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.
            element.setAttribute("fill", "none");
            element.setAttribute("stroke", "none");
        }
        for(i=0; i<keys.length; i++) {
            key = keys[i];
            element.setAttribute(key, properties[key]);
        }
        return element;
    };

    /**
     * Applies default canvas styles to the context
     * @private
     */
    ctx.prototype.__setDefaultStyles = function() {
        //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/
        var keys = Object.keys(STYLES), i, key;
        for(i=0; i<keys.length; i++) {
            key = keys[i];
            this[key] = STYLES[key].canvas;
        }
    };

    /**
     * Applies styles on restore
     * @param styleState
     * @private
     */
    ctx.prototype.__applyStyleState = function(styleState) {
        var keys = Object.keys(styleState), i, key;
        for(i=0; i<keys.length; i++) {
            key = keys[i];
            this[key] = styleState[key];
        }
    };

    /**
     * Gets the current style state
     * @return {Object}
     * @private
     */
    ctx.prototype.__getStyleState = function() {
        var i, styleState = {}, keys = Object.keys(STYLES), key;
        for(i=0; i<keys.length; i++) {
            key = keys[i];
            styleState[key] = this[key];
        }
        return styleState;
    };

    /**
     * Apples the current styles to the current SVG element. On "ctx.fill" or "ctx.stroke"
     * @param type
     * @private
     */
    ctx.prototype.__applyStyleToCurrentElement = function(type) {
        var keys = Object.keys(STYLES), i, style, value, id, regex, matches;
        for(i=0; i<keys.length; i++) {
            style = STYLES[keys[i]];
            value = this[keys[i]];
            if(style.apply) {
                //is this a gradient or pattern?
                if(style.apply.indexOf("fill")!==-1 && value instanceof CanvasPattern) {
                    //pattern
                    if(value.__ctx) {
                        //copy over defs
                        while(value.__ctx.__defs.childNodes.length) {
                            id = value.__ctx.__defs.childNodes[0].getAttribute("id");
                            this.__ids[id] = id;
                            this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);
                        }
                    }
                    this.__currentElement.setAttribute("fill", format("url(#{id})", {id:value.__root.getAttribute("id")}));
                }
                else if(style.apply.indexOf("fill")!==-1 && value instanceof CanvasGradient) {
                    //gradient
                    this.__currentElement.setAttribute("fill", format("url(#{id})", {id:value.__root.getAttribute("id")}));
                } else if(style.apply.indexOf(type)!==-1 && style.svg !== value) {
                    if((style.svgAttr === "stroke" || style.svgAttr === "fill") && value.indexOf("rgba") !== -1) {
                        //separate alpha value, since illustrator can't handle it
                        regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
                        matches = regex.exec(value);
                        this.__currentElement.setAttribute(style.svgAttr, format("rgb({r},{g},{b})", {r:matches[1], g:matches[2], b:matches[3]}));
                        this.__currentElement.setAttribute(style.svgAttr+"-opacity", matches[4]);
                    } else {
                        //otherwise only update attribute if right type, and not svg default
                        this.__currentElement.setAttribute(style.svgAttr, value);
                    }
                }
            }
        }

    };

    /**
     * Will return the closest group or svg node. May return the current element.
     * @private
     */
    ctx.prototype.__closestGroupOrSvg = function(node) {
        node = node || this.__currentElement;
        if(node.nodeName === "g" || node.nodeName === "svg") {
            return node;
        } else {
            return this.__closestGroupOrSvg(node.parentNode);
        }
    };

    /**
     * Returns the serialized value of the svg so far
     * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.
     *                           If true, we attempt to find all named entities and encode it as a numeric entity.
     * @return serialized svg
     */
    ctx.prototype.getSerializedSvg = function(fixNamedEntities) {
        var serialized = new XMLSerializer().serializeToString(this.__root),
            keys, i, key, value, regexp, xmlns;

        //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly
        xmlns = /xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi;
        if(xmlns.test(serialized)) {
            serialized = serialized.replace('xmlns="http://www.w3.org/2000/svg','xmlns:xlink="http://www.w3.org/1999/xlink');
        }

        if(fixNamedEntities) {
            keys = Object.keys(namedEntities);
            //loop over each named entity and replace with the proper equivalent.
            for(i=0; i<keys.length; i++) {
                key = keys[i];
                value = namedEntities[key];
                regexp = new RegExp(key, "gi");
                if(regexp.test(serialized)) {
                    serialized = serialized.replace(regexp, value);
                }
            }
        }

        return serialized;
    };


    /**
     * Returns the root svg
     * @return
     */
    ctx.prototype.getSvg = function() {
        return this.__root;
    };
    /**
     * Will generate a group tag.
     */
    ctx.prototype.save = function() {
        var group = this.__createElement("g"), parent = this.__closestGroupOrSvg();
        this.__groupStack.push(parent);
        parent.appendChild(group);
        this.__currentElement = group;
        this.__stack.push(this.__getStyleState());
    };
    /**
     * Sets current element to parent, or just root if already root
     */
    ctx.prototype.restore = function(){
        this.__currentElement = this.__groupStack.pop();
        var state = this.__stack.pop();
        this.__applyStyleState(state);

    };

    /**
     * Helper method to add transform
     * @private
     */
    ctx.prototype.__addTransform = function(t) {

        //if the current element has siblings, add another group
        var parent = this.__closestGroupOrSvg();
        if(parent.childNodes.length > 0) {
            var group = this.__createElement("g");
            parent.appendChild(group);
            this.__currentElement = group;
        }

        var transform = this.__currentElement.getAttribute("transform");
        if(transform) {
            transform += " ";
        } else {
            transform = "";
        }
        transform += t;
        this.__currentElement.setAttribute("transform", transform);
    };

    /**
     *  scales the current element
     */
    ctx.prototype.scale = function(x, y) {
        if(y === undefined) {
            y = x;
        }
        this.__addTransform(format("scale({x},{y})", {x:x, y:y}));
    };

    /**
     * rotates the current element
     */
    ctx.prototype.rotate = function(angle){
        var degrees = (angle * 180 / Math.PI);
        this.__addTransform(format("rotate({angle},{cx},{cy})", {angle:degrees, cx:0, cy:0}));
    };

    /**
     * translates the current element
     */
    ctx.prototype.translate = function(x, y){
        this.__addTransform(format("translate({x},{y})", {x:x,y:y}));
    };

    /**
     * applies a transform to the current element
     */
    ctx.prototype.transform = function(a, b, c, d, e, f){
        this.__addTransform(format("matrix({a},{b},{c},{d},{e},{f})", {a:a, b:b, c:c, d:d, e:e, f:f}));
    };

    /**
     * Create a new Path Element
     */
    ctx.prototype.beginPath = function(){
        var path, parent;

        // Note that there is only one current default path, it is not part of the drawing state.
        // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path
        this.__currentDefaultPath = "";
        this.__currentPosition = {};

        path = this.__createElement("path", {}, true);
        parent = this.__closestGroupOrSvg();
        parent.appendChild(path);
        this.__currentElement = path;
    };

    /**
     * Helper function to apply currentDefaultPath to current path element
     * @private
     */
    ctx.prototype.__applyCurrentDefaultPath = function() {
        if(this.__currentElement.nodeName === "path") {
            var d = this.__currentDefaultPath;
            this.__currentElement.setAttribute("d", d);
        } else {
            throw new Error("Attempted to apply path command to node " + this.__currentElement.nodeName);
        }
    };

    /**
     * Helper function to add path command
     * @private
     */
    ctx.prototype.__addPathCommand = function(command){
        this.__currentDefaultPath += " ";
        this.__currentDefaultPath += command;
    };

    /**
     * Adds the move command to the current path element,
     * if the currentPathElement is not empty create a new path element
     */
    ctx.prototype.moveTo = function(x,y){
        if(this.__currentElement.nodeName !== "path") {
            this.beginPath();
        }

        // creates a new subpath with the given point
        this.__currentPosition = {x: x, y: y};
        this.__addPathCommand(format("M {x} {y}", {x:x, y:y}));
    };

    /**
     * Closes the current path
     */
    ctx.prototype.closePath = function(){
        this.__addPathCommand("Z");
    };

    /**
     * Adds a line to command
     */
    ctx.prototype.lineTo = function(x, y){
        this.__currentPosition = {x: x, y: y};
        if (this.__currentDefaultPath.indexOf('M') > -1) {
            this.__addPathCommand(format("L {x} {y}", {x:x, y:y}));
        } else {
            this.__addPathCommand(format("M {x} {y}", {x:x, y:y}));
        }
    };

    /**
     * Add a bezier command
     */
    ctx.prototype.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
        this.__currentPosition = {x: x, y: y};
        this.__addPathCommand(format("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}",
            {cp1x:cp1x, cp1y:cp1y, cp2x:cp2x, cp2y:cp2y, x:x, y:y}));
    };

    /**
     * Adds a quadratic curve to command
     */
    ctx.prototype.quadraticCurveTo = function(cpx, cpy, x, y){
        this.__currentPosition = {x: x, y: y};
        this.__addPathCommand(format("Q {cpx} {cpy} {x} {y}", {cpx:cpx, cpy:cpy, x:x, y:y}));
    };


    /**
     * Return a new normalized vector of given vector
     */
    var normalize = function(vector) {
        var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
        return [vector[0] / len, vector[1] / len];
    };

    /**
     * Adds the arcTo to the current path
     *
     * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto
     */
    ctx.prototype.arcTo = function(x1, y1, x2, y2, radius) {
        // Let the point (x0, y0) be the last point in the subpath.
        var x0 = this.__currentPosition && this.__currentPosition.x;
        var y0 = this.__currentPosition && this.__currentPosition.y;

        // First ensure there is a subpath for (x1, y1).
        if (typeof x0 == "undefined" || typeof y0 == "undefined") {
            return;
        }

        // Negative values for radius must cause the implementation to throw an IndexSizeError exception.
        if (radius < 0) {
            throw new Error("IndexSizeError: The radius provided (" + radius + ") is negative.");
        }

        // If the point (x0, y0) is equal to the point (x1, y1),
        // or if the point (x1, y1) is equal to the point (x2, y2),
        // or if the radius radius is zero,
        // then the method must add the point (x1, y1) to the subpath,
        // and connect that point to the previous point (x0, y0) by a straight line.
        if (((x0 === x1) && (y0 === y1))
            || ((x1 === x2) && (y1 === y2))
            || (radius === 0)) {
            this.lineTo(x1, y1);
            return;
        }

        // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,
        // then the method must add the point (x1, y1) to the subpath,
        // and connect that point to the previous point (x0, y0) by a straight line.
        var unit_vec_p1_p0 = normalize([x0 - x1, y0 - y1]);
        var unit_vec_p1_p2 = normalize([x2 - x1, y2 - y1]);
        if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {
            this.lineTo(x1, y1);
            return;
        }

        // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,
        // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),
        // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).
        // The points at which this circle touches these two lines are called the start and end tangent points respectively.

        // note that both vectors are unit vectors, so the length is 1
        var cos = (unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1]);
        var theta = Math.acos(Math.abs(cos));

        // Calculate origin
        var unit_vec_p1_origin = normalize([
            unit_vec_p1_p0[0] + unit_vec_p1_p2[0],
            unit_vec_p1_p0[1] + unit_vec_p1_p2[1]
        ]);
        var len_p1_origin = radius / Math.sin(theta / 2);
        var x = x1 + len_p1_origin * unit_vec_p1_origin[0];
        var y = y1 + len_p1_origin * unit_vec_p1_origin[1];

        // Calculate start angle and end angle
        // rotate 90deg clockwise (note that y axis points to its down)
        var unit_vec_origin_start_tangent = [
            -unit_vec_p1_p0[1],
            unit_vec_p1_p0[0]
        ];
        // rotate 90deg counter clockwise (note that y axis points to its down)
        var unit_vec_origin_end_tangent = [
            unit_vec_p1_p2[1],
            -unit_vec_p1_p2[0]
        ];
        var getAngle = function(vector) {
            // get angle (clockwise) between vector and (1, 0)
            var x = vector[0];
            var y = vector[1];
            if (y >= 0) { // note that y axis points to its down
                return Math.acos(x);
            } else {
                return -Math.acos(x);
            }
        };
        var startAngle = getAngle(unit_vec_origin_start_tangent);
        var endAngle = getAngle(unit_vec_origin_end_tangent);

        // Connect the point (x0, y0) to the start tangent point by a straight line
        this.lineTo(x + unit_vec_origin_start_tangent[0] * radius,
                    y + unit_vec_origin_start_tangent[1] * radius);

        // Connect the start tangent point to the end tangent point by arc
        // and adding the end tangent point to the subpath.
        this.arc(x, y, radius, startAngle, endAngle);
    };

    /**
     * Sets the stroke property on the current element
     */
    ctx.prototype.stroke = function(){
        if(this.__currentElement.nodeName === "path") {
            this.__currentElement.setAttribute("paint-order", "fill stroke markers");
        }
        this.__applyCurrentDefaultPath();
        this.__applyStyleToCurrentElement("stroke");
    };

    /**
     * Sets fill properties on the current element
     */
    ctx.prototype.fill = function(){
        if(this.__currentElement.nodeName === "path") {
            this.__currentElement.setAttribute("paint-order", "stroke fill markers");
        }
        this.__applyCurrentDefaultPath();
        this.__applyStyleToCurrentElement("fill");
    };

    /**
     *  Adds a rectangle to the path.
     */
    ctx.prototype.rect = function(x, y, width, height){
        if(this.__currentElement.nodeName !== "path") {
            this.beginPath();
        }
        this.moveTo(x, y);
        this.lineTo(x+width, y);
        this.lineTo(x+width, y+height);
        this.lineTo(x, y+height);
        this.lineTo(x, y);
        this.closePath();
    };


    /**
     * adds a rectangle element
     */
    ctx.prototype.fillRect = function(x, y, width, height){
        var rect, parent;
        rect = this.__createElement("rect", {
            x : x,
            y : y,
            width : width,
            height : height
        }, true);
        parent = this.__closestGroupOrSvg();
        parent.appendChild(rect);
        this.__currentElement = rect;
        this.__applyStyleToCurrentElement("fill");
    };

    /**
     * Draws a rectangle with no fill
     * @param x
     * @param y
     * @param width
     * @param height
     */
    ctx.prototype.strokeRect = function(x, y, width, height){
        var rect, parent;
        rect = this.__createElement("rect", {
            x : x,
            y : y,
            width : width,
            height : height
        }, true);
        parent = this.__closestGroupOrSvg();
        parent.appendChild(rect);
        this.__currentElement = rect;
        this.__applyStyleToCurrentElement("stroke");
    };


    /**
     * "Clears" a canvas by just drawing a white rectangle in the current group.
     */
    ctx.prototype.clearRect = function(x, y, width, height) {
        var rect, parent = this.__closestGroupOrSvg();
        rect = this.__createElement("rect", {
            x : x,
            y : y,
            width : width,
            height : height,
            fill : "#FFFFFF"
        }, true);
        parent.appendChild(rect);
    };

    /**
     * Adds a linear gradient to a defs tag.
     * Returns a canvas gradient object that has a reference to it's parent def
     */
    ctx.prototype.createLinearGradient = function(x1, y1, x2, y2){
        var grad = this.__createElement("linearGradient", {
            id : randomString(this.__ids),
            x1 : x1+"px",
            x2 : x2+"px",
            y1 : y1+"px",
            y2 : y2+"px",
            "gradientUnits" : "userSpaceOnUse"
        }, false);
        this.__defs.appendChild(grad);
        return new CanvasGradient(grad, this);
    };

    /**
     * Adds a radial gradient to a defs tag.
     * Returns a canvas gradient object that has a reference to it's parent def
     */
    ctx.prototype.createRadialGradient = function(x0, y0, r0, x1, y1, r1){
        var grad = this.__createElement("radialGradient", {
            id : randomString(this.__ids),
            cx : x1+"px",
            cy : y1+"px",
            r  : r1+"px",
            fx : x0+"px",
            fy : y0+"px",
            "gradientUnits" : "userSpaceOnUse"
        }, false);
        this.__defs.appendChild(grad);
        return new CanvasGradient(grad, this);

    };

    /**
     * Parses the font string and returns svg mapping
     * @private
     */
    ctx.prototype.__parseFont = function() {
        var regex = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\"\sa-z]+?)\s*$/i;
        var fontPart = regex.exec( this.font );
        var data = {
            style : fontPart[1] || 'normal',
            size : fontPart[4] || '10px',
            family : fontPart[6] || 'sans-serif',
            weight: fontPart[3] || 'normal',
            decoration : fontPart[2] || 'normal',
            href : null
        };

        //canvas doesn't support underline natively, but we can pass this attribute
        if(this.__fontUnderline === "underline") {
            data.decoration = "underline";
        }

        //canvas also doesn't support linking, but we can pass this as well
        if(this.__fontHref) {
            data.href = this.__fontHref;
        }

        return data;
    };

    /**
     * Helper to link text fragments
     * @param font
     * @param element
     * @return {*}
     * @private
     */
    ctx.prototype.__wrapTextLink = function(font, element) {
        if(font.href) {
            var a = this.__createElement("a");
            a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", font.href);
            a.appendChild(element);
            return a;
        }
        return element;
    };

    /**
     * Fills or strokes text
     * @param text
     * @param x
     * @param y
     * @param action - stroke or fill
     * @private
     */
    ctx.prototype.__applyText = function(text, x, y, action) {
        var font = this.__parseFont(),
            parent = this.__closestGroupOrSvg(),
            textElement = this.__createElement("text", {
                "font-family" : font.family,
                "font-size" : font.size,
                "font-style" : font.style,
                "font-weight" : font.weight,
                "text-decoration" : font.decoration,
                "x" : x,
                "y" : y,
                "text-anchor": getTextAnchor(this.textAlign),
                "dominant-baseline": getDominantBaseline(this.textBaseline)
            }, true);

        textElement.appendChild(this.__document.createTextNode(text));
        this.__currentElement = textElement;
        this.__applyStyleToCurrentElement(action);
        parent.appendChild(this.__wrapTextLink(font,textElement));
    };

    /**
     * Creates a text element
     * @param text
     * @param x
     * @param y
     */
    ctx.prototype.fillText = function(text, x, y){
        this.__applyText(text, x, y, "fill");
    };

    /**
     * Strokes text
     * @param text
     * @param x
     * @param y
     */
    ctx.prototype.strokeText = function(text, x, y){
        this.__applyText(text, x, y, "stroke");
    };

    /**
     * No need to implement this for svg.
     * @param text
     * @return {TextMetrics}
     */
    ctx.prototype.measureText = function(text){
        this.__ctx.font = this.font;
        return this.__ctx.measureText(text);
    };

    /**
     *  Arc command!
     */
    ctx.prototype.arc = function(x, y, radius, startAngle, endAngle, counterClockwise) {
        // in canvas no circle is drawn if no angle is provided.
        if (startAngle === endAngle) {
            return;
        }
        startAngle = startAngle % (2*Math.PI);
        endAngle = endAngle % (2*Math.PI);
        if(startAngle === endAngle) {
            //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)
            endAngle = ((endAngle + (2*Math.PI)) - 0.001 * (counterClockwise ? -1 : 1)) % (2*Math.PI);
        }
        var endX = x+radius*Math.cos(endAngle),
            endY = y+radius*Math.sin(endAngle),
            startX = x+radius*Math.cos(startAngle),
            startY = y+radius*Math.sin(startAngle),
            sweepFlag = counterClockwise ? 0 : 1,
            largeArcFlag = 0,
            diff = endAngle - startAngle;

        // https://github.com/gliffy/canvas2svg/issues/4
        if(diff < 0) {
            diff += 2*Math.PI;
        }

        if(counterClockwise) {
            largeArcFlag = diff > Math.PI ? 0 : 1;
        } else {
            largeArcFlag = diff > Math.PI ? 1 : 0;
        }

        this.lineTo(startX, startY);
        this.__addPathCommand(format("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}",
            {rx:radius, ry:radius, xAxisRotation:0, largeArcFlag:largeArcFlag, sweepFlag:sweepFlag, endX:endX, endY:endY}));

        this.__currentPosition = {x: endX, y: endY};
    };

    /**
     * Generates a ClipPath from the clip command.
     */
    ctx.prototype.clip = function(){
        var group = this.__closestGroupOrSvg(),
            clipPath = this.__createElement("clipPath"),
            id =  randomString(this.__ids),
            newGroup = this.__createElement("g");

        group.removeChild(this.__currentElement);
        clipPath.setAttribute("id", id);
        clipPath.appendChild(this.__currentElement);

        this.__defs.appendChild(clipPath);

        //set the clip path to this group
        group.setAttribute("clip-path", format("url(#{id})", {id:id}));

        //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations
        // to this path
        group.appendChild(newGroup);

        this.__currentElement = newGroup;

    };

    /**
     * Draws a canvas, image or mock context to this canvas.
     * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.
     * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage
     */
    ctx.prototype.drawImage = function(){
        //convert arguments to a real array
        var args = Array.prototype.slice.call(arguments),
            image=args[0],
            dx, dy, dw, dh, sx=0, sy=0, sw, sh, parent, svg, defs, group,
            currentElement, svgImage, canvas, context, id;

        if(args.length === 3) {
            dx = args[1];
            dy = args[2];
            sw = image.width;
            sh = image.height;
            dw = sw;
            dh = sh;
        } else if(args.length === 5) {
            dx = args[1];
            dy = args[2];
            dw = args[3];
            dh = args[4];
            sw = image.width;
            sh = image.height;
        } else if(args.length === 9) {
            sx = args[1];
            sy = args[2];
            sw = args[3];
            sh = args[4];
            dx = args[5];
            dy = args[6];
            dw = args[7];
            dh = args[8];
        } else {
            throw new Error("Inavlid number of arguments passed to drawImage: " + arguments.length);
        }

        parent = this.__closestGroupOrSvg();
        currentElement = this.__currentElement;

        if(image instanceof ctx) {
            //canvas2svg mock canvas context. In the future we may want to clone nodes instead.
            //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.
            svg = image.getSvg();
            defs = svg.childNodes[0];
            while(defs.childNodes.length) {
                id = defs.childNodes[0].getAttribute("id");
                this.__ids[id] = id;
                this.__defs.appendChild(defs.childNodes[0]);
            }
            group = svg.childNodes[1];
            parent.appendChild(group);
            this.__currentElement = group;
            this.translate(dx, dy);
            this.__currentElement = currentElement;
        } else if(image.nodeName === "CANVAS" || image.nodeName === "IMG") {
            //canvas or image
            svgImage = this.__createElement("image");
            svgImage.setAttribute("width", dw);
            svgImage.setAttribute("height", dh);
            svgImage.setAttribute("preserveAspectRatio", "none");

            if(sx || sy || sw !== image.width || sh !== image.height) {
                //crop the image using a temporary canvas
                canvas = this.__document.createElement("canvas");
                canvas.width = dw;
                canvas.height = dh;
                context = canvas.getContext("2d");
                context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);
                image = canvas;
            }

            svgImage.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href",
                image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
            parent.appendChild(svgImage);
            this.__currentElement = svgImage;
            this.translate(dx, dy);
            this.__currentElement = currentElement;
        }
    };

    /**
     * Generates a pattern tag
     */
    ctx.prototype.createPattern = function(image, repetition){
        var pattern = this.__document.createElementNS("http://www.w3.org/2000/svg", "pattern"), id = randomString(this.__ids),
            img;
        pattern.setAttribute("id", id);
        pattern.setAttribute("width", image.width);
        pattern.setAttribute("height", image.height);
        if(image.nodeName === "CANVAS" || image.nodeName === "IMG") {
            img = this.__document.createElementNS("http://www.w3.org/2000/svg", "image");
            img.setAttribute("width", image.width);
            img.setAttribute("height", image.height);
            img.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href",
                image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
            pattern.appendChild(img);
            this.__defs.appendChild(pattern);
        } else if(image instanceof ctx) {
            pattern.appendChild(image.__root.childNodes[1]);
            this.__defs.appendChild(pattern);
        }
        return new CanvasPattern(pattern, this);
    };

    /**
     * Not yet implemented
     */
    ctx.prototype.drawFocusRing = function(){};
    ctx.prototype.createImageData = function(){};
    ctx.prototype.getImageData = function(){};
    ctx.prototype.putImageData = function(){};
    ctx.prototype.globalCompositeOperation = function(){};
    ctx.prototype.setTransform = function(){};

    //add options for alternative namespace
    if (typeof window === "object") {
        window.C2S = ctx;
    }

    // CommonJS/Browserify
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = ctx;
    }

}());

},{}],47:[function(require,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],48:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],49:[function(require,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],50:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/_core":71,"../../modules/core.regexp.escape":176}],51:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],52:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":66}],53:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":90,"./_wks":174}],54:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],55:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":99}],56:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":159,"./_to-length":163,"./_to-object":164}],57:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":159,"./_to-length":163,"./_to-object":164}],58:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":87}],59:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":159,"./_to-iobject":162,"./_to-length":163}],60:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":63,"./_ctx":73,"./_iobject":95,"./_to-length":163,"./_to-object":164}],61:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":51,"./_iobject":95,"./_to-length":163,"./_to-object":164}],62:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":97,"./_is-object":99,"./_wks":174}],63:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":62}],64:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":51,"./_invoke":94,"./_is-object":99}],65:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":66,"./_wks":174}],66:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],67:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":54,"./_ctx":73,"./_descriptors":77,"./_for-of":87,"./_iter-define":103,"./_iter-step":105,"./_meta":113,"./_object-create":118,"./_object-dp":119,"./_redefine-all":138,"./_set-species":145,"./_validate-collection":171}],68:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

},{"./_array-from-iterable":58,"./_classof":65}],69:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":54,"./_an-object":55,"./_array-methods":60,"./_for-of":87,"./_has":89,"./_is-object":99,"./_meta":113,"./_redefine-all":138,"./_validate-collection":171}],70:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":54,"./_export":81,"./_fails":83,"./_for-of":87,"./_global":88,"./_inherit-if-required":93,"./_is-object":99,"./_iter-detect":104,"./_meta":113,"./_redefine":139,"./_redefine-all":138,"./_set-to-string-tag":146}],71:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],72:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":119,"./_property-desc":137}],73:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":51}],74:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":83}],75:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":55,"./_to-primitive":165}],76:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],77:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":83}],78:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":88,"./_is-object":99}],79:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],80:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":125,"./_object-keys":128,"./_object-pie":129}],81:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":71,"./_ctx":73,"./_global":88,"./_hide":90,"./_redefine":139}],82:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":174}],83:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],84:[function(require,module,exports){
'use strict';
var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":76,"./_fails":83,"./_hide":90,"./_redefine":139,"./_wks":174}],85:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":55}],86:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":73,"./_is-array":97,"./_is-object":99,"./_to-length":163,"./_wks":174}],87:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":55,"./_ctx":73,"./_is-array-iter":96,"./_iter-call":101,"./_to-length":163,"./core.get-iterator-method":175}],88:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],89:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],90:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":77,"./_object-dp":119,"./_property-desc":137}],91:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":88}],92:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":77,"./_dom-create":78,"./_fails":83}],93:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":99,"./_set-proto":144}],94:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],95:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":66}],96:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":106,"./_wks":174}],97:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":66}],98:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":99}],99:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],100:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":66,"./_is-object":99,"./_wks":174}],101:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":55}],102:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":90,"./_object-create":118,"./_property-desc":137,"./_set-to-string-tag":146,"./_wks":174}],103:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":81,"./_hide":90,"./_iter-create":102,"./_iterators":106,"./_library":107,"./_object-gpo":126,"./_redefine":139,"./_set-to-string-tag":146,"./_wks":174}],104:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":174}],105:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],106:[function(require,module,exports){
module.exports = {};

},{}],107:[function(require,module,exports){
module.exports = false;

},{}],108:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],109:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":112}],110:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],111:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],112:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],113:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":83,"./_has":89,"./_is-object":99,"./_object-dp":119,"./_uid":169}],114:[function(require,module,exports){
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};

},{"./_export":81,"./_shared":148,"./es6.map":206,"./es6.weak-map":312}],115:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":66,"./_global":88,"./_task":158}],116:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":51}],117:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":83,"./_iobject":95,"./_object-gops":125,"./_object-keys":128,"./_object-pie":129,"./_to-object":164}],118:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":55,"./_dom-create":78,"./_enum-bug-keys":79,"./_html":91,"./_object-dps":120,"./_shared-key":147}],119:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":55,"./_descriptors":77,"./_ie8-dom-define":92,"./_to-primitive":165}],120:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":55,"./_descriptors":77,"./_object-dp":119,"./_object-keys":128}],121:[function(require,module,exports){
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete require('./_global')[K];
});

},{"./_fails":83,"./_global":88,"./_library":107}],122:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":77,"./_has":89,"./_ie8-dom-define":92,"./_object-pie":129,"./_property-desc":137,"./_to-iobject":162,"./_to-primitive":165}],123:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":124,"./_to-iobject":162}],124:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":79,"./_object-keys-internal":127}],125:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],126:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":89,"./_shared-key":147,"./_to-object":164}],127:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":59,"./_has":89,"./_shared-key":147,"./_to-iobject":162}],128:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":79,"./_object-keys-internal":127}],129:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],130:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":71,"./_export":81,"./_fails":83}],131:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":128,"./_object-pie":129,"./_to-iobject":162}],132:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":55,"./_global":88,"./_object-gopn":124,"./_object-gops":125}],133:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":88,"./_string-trim":156,"./_string-ws":157}],134:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":88,"./_string-trim":156,"./_string-ws":157}],135:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],136:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":55,"./_is-object":99,"./_new-promise-capability":116}],137:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],138:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":139}],139:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":71,"./_global":88,"./_has":89,"./_hide":90,"./_uid":169}],140:[function(require,module,exports){
module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};

},{}],141:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],142:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};

},{"./_a-function":51,"./_ctx":73,"./_export":81,"./_for-of":87}],143:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};

},{"./_export":81}],144:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":55,"./_ctx":73,"./_is-object":99,"./_object-gopd":122}],145:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":77,"./_global":88,"./_object-dp":119,"./_wks":174}],146:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":89,"./_object-dp":119,"./_wks":174}],147:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":148,"./_uid":169}],148:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":71,"./_global":88,"./_library":107}],149:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":51,"./_an-object":55,"./_wks":174}],150:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":83}],151:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":76,"./_to-integer":161}],152:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":76,"./_is-regexp":100}],153:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":76,"./_export":81,"./_fails":83}],154:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":76,"./_string-repeat":155,"./_to-length":163}],155:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":76,"./_to-integer":161}],156:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":76,"./_export":81,"./_fails":83,"./_string-ws":157}],157:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],158:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":66,"./_ctx":73,"./_dom-create":78,"./_global":88,"./_html":91,"./_invoke":94}],159:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":161}],160:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":161,"./_to-length":163}],161:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],162:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":76,"./_iobject":95}],163:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":161}],164:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":76}],165:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":99}],166:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":54,"./_array-copy-within":56,"./_array-fill":57,"./_array-includes":59,"./_array-methods":60,"./_classof":65,"./_ctx":73,"./_descriptors":77,"./_export":81,"./_fails":83,"./_global":88,"./_has":89,"./_hide":90,"./_is-array-iter":96,"./_is-object":99,"./_iter-detect":104,"./_iterators":106,"./_library":107,"./_object-create":118,"./_object-dp":119,"./_object-gopd":122,"./_object-gopn":124,"./_object-gpo":126,"./_property-desc":137,"./_redefine-all":138,"./_set-species":145,"./_species-constructor":149,"./_to-absolute-index":159,"./_to-index":160,"./_to-integer":161,"./_to-length":163,"./_to-object":164,"./_to-primitive":165,"./_typed":168,"./_typed-buffer":167,"./_uid":169,"./_wks":174,"./core.get-iterator-method":175,"./es6.array.iterator":187}],167:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":54,"./_array-fill":57,"./_descriptors":77,"./_fails":83,"./_global":88,"./_hide":90,"./_library":107,"./_object-dp":119,"./_object-gopn":124,"./_redefine-all":138,"./_set-to-string-tag":146,"./_to-index":160,"./_to-integer":161,"./_to-length":163,"./_typed":168}],168:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":88,"./_hide":90,"./_uid":169}],169:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],170:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":88}],171:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":99}],172:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":71,"./_global":88,"./_library":107,"./_object-dp":119,"./_wks-ext":173}],173:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":174}],174:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":88,"./_shared":148,"./_uid":169}],175:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":65,"./_core":71,"./_iterators":106,"./_wks":174}],176:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });

},{"./_export":81,"./_replacer":140}],177:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":53,"./_array-copy-within":56,"./_export":81}],178:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":60,"./_export":81,"./_strict-method":150}],179:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":53,"./_array-fill":57,"./_export":81}],180:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":60,"./_export":81,"./_strict-method":150}],181:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":53,"./_array-methods":60,"./_export":81}],182:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":53,"./_array-methods":60,"./_export":81}],183:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":60,"./_export":81,"./_strict-method":150}],184:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":72,"./_ctx":73,"./_export":81,"./_is-array-iter":96,"./_iter-call":101,"./_iter-detect":104,"./_to-length":163,"./_to-object":164,"./core.get-iterator-method":175}],185:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":59,"./_export":81,"./_strict-method":150}],186:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":81,"./_is-array":97}],187:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":53,"./_iter-define":103,"./_iter-step":105,"./_iterators":106,"./_to-iobject":162}],188:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":81,"./_iobject":95,"./_strict-method":150,"./_to-iobject":162}],189:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":81,"./_strict-method":150,"./_to-integer":161,"./_to-iobject":162,"./_to-length":163}],190:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":60,"./_export":81,"./_strict-method":150}],191:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":72,"./_export":81,"./_fails":83}],192:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":61,"./_export":81,"./_strict-method":150}],193:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":61,"./_export":81,"./_strict-method":150}],194:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":66,"./_export":81,"./_fails":83,"./_html":91,"./_to-absolute-index":159,"./_to-length":163}],195:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":60,"./_export":81,"./_strict-method":150}],196:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":51,"./_export":81,"./_fails":83,"./_strict-method":150,"./_to-object":164}],197:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":145}],198:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":81}],199:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":74,"./_export":81}],200:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":81,"./_fails":83,"./_to-object":164,"./_to-primitive":165}],201:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":75,"./_hide":90,"./_wks":174}],202:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":139}],203:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":64,"./_export":81}],204:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":99,"./_object-dp":119,"./_object-gpo":126,"./_wks":174}],205:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":77,"./_object-dp":119}],206:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":70,"./_collection-strong":67,"./_validate-collection":171}],207:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":81,"./_math-log1p":110}],208:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":81}],209:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":81}],210:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":81,"./_math-sign":112}],211:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":81}],212:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":81}],213:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":81,"./_math-expm1":108}],214:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":81,"./_math-fround":109}],215:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":81}],216:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":81,"./_fails":83}],217:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":81}],218:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":81,"./_math-log1p":110}],219:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":81}],220:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":81,"./_math-sign":112}],221:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":81,"./_fails":83,"./_math-expm1":108}],222:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":81,"./_math-expm1":108}],223:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":81}],224:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":66,"./_descriptors":77,"./_fails":83,"./_global":88,"./_has":89,"./_inherit-if-required":93,"./_object-create":118,"./_object-dp":119,"./_object-gopd":122,"./_object-gopn":124,"./_redefine":139,"./_string-trim":156,"./_to-primitive":165}],225:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":81}],226:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":81,"./_global":88}],227:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":81,"./_is-integer":98}],228:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":81}],229:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":81,"./_is-integer":98}],230:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":81}],231:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":81}],232:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":81,"./_parse-float":133}],233:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":81,"./_parse-int":134}],234:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":52,"./_export":81,"./_fails":83,"./_string-repeat":155,"./_to-integer":161}],235:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":52,"./_export":81,"./_fails":83}],236:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":81,"./_object-assign":117}],237:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":81,"./_object-create":118}],238:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":77,"./_export":81,"./_object-dps":120}],239:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":77,"./_export":81,"./_object-dp":119}],240:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":99,"./_meta":113,"./_object-sap":130}],241:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":122,"./_object-sap":130,"./_to-iobject":162}],242:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":123,"./_object-sap":130}],243:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":126,"./_object-sap":130,"./_to-object":164}],244:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":99,"./_object-sap":130}],245:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":99,"./_object-sap":130}],246:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":99,"./_object-sap":130}],247:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":81,"./_same-value":141}],248:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":128,"./_object-sap":130,"./_to-object":164}],249:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":99,"./_meta":113,"./_object-sap":130}],250:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":99,"./_meta":113,"./_object-sap":130}],251:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":81,"./_set-proto":144}],252:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":65,"./_redefine":139,"./_wks":174}],253:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":81,"./_parse-float":133}],254:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":81,"./_parse-int":134}],255:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":51,"./_an-instance":54,"./_classof":65,"./_core":71,"./_ctx":73,"./_export":81,"./_for-of":87,"./_global":88,"./_is-object":99,"./_iter-detect":104,"./_library":107,"./_microtask":115,"./_new-promise-capability":116,"./_perform":135,"./_promise-resolve":136,"./_redefine-all":138,"./_set-species":145,"./_set-to-string-tag":146,"./_species-constructor":149,"./_task":158,"./_user-agent":170,"./_wks":174}],256:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":51,"./_an-object":55,"./_export":81,"./_fails":83,"./_global":88}],257:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":51,"./_an-object":55,"./_bind":64,"./_export":81,"./_fails":83,"./_global":88,"./_is-object":99,"./_object-create":118}],258:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":55,"./_export":81,"./_fails":83,"./_object-dp":119,"./_to-primitive":165}],259:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":55,"./_export":81,"./_object-gopd":122}],260:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":55,"./_export":81,"./_iter-create":102}],261:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":55,"./_export":81,"./_object-gopd":122}],262:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":55,"./_export":81,"./_object-gpo":126}],263:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":55,"./_export":81,"./_has":89,"./_is-object":99,"./_object-gopd":122,"./_object-gpo":126}],264:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":81}],265:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":55,"./_export":81}],266:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":81,"./_own-keys":132}],267:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":55,"./_export":81}],268:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":81,"./_set-proto":144}],269:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":55,"./_export":81,"./_has":89,"./_is-object":99,"./_object-dp":119,"./_object-gopd":122,"./_object-gpo":126,"./_property-desc":137}],270:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":77,"./_fails":83,"./_flags":85,"./_global":88,"./_inherit-if-required":93,"./_is-regexp":100,"./_object-dp":119,"./_object-gopn":124,"./_redefine":139,"./_set-species":145,"./_wks":174}],271:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":77,"./_flags":85,"./_object-dp":119}],272:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":84}],273:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":84}],274:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":84}],275:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":84,"./_is-regexp":100}],276:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":55,"./_descriptors":77,"./_fails":83,"./_flags":85,"./_redefine":139,"./es6.regexp.flags":271}],277:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":70,"./_collection-strong":67,"./_validate-collection":171}],278:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":153}],279:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":153}],280:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":153}],281:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":153}],282:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":81,"./_string-at":151}],283:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":81,"./_fails-is-regexp":82,"./_string-context":152,"./_to-length":163}],284:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":153}],285:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":153}],286:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":153}],287:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":81,"./_to-absolute-index":159}],288:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":81,"./_fails-is-regexp":82,"./_string-context":152}],289:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":153}],290:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":103,"./_string-at":151}],291:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":153}],292:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":81,"./_to-iobject":162,"./_to-length":163}],293:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":81,"./_string-repeat":155}],294:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":153}],295:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":81,"./_fails-is-regexp":82,"./_string-context":152,"./_to-length":163}],296:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":153}],297:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":153}],298:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":153}],299:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":156}],300:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":55,"./_descriptors":77,"./_enum-keys":80,"./_export":81,"./_fails":83,"./_global":88,"./_has":89,"./_hide":90,"./_is-array":97,"./_is-object":99,"./_library":107,"./_meta":113,"./_object-create":118,"./_object-dp":119,"./_object-gopd":122,"./_object-gopn":124,"./_object-gopn-ext":123,"./_object-gops":125,"./_object-keys":128,"./_object-pie":129,"./_property-desc":137,"./_redefine":139,"./_set-to-string-tag":146,"./_shared":148,"./_to-iobject":162,"./_to-primitive":165,"./_uid":169,"./_wks":174,"./_wks-define":172,"./_wks-ext":173}],301:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":55,"./_export":81,"./_fails":83,"./_global":88,"./_is-object":99,"./_set-species":145,"./_species-constructor":149,"./_to-absolute-index":159,"./_to-length":163,"./_typed":168,"./_typed-buffer":167}],302:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":81,"./_typed":168,"./_typed-buffer":167}],303:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],304:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],305:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],306:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],307:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],308:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],309:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],310:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":166}],311:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":166}],312:[function(require,module,exports){
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":60,"./_collection":70,"./_collection-weak":69,"./_fails":83,"./_is-object":99,"./_meta":113,"./_object-assign":117,"./_redefine":139,"./_validate-collection":171}],313:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":70,"./_collection-weak":69,"./_validate-collection":171}],314:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":51,"./_add-to-unscopables":53,"./_array-species-create":63,"./_export":81,"./_flatten-into-array":86,"./_to-length":163,"./_to-object":164}],315:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

require('./_add-to-unscopables')('flatten');

},{"./_add-to-unscopables":53,"./_array-species-create":63,"./_export":81,"./_flatten-into-array":86,"./_to-integer":161,"./_to-length":163,"./_to-object":164}],316:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":53,"./_array-includes":59,"./_export":81}],317:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});

},{"./_cof":66,"./_export":81,"./_global":88,"./_microtask":115}],318:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});

},{"./_cof":66,"./_export":81}],319:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":81,"./_global":88}],320:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":142}],321:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":143}],322:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });

},{"./_collection-to-json":68,"./_export":81}],323:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});

},{"./_export":81}],324:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });

},{"./_export":81}],325:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});

},{"./_export":81}],326:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});

},{"./_export":81,"./_math-fround":109,"./_math-scale":111}],327:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});

},{"./_export":81}],328:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});

},{"./_export":81}],329:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});

},{"./_export":81}],330:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });

},{"./_export":81}],331:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});

},{"./_export":81}],332:[function(require,module,exports){
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');

$export($export.S, 'Math', { scale: require('./_math-scale') });

},{"./_export":81,"./_math-scale":111}],333:[function(require,module,exports){
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });

},{"./_export":81}],334:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});

},{"./_export":81}],335:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":51,"./_descriptors":77,"./_export":81,"./_object-dp":119,"./_object-forced-pam":121,"./_to-object":164}],336:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});

},{"./_a-function":51,"./_descriptors":77,"./_export":81,"./_object-dp":119,"./_object-forced-pam":121,"./_to-object":164}],337:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":81,"./_object-to-array":131}],338:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":72,"./_export":81,"./_object-gopd":122,"./_own-keys":132,"./_to-iobject":162}],339:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":77,"./_export":81,"./_object-forced-pam":121,"./_object-gopd":122,"./_object-gpo":126,"./_to-object":164,"./_to-primitive":165}],340:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});

},{"./_descriptors":77,"./_export":81,"./_object-forced-pam":121,"./_object-gopd":122,"./_object-gpo":126,"./_to-object":164,"./_to-primitive":165}],341:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":81,"./_object-to-array":131}],342:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

require('./_set-species')('Observable');

},{"./_a-function":51,"./_an-instance":54,"./_an-object":55,"./_core":71,"./_export":81,"./_for-of":87,"./_global":88,"./_hide":90,"./_microtask":115,"./_redefine-all":138,"./_set-species":145,"./_wks":174}],343:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":71,"./_export":81,"./_global":88,"./_promise-resolve":136,"./_species-constructor":149}],344:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });

},{"./_export":81,"./_new-promise-capability":116,"./_perform":135}],345:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });

},{"./_an-object":55,"./_metadata":114}],346:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });

},{"./_an-object":55,"./_metadata":114}],347:[function(require,module,exports){
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":55,"./_array-from-iterable":58,"./_metadata":114,"./_object-gpo":126,"./es6.set":277}],348:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":55,"./_metadata":114,"./_object-gpo":126}],349:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });

},{"./_an-object":55,"./_metadata":114}],350:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":55,"./_metadata":114}],351:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":55,"./_metadata":114,"./_object-gpo":126}],352:[function(require,module,exports){
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });

},{"./_an-object":55,"./_metadata":114}],353:[function(require,module,exports){
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });

},{"./_a-function":51,"./_an-object":55,"./_metadata":114}],354:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":142}],355:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":143}],356:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');

$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });

},{"./_collection-to-json":68,"./_export":81}],357:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export');
var $at = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});

},{"./_export":81,"./_string-at":151}],358:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});

},{"./_defined":76,"./_export":81,"./_flags":85,"./_is-regexp":100,"./_iter-create":102,"./_to-length":163}],359:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":81,"./_string-pad":154,"./_user-agent":170}],360:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":81,"./_string-pad":154,"./_user-agent":170}],361:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":156}],362:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":156}],363:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":172}],364:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":172}],365:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.S, 'System', { global: require('./_global') });

},{"./_export":81,"./_global":88}],366:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":142}],367:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":143}],368:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":142}],369:[function(require,module,exports){
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":143}],370:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":88,"./_hide":90,"./_iterators":106,"./_object-keys":128,"./_redefine":139,"./_wks":174,"./es6.array.iterator":187}],371:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":81,"./_task":158}],372:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":81,"./_global":88,"./_user-agent":170}],373:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/_core":71,"./modules/es6.array.copy-within":177,"./modules/es6.array.every":178,"./modules/es6.array.fill":179,"./modules/es6.array.filter":180,"./modules/es6.array.find":182,"./modules/es6.array.find-index":181,"./modules/es6.array.for-each":183,"./modules/es6.array.from":184,"./modules/es6.array.index-of":185,"./modules/es6.array.is-array":186,"./modules/es6.array.iterator":187,"./modules/es6.array.join":188,"./modules/es6.array.last-index-of":189,"./modules/es6.array.map":190,"./modules/es6.array.of":191,"./modules/es6.array.reduce":193,"./modules/es6.array.reduce-right":192,"./modules/es6.array.slice":194,"./modules/es6.array.some":195,"./modules/es6.array.sort":196,"./modules/es6.array.species":197,"./modules/es6.date.now":198,"./modules/es6.date.to-iso-string":199,"./modules/es6.date.to-json":200,"./modules/es6.date.to-primitive":201,"./modules/es6.date.to-string":202,"./modules/es6.function.bind":203,"./modules/es6.function.has-instance":204,"./modules/es6.function.name":205,"./modules/es6.map":206,"./modules/es6.math.acosh":207,"./modules/es6.math.asinh":208,"./modules/es6.math.atanh":209,"./modules/es6.math.cbrt":210,"./modules/es6.math.clz32":211,"./modules/es6.math.cosh":212,"./modules/es6.math.expm1":213,"./modules/es6.math.fround":214,"./modules/es6.math.hypot":215,"./modules/es6.math.imul":216,"./modules/es6.math.log10":217,"./modules/es6.math.log1p":218,"./modules/es6.math.log2":219,"./modules/es6.math.sign":220,"./modules/es6.math.sinh":221,"./modules/es6.math.tanh":222,"./modules/es6.math.trunc":223,"./modules/es6.number.constructor":224,"./modules/es6.number.epsilon":225,"./modules/es6.number.is-finite":226,"./modules/es6.number.is-integer":227,"./modules/es6.number.is-nan":228,"./modules/es6.number.is-safe-integer":229,"./modules/es6.number.max-safe-integer":230,"./modules/es6.number.min-safe-integer":231,"./modules/es6.number.parse-float":232,"./modules/es6.number.parse-int":233,"./modules/es6.number.to-fixed":234,"./modules/es6.number.to-precision":235,"./modules/es6.object.assign":236,"./modules/es6.object.create":237,"./modules/es6.object.define-properties":238,"./modules/es6.object.define-property":239,"./modules/es6.object.freeze":240,"./modules/es6.object.get-own-property-descriptor":241,"./modules/es6.object.get-own-property-names":242,"./modules/es6.object.get-prototype-of":243,"./modules/es6.object.is":247,"./modules/es6.object.is-extensible":244,"./modules/es6.object.is-frozen":245,"./modules/es6.object.is-sealed":246,"./modules/es6.object.keys":248,"./modules/es6.object.prevent-extensions":249,"./modules/es6.object.seal":250,"./modules/es6.object.set-prototype-of":251,"./modules/es6.object.to-string":252,"./modules/es6.parse-float":253,"./modules/es6.parse-int":254,"./modules/es6.promise":255,"./modules/es6.reflect.apply":256,"./modules/es6.reflect.construct":257,"./modules/es6.reflect.define-property":258,"./modules/es6.reflect.delete-property":259,"./modules/es6.reflect.enumerate":260,"./modules/es6.reflect.get":263,"./modules/es6.reflect.get-own-property-descriptor":261,"./modules/es6.reflect.get-prototype-of":262,"./modules/es6.reflect.has":264,"./modules/es6.reflect.is-extensible":265,"./modules/es6.reflect.own-keys":266,"./modules/es6.reflect.prevent-extensions":267,"./modules/es6.reflect.set":269,"./modules/es6.reflect.set-prototype-of":268,"./modules/es6.regexp.constructor":270,"./modules/es6.regexp.flags":271,"./modules/es6.regexp.match":272,"./modules/es6.regexp.replace":273,"./modules/es6.regexp.search":274,"./modules/es6.regexp.split":275,"./modules/es6.regexp.to-string":276,"./modules/es6.set":277,"./modules/es6.string.anchor":278,"./modules/es6.string.big":279,"./modules/es6.string.blink":280,"./modules/es6.string.bold":281,"./modules/es6.string.code-point-at":282,"./modules/es6.string.ends-with":283,"./modules/es6.string.fixed":284,"./modules/es6.string.fontcolor":285,"./modules/es6.string.fontsize":286,"./modules/es6.string.from-code-point":287,"./modules/es6.string.includes":288,"./modules/es6.string.italics":289,"./modules/es6.string.iterator":290,"./modules/es6.string.link":291,"./modules/es6.string.raw":292,"./modules/es6.string.repeat":293,"./modules/es6.string.small":294,"./modules/es6.string.starts-with":295,"./modules/es6.string.strike":296,"./modules/es6.string.sub":297,"./modules/es6.string.sup":298,"./modules/es6.string.trim":299,"./modules/es6.symbol":300,"./modules/es6.typed.array-buffer":301,"./modules/es6.typed.data-view":302,"./modules/es6.typed.float32-array":303,"./modules/es6.typed.float64-array":304,"./modules/es6.typed.int16-array":305,"./modules/es6.typed.int32-array":306,"./modules/es6.typed.int8-array":307,"./modules/es6.typed.uint16-array":308,"./modules/es6.typed.uint32-array":309,"./modules/es6.typed.uint8-array":310,"./modules/es6.typed.uint8-clamped-array":311,"./modules/es6.weak-map":312,"./modules/es6.weak-set":313,"./modules/es7.array.flat-map":314,"./modules/es7.array.flatten":315,"./modules/es7.array.includes":316,"./modules/es7.asap":317,"./modules/es7.error.is-error":318,"./modules/es7.global":319,"./modules/es7.map.from":320,"./modules/es7.map.of":321,"./modules/es7.map.to-json":322,"./modules/es7.math.clamp":323,"./modules/es7.math.deg-per-rad":324,"./modules/es7.math.degrees":325,"./modules/es7.math.fscale":326,"./modules/es7.math.iaddh":327,"./modules/es7.math.imulh":328,"./modules/es7.math.isubh":329,"./modules/es7.math.rad-per-deg":330,"./modules/es7.math.radians":331,"./modules/es7.math.scale":332,"./modules/es7.math.signbit":333,"./modules/es7.math.umulh":334,"./modules/es7.object.define-getter":335,"./modules/es7.object.define-setter":336,"./modules/es7.object.entries":337,"./modules/es7.object.get-own-property-descriptors":338,"./modules/es7.object.lookup-getter":339,"./modules/es7.object.lookup-setter":340,"./modules/es7.object.values":341,"./modules/es7.observable":342,"./modules/es7.promise.finally":343,"./modules/es7.promise.try":344,"./modules/es7.reflect.define-metadata":345,"./modules/es7.reflect.delete-metadata":346,"./modules/es7.reflect.get-metadata":348,"./modules/es7.reflect.get-metadata-keys":347,"./modules/es7.reflect.get-own-metadata":350,"./modules/es7.reflect.get-own-metadata-keys":349,"./modules/es7.reflect.has-metadata":351,"./modules/es7.reflect.has-own-metadata":352,"./modules/es7.reflect.metadata":353,"./modules/es7.set.from":354,"./modules/es7.set.of":355,"./modules/es7.set.to-json":356,"./modules/es7.string.at":357,"./modules/es7.string.match-all":358,"./modules/es7.string.pad-end":359,"./modules/es7.string.pad-start":360,"./modules/es7.string.trim-left":361,"./modules/es7.string.trim-right":362,"./modules/es7.symbol.async-iterator":363,"./modules/es7.symbol.observable":364,"./modules/es7.system.global":365,"./modules/es7.weak-map.from":366,"./modules/es7.weak-map.of":367,"./modules/es7.weak-set.from":368,"./modules/es7.weak-set.of":369,"./modules/web.dom.iterable":370,"./modules/web.immediate":371,"./modules/web.timers":372}],374:[function(require,module,exports){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

},{"./socket":375,"engine.io-parser":385}],375:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var transports = require('./transports/index');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports/index');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0)
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./transport":376,"./transports/index":377,"component-emitter":48,"debug":383,"engine.io-parser":385,"indexof":392,"parseqs":483,"parseuri":484}],376:[function(require,module,exports){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":48,"engine.io-parser":385}],377:[function(require,module,exports){
(function (global){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling-jsonp":378,"./polling-xhr":379,"./websocket":381,"xmlhttprequest-ssl":382}],378:[function(require,module,exports){
(function (global){

/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":380,"component-inherit":49}],379:[function(require,module,exports){
(function (global){
/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest-ssl');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":380,"component-emitter":48,"component-inherit":49,"debug":383,"xmlhttprequest-ssl":382}],380:[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = require('xmlhttprequest-ssl');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

},{"../transport":376,"component-inherit":49,"debug":383,"engine.io-parser":385,"parseqs":483,"xmlhttprequest-ssl":382,"yeast":506}],381:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var yeast = require('yeast');
var debug = require('debug')('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = require('ws');
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? (protocols ? new WebSocket(uri, protocols) : new WebSocket(uri)) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../transport":376,"component-inherit":49,"debug":383,"engine.io-parser":385,"parseqs":483,"ws":42,"yeast":506}],382:[function(require,module,exports){
(function (global){
// browser shim for xmlhttprequest module

var hasCORS = require('has-cors');

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"has-cors":390}],383:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))
},{"./debug":384,"_process":486}],384:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":394}],385:[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary2');
var sliceBuffer = require('arraybuffer.slice');
var after = require('after');
var utf8 = require('./utf8');

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = require('base64-arraybuffer');
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./keys":386,"./utf8":387,"after":35,"arraybuffer.slice":36,"base64-arraybuffer":40,"blob":41,"has-binary2":388}],386:[function(require,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],387:[function(require,module,exports){
(function (global){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.1.2',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return utf8;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.utf8 = utf8;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],388:[function(require,module,exports){
(function (Buffer){
/* global Blob File */

/*
 * Module requirements.
 */

var isArray = require('isarray');

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

}).call(this,require("buffer").Buffer)
},{"buffer":45,"isarray":389}],389:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],390:[function(require,module,exports){

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{}],391:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],392:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],393:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],394:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],395:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],396:[function(require,module,exports){
module.exports = {
0: `[root [nsubj I] have [obj [amod [advmod too] many] commitments] [advmod right now] [punct .]]`
};

},{}],397:[function(require,module,exports){
module.exports = {
equals: `# sent_id = mst-0001
# text = Peşreve başlamalı.
"<Peşreve>"
	"peşrev" Noun @obl #1->2
"<başlamalı>"
	"başla" Verb SpaceAfter=No @root #2->0
"<.>"
	"." Punc @punct #3->2`,

x_and_u_postag: `# text = Ñe'ẽnguéra iñe'ẽrapoambuéva (lenguas de flexión), umi ñe'ẽte indoeuropeo-icha.
# text[spa] = Las lenguas de flexión, aquellas lenguas como indoeuropeas.
# labels =
"<Ñeʼẽnguéra>"
	"ñeʼẽ" n @nsubj #1->
		"kuéra" det pl @det #2->1
"<iñeʼẽrapoambuéva>"
	"iñeʼẽrapoambuéva" adj @amod #3->1
"<(>"
	"(" lpar @punct #4->5
"<lenguas>"
	"lenguas" barb @appos #5->1
"<de>"
	"de" barb @foreign #6->7
"<flexión>"
	"flexión" barb @foreign #7->5
"<)>"
	")" rpar @punct #8->5
"<,>"
	"," cm @punct #9->
"<umi>"
	"umi" adj dem pl @amod #10->11
"<ñeʼẽte>"
	"ñeʼẽ" n @obl #11->
		"te" post @case #12->11
"<indoeuropeo-icha>"
	"indoeuropeo" barb @amod #13->11
		"icha" comp @dep #14->13
"<.>"
	"." sent @punct #15->`,

nested: `# sent_id = wikipedia:Poyvi_Paraguái:11
# text = Poyvi peteĩha ñane retãmegua niko ojepuru’ypýkuri 15 jasypo guive 16 jasypoteĩ meve ary 1811-pe.
# text[spa] = Bandera uno nosotros de-de _ él-se-utilizó-_ 15 maio desde 16 junio hasta año 1811-en.
"<Poyvi>"
	"poyvi" n
"<peteĩha>"
	"pete" n incp
		"ĩ" v tv pres
			"ha" subs
	"peteĩha" num
"<ñane>"
	"ñandé" prn pers p1 incl pl
"<retãmegua>"
	"*retãmegua"
"<niko>"
	"*niko"
"<ojepuruʼypýkuri>"
	"*ojepuruʼypýkuri"
"<15>"
	"15" num @amod
"<jasypo>"
	"ja" n incp
		"sy" n incp
			"po" n
	"ja" n incp
		"sy" n incp
			"po" v iv pres
	"ja" n incp
		"sy" n incp
			"po" v tv pres
	"ja" prn p1 pl
		"sy" n incp
			"po" n
	"ja" prn p1 pl
		"sy" n incp
			"po" v iv pres
	"ja" prn p1 pl
		"sy" n incp
			"po" v tv pres
	"jasy" n incp
		"po" n
	"jasy" n incp
		"po" v iv pres
	"jasy" n incp
		"po" v tv pres
	"jasypo" n
"<guive>"
	"guive" post @case
"<16>"
	"16" num @amod
"<jasypoteĩ>"
	"jasypoteĩ" n
"<meve>"
	"peve" post @case
"<ary>"
	"ary" n
"<1811-pe>"
	"1811" num
		"pe" post @case`,

/*nested_2: `"<ab>"
	"A" #1->
		"B" #2->
"<cde>"
	"C" #3->
		"D" #4->
			"E" #5->
"<f>"
	"F" #6->
"<h>"
	"H" #7->`,*/

kdt_tagged_1: `# https://github.com/apertium/apertium-kaz/blob/master/texts/kdt.tagged.txt
"<Өскеменнің>"
	"Өскемен" np top gen @nmod:poss #1->3
"<ар>"
	"ар" adj @amod #2->3
"<жағында>"
	"жақ" n px3sp loc @conj #3->7
"<,>"
	"," cm @punct #4->7
"<Бұқтырманың>"
	"Бұқтырма" np top gen @nmod:poss #5->7
"<оң>"
	"оң" adj @amod #6->7
"<жағында>"
	"жақ" n px3sp loc @nmod #7->11
"<әлемге>"
	"әлем" n dat @nmod #8->9
"<аян>"
	"аян" adj @acl #9->10
"<Алтай>"
	"Алтай" np top nom @nsubj #10->11
"<бар>"
	"бар" adj @root #11->0
		"е" cop aor p3 sg @cop #12->11
"<.>"
	"." sent @punct #13->11`,

kdt_tagged_2: `# https://github.com/apertium/apertium-kaz/blob/master/texts/kdt.tagged.txt
"<Аттан>"
	"аттан" v iv imp p2 sg @root #1->0
"<!>"
	"!" sent @punct #2->1`,

kdt_tagged_3: `# https://github.com/apertium/apertium-kaz/blob/master/texts/kdt.tagged.txt
"<Манағы>"
	"манағы" det dem @det #1->3
"<ала>"
	"ала" adj @amod #2->3
"<атты>"
	"атты" adj subst nom @nsubj #3->4
"<кім>"
	"кім" prn itg nom @root #4->0
		"е" cop aor p3 sg @cop #5->4
"<?>"
	"?" sent @punct #6->4`,

0: `"<Патшамен>"
	"патша" n ins @nmod #1->3
"<соғыс>"
	"соғыс" n nom @obj #2->3
"<ашқанда>"
	"аш" v tv ger_past loc @advcl #3->12
"<,>"
	"," cm @punct #4->12
"<ел-жұрт>"
	"ел-жұрт" n nom @conj #5->7
"<,>"
	"," cm @punct #6->7
"<отанымды>"
	"отан" n px1sg acc @obj #7->8
"<қорғауға>"
	"қорға" v tv ger dat @advcl #8->12
"<,>"
	"," cm @punct #9->12
"<біз>"
	"біз" prn pers p1 pl nom @nsubj #10->12
"<соғысқа>"
	"соғыс" n dat @nmod #11->12
"<бардық>"
	"бар" v iv ifi p1 pl @root #12->0
"<.>"
	"." sent @punct #13->12`,

1: `# text = He boued e tebr Mona er gegin.
# text[eng] = Mona eats her food here in the kitchen.
# labels = press_1986 ch_syntax p_197 to_check
"<He>"
	"he" det pos f sp @det #1->2
"<boued>"
	"boued" n m sg @obj #2->4
"<e>"
	"e" vpart obj @aux #3->4
"<tebr>"
	"debriñ" vblex pri p3 sg @root #4->0
"<Mona>"
	"Mona" np ant f sg @nsubj #5->4
"<er>"
	"e" pr @case #6->8
		"an" det def sp @det #7->8
"<gegin>"
	"kegin" n f sg @obl #8->4
"<.>"
	"." sent @punct #9->4`,

2: `# text = He boued e tebr Mona er gegin.
# text[eng] = Mona eats her food here in the kitchen.
# labels = press_1986 ch_syntax p_197 to_check
"<He>"
	"he" det pos f sp @det #1->2
"<boued>"
	"boued" n m sg @obj #2->4
"<e>"
	"e" vpart obj @aux #3->4
"<tebr>"
	"debriñ" vblex pri p3 sg @root #4->0
"<Mona>"
	"Mona" np ant f sg @nsubj #5->4
"<er>"
	"e" pr @case #6->8
		"an" det def sp @det #7->8
"<gegin>"
	"kegin" n f sg @obl #8->4
	"kegin" n f pl @obl #9->
"<.>"
	"." sent @punct #10->4`, // note: changed line `"kegin" n f pl @obl #8->4`

with_semicolumn: `
"<Siedzieliśmy>"
	"siedzieć" vblex impf past p1 m pl
"<w>"
	"w" pr
"<moim>"
;   "mój" prn pos mi sg loc
"<pokoju>"
	"pokój" n mi sg loc
"<,>"
	"," cm
"<paląc>"
	"palić" vblex impf pprs adv
"<i>"
	"i" cnjcoo
"<rozmawiając>"
	"rozmawiać" vblex impf pprs adv
"<o>"
	"o" pr
"<tem>"
	"to" prn dem mi sg loc
"<,>"
	"," cm
"<jak>"
	"jak" rel adv
"<marni>"
	"marny" adj sint mp pl nom
"<jesteśmy>"
	"być" vbser pres p1 pl
"<,>"
	"," cm
"<marni>"
	"marny" adj sint mp pl nom
"<z>"
	"z" pr
"<lekarskiego>"
	"lekarski" adj mi sg gen
"<punktu>"
	"punkt" n mi sg gen
"<widzenia>"
;   "widzieć" vblex impf ger nt sg gen
"<chcę>"
	"chcieć" vblex impf pres p1 sg
"<powiedzieć>"
	"powiedzieć" vblex perf inf
"<,>"
	"," cm
"<naturalnie>"
	"naturalnie" adv sint
"<.>"
	"." sent`,

simple: `"<Патшамен>"
	"патша" n ins @nmod #1->3
"<соғыс>"
	"соғыс" n nom @obj #2->3
"<ашқанда>"
	"аш" v tv ger_past loc @advcl #3->12
"<,>"
	"," cm @punct #4->12
"<ел-жұрт>"
	"ел-жұрт" n nom @conj #5->7
"<,>"
	"," cm @punct #6->7
"<отанымды>"
	"отан" n px1sg acc @obj #7->8
"<қорғауға>"
	"қорға" v tv ger dat @advcl #8->12
"<,>"
	"," cm @punct #9->12
"<біз>"
	"біз" prn pers p1 pl nom @nsubj #10->12
"<соғысқа>"
	"соғыс" n dat @nmod #11->12
"<бардық>"
	"бар" v iv ifi p1 pl @root #12->0
"<.>"
	"." sent @punct #13->12`,

simple_with_comments: `# comment #1
# comment #2
"<Патшамен>"
	"патша" n ins @nmod #1->3
"<соғыс>"
	"соғыс" n nom @obj #2->3
"<ашқанда>"
	"аш" v tv ger_past loc @advcl #3->12
"<,>"
	"," cm @punct #4->12
"<ел-жұрт>"
	"ел-жұрт" n nom @conj #5->7
"<,>"
	"," cm @punct #6->7
"<отанымды>"
	"отан" n px1sg acc @obj #7->8
"<қорғауға>"
	"қорға" v tv ger dat @advcl #8->12
"<,>"
	"," cm @punct #9->12
"<біз>"
	"біз" prn pers p1 pl nom @nsubj #10->12
"<соғысқа>"
	"соғыс" n dat @nmod #11->12
"<бардық>"
	"бар" v iv ifi p1 pl @root #12->0
"<.>"
	"." sent @punct #13->12`,

with_spans: `# text = He boued e tebr Mona er gegin.
# text[eng] = Mona eats her food here in the kitchen.
# labels = press_1986 ch_syntax p_197 to_check
"<He>"
	"he" det pos f sp @det #1->2
"<boued>"
	"boued" n m sg @obj #2->4
"<e>"
	"e" vpart obj @aux #3->4
"<tebr>"
	"debriñ" vblex pri p3 sg @root #4->0
"<Mona>"
	"Mona" np ant f sg @nsubj #5->4
"<er>"
	"e" pr @case #6->8
		"an" det def sp @det #7->8
"<gegin>"
	"kegin" n f sg @obl #8->4
"<.>"
	"." sent @punct #9->4`,

apertium_kaz_1: `# https://bpaste.net/show/be7c03e6213e
"<Чау>"
	"*Чау"
"<->"
	"х" guio
	"-" guio
"<чау>"
	"*чау"
"<шығу>"
	"шығу" n attr
	"шық" v tv ger nom
	"шық" v iv ger nom
	"шығу" n nom
;	"шығу" n nom
;		"е" cop aor p3 pl REMOVE:294
;	"шығу" n nom
;		"е" cop aor p3 sg REMOVE:294
;	"шық" vaux ger nom REMOVE:766
"<тегінен>"
	"тек" n px3sp abl
;	"тек" n px3sp abl
;		"е" cop aor p3 pl REMOVE:294
;	"тек" n px3sp abl
;		"е" cop aor p3 sg REMOVE:294
"<шпицтер>"
	"*шпицтер"
"<тобына>"
	"топ" n px3sp dat
"<жатады>"
	"жат" v iv aor p3 sg
;	"жат" vaux aor p3 pl REMOVE:766
;	"жат" vaux aor p3 sg REMOVE:766
;	"жат" v iv aor p3 pl REMOVE:846
"<.>"
	"." sent`,

apertium_kaz_2: `# https://bpaste.net/show/be7c03e6213e
"<Қанында>"
	"қан" n px3sp loc
;	"қан" n px3sp loc
;		"е" cop aor p3 pl REMOVE:294
;	"қан" n px3sp loc
;		"е" cop aor p3 sg REMOVE:294
"<тибет>"
	"*тибет"
"<итінің>"
	"ит" n px3sp gen
"<(>"
	"(" lpar
"<мастиф>"
	"*мастиф"
"<)>"
	")" rpar
"<қаны>"
	"қан" n px3sp nom
;	"қан" n px3sp nom
;		"е" cop aor p3 pl REMOVE:294
;	"қан" n px3sp nom
;		"е" cop aor p3 sg REMOVE:294
"<бар>"
	"бар" adj SELECT:1118
	"бар" adj subst nom SELECT:1118
		"е" cop aor p3 sg
	"бар" adj subst nom SELECT:1118
	"бар" adj SELECT:1118
		"е" cop aor p3 sg
;	"бар" n attr REMOVE:567
;	"бар" adj
;		"е" cop aor p3 pl REMOVE:853
;	"бар" n nom
;		"е" cop aor p3 pl REMOVE:853
;	"бар" adj subst nom
;		"е" cop aor p3 pl REMOVE:853
;	"бар" n nom SELECT:1118
;	"бар" det qnt SELECT:1118
;	"бар" v iv imp p2 sg SELECT:1118
;	"бар" n nom SELECT:1118
;		"е" cop aor p3 sg
"<деген>"
	"де" v tv gpr_past SELECT:813
	"де" v tv gpr_past subst nom SELECT:813
;	"де" v tv ger_past nom SELECT:813
;	"де" v tv past p3 pl SELECT:813
;	"де" v tv past p3 sg SELECT:813
"<тұжырым>"
	"тұжырым" n nom
	"тұжырым" n attr
;	"тұжырым" n nom
;		"е" cop aor p3 pl REMOVE:294
;	"тұжырым" n nom
;		"е" cop aor p3 sg REMOVE:294
"<бар>"
	"бар" adj
	"бар" n nom
	"бар" adj
		"е" cop aor p3 sg
	"бар" adj subst nom
		"е" cop aor p3 sg
	"бар" adj subst nom
	"бар" v iv imp p2 sg
	"бар" n nom
		"е" cop aor p3 sg
;	"бар" det qnt REMOVE:551
;	"бар" n attr REMOVE:567
;	"бар" adj subst nom
;		"е" cop aor p3 pl REMOVE:853
;	"бар" adj
;		"е" cop aor p3 pl REMOVE:853
;	"бар" n nom
;		"е" cop aor p3 pl REMOVE:853
"<.>"
	"." sent`

};

},{}],398:[function(require,module,exports){
module.exports = {
turkic: `# sent_id = mst-0008
# text = Ercan Tezer, iç pazarda bu yıl seksen bin otomobil ve toplam yuzotuz bin araç satılmasının beklendiğini kaydederek, " onalti yıl geriden gidiyoruz " dedi.
1	Ercan	Ercan	PROPN	Prop	Case=Nom|Number=Sing|Person=3	26	nsubj	_	_
2	Tezer	Tezer	PROPN	Prop	Case=Nom|Number=Sing|Person=3	1	flat	_	SpaceAfter=No
3	,	,	PUNCT	Punc	_	26	punct	_	_
4	iç	iç	ADJ	Adj	_	16	amod	_	_
5	pazarda	pazar	NOUN	Noun	Case=Loc|Number=Sing|Person=3	4	compound	_	_
6	bu	bu	DET	Det	_	7	det	_	_
7	yıl	yıl	NOUN	Noun	Case=Nom|Number=Sing|Person=3	16	obl	_	_
8	seksen	seksen	NUM	ANum	NumType=Card	10	nummod	_	_
9	bin	bin	NUM	ANum	NumType=Card	8	flat	_	_
10	otomobil	otomobil	NOUN	Noun	Case=Nom|Number=Sing|Person=3	16	nsubj	_	_
11	ve	ve	CCONJ	Conj	_	15	cc	_	_
12	toplam	toplam	NOUN	Noun	Case=Nom|Number=Sing|Person=3	13	obl	_	_
13	yuzotuz	yuzotuz	NUM	ANum	NumType=Card	15	nummod	_	_
14	bin	bin	NUM	ANum	NumType=Card	13	flat	_	_
15	araç	araç	NOUN	Noun	Case=Nom|Number=Sing|Person=3	10	conj	_	_
16	satılmasının	sat	VERB	Verb	Aspect=Perf|Case=Gen|Mood=Ind|Number[psor]=Sing|Person[psor]=3|Polarity=Pos|Tense=Pres|VerbForm=Vnoun|Voice=Pass	17	nmod:poss	_	_
17	beklendiğini	bekle	VERB	Verb	Aspect=Perf|Case=Acc|Mood=Ind|Number[psor]=Sing|Person[psor]=3|Polarity=Pos|Tense=Past|VerbForm=Part|Voice=Pass	18	obj	_	_
18	kaydederek	kaydet	VERB	Verb	Aspect=Perf|Mood=Ind|Polarity=Pos|Tense=Pres|VerbForm=Conv	26	nmod	_	SpaceAfter=No
19	,	,	PUNCT	Punc	_	18	punct	_	_
20	"	"	PUNCT	Punc	_	24	punct	_	_
21	onalti	onalti	NUM	ANum	NumType=Card	22	nummod	_	_
22	yıl	yıl	NOUN	Noun	Case=Nom|Number=Sing|Person=3	23	nmod	_	_
23	geriden	geri	ADJ	NAdj	Case=Abl|Number=Sing|Person=3	24	amod	_	_
24	gidiyoruz	git	VERB	Verb	Aspect=Prog|Mood=Ind|Number=Plur|Person=1|Polarity=Pos|Polite=Infm|Tense=Pres	26	obj	_	_
25	"	"	PUNCT	Punc	_	24	punct	_	_
26	dedi	de	VERB	Verb	Aspect=Perf|Mood=Ind|Number=Sing|Person=3|Polarity=Pos|Tense=Past	0	root	_	SpaceAfter=No
27	.	.	PUNCT	Punc	_	26	punct	_	_`,

labels_1: `# text = "This is a simple sentence."
# labels = label1 another_label a-third-label
1	This	This	_	_	_	_	_	_	_
2	is	is	_	_	_	_	_	_	_
3	a	a	_	_	_	_	_	_	_
4	simple	simple	_	_	_	_	_	_	_
5	sentence	sentence	_	_	_	_	_	_	_
6	.	.	PUNCT	PUNCT	_	_	_	_	_`,

labels_2: `# labels = one_label second third-label
# labels = row_2 again:here this, that
1	This	This	_	_	_	_	_	_	_`,

labels_3: `# tags = this-is-a-tag test testing test
1	This	This	_	_	_	_	_	_	_`,

labels_4: `# labels = new label1 one_label this-is-a-tag
1	Hullo	hello	_	_	_	_	_	_	_`,

nested_2: `# text = ab cde f h
1-2	ab	_	_	_	_	_	_	_	_
1	a	A	_	_	_	_	_	_	_
2	b	B	_	_	_	_	_	_	_
3-5	cde	_	_	_	_	_	_	_	_
3	c	C	_	_	_	_	_	_	_
4	d	D	_	_	_	_	_	_	_
5	e	E	_	_	_	_	_	_	_
6	f	F	_	_	_	_	_	_	_
6.1	silent_g	G	_	_	_	_	_	_	_
7	h	H	_	_	_	_	_	_	_`,

t: `# testing :)
1-3	He	_	_	_	_	_	_	_	_
1	boued	boued	n	_	m|sg	4	obj	_	_
2	e	e	vpart	_	obj	4	aux	_	_
3	tebr	debriñ	vblex	_	pri|p3|sg	0	root	_	_
4	doob	doobie	np	_	_	3	_	_	_
5	Mona	Mona	np	_	ant|f|sg	4	nsubj	_	_`,

empty: `1      Sue       Sue       _       _       _       _       _       _       _
2      likes     like       _       _       _       _       _       _       _
3      coffee    coffee       _       _       _       _       _       _       _
4      and       and       _       _       _       _       _       _       _
5      Bill      Bill       _       _       _       _       _       _       _
5.1    likes     like       _       _       _       _       _       _       _
6      tea       tea       _       _       _       _       _       _       _`,

0: `# sent_id = _
# text = this is a test
1	this	_	_	_	_	_	_	_	_
2	is	_	_	_	_	_	_	_	_
3	a	_	_	_	_	_	_	_	_
4	test	_	_	_	_	_	_	_	_`,

1: `1	this	_	_	_	_	_	_	_	_
2	is	_	_	_	_	_	_	_	_
3	a	_	_	_	_	_	_	_	_
4	test	_	_	_	_	_	_	_	_`,

cat_ancora: `# url = https://raw.githubusercontent.com/UniversalDependencies/UD_Catalan-AnCora/dev/ca_ancora-ud-test.conllu
# sent_id = test-s1
# text = El darrer número de l'Observatori del Mercat de Treball d'Osona inclou un informe especial sobre la contractació a través de les empreses de treball temporal, les ETT.
# orig_file_sentence 001#1
1	El	el	DET	DET	Definite=Def|Gender=Masc|Number=Sing|PronType=Art	3	det	_	_
2	darrer	darrer	ADJ	ADJ	Gender=Masc|Number=Sing|NumType=Ord	3	amod	_	_
3	número	número	NOUN	NOUN	Gender=Masc|Number=Sing	13	nsubj	_	_
4	de	de	ADP	ADP	AdpType=Prep	6	case	_	_
5	l'	el	DET	DET	Definite=Def|Number=Sing|PronType=Art	6	det	_	SpaceAfter=No
6	Observatori	Observatori	PROPN	PROPN	_	3	nmod	_	MWE=Observatori_del_Mercat_de_Treball_d'_Osona|MWEPOS=PROPN
7	del	del	ADP	ADP	AdpType=Preppron|Gender=Masc|Number=Sing	8	case	_	_
8	Mercat	Mercat	PROPN	PROPN	_	6	flat	_	_
9	de	de	ADP	ADP	AdpType=Prep	10	case	_	_
10	Treball	Treball	PROPN	PROPN	_	6	flat	_	_
11	d'	d'	ADP	ADP	AdpType=Prep	12	case	_	SpaceAfter=No
12	Osona	Osona	PROPN	PROPN	_	6	flat	_	_
13	inclou	incloure	VERB	VERB	Mood=Ind|Number=Sing|Person=3|Tense=Pres|VerbForm=Fin	0	root	_	_
14	un	un	NUM	NUM	Gender=Masc|Number=Sing|NumType=Card	15	nummod	_	_
15	informe	informe	NOUN	NOUN	Gender=Masc|Number=Sing	13	obj	_	_
16	especial	especial	ADJ	ADJ	Number=Sing	15	amod	_	_
17	sobre	sobre	ADP	ADP	AdpType=Prep	19	case	_	_
18	la	el	DET	DET	Definite=Def|Gender=Fem|Number=Sing|PronType=Art	19	det	_	_
19	contractació	contractació	NOUN	NOUN	Gender=Fem|Number=Sing	15	nmod	_	_
20	a	a	ADP	ADP	AdpType=Prep	24	case	_	MWE=a_través_de|MWEPOS=ADP
21	través	través	NOUN	NOUN	_	20	fixed	_	_
22	de	de	ADP	ADP	AdpType=Prep	20	fixed	_	_
23	les	el	DET	DET	Definite=Def|Gender=Fem|Number=Plur|PronType=Art	24	det	_	_
24	empreses	empresa	NOUN	NOUN	Gender=Fem|Number=Plur	19	nmod	_	_
25	de	de	ADP	ADP	AdpType=Prep	26	case	_	_
26	treball	treball	NOUN	NOUN	Gender=Masc|Number=Sing	24	nmod	_	_
27	temporal	temporal	ADJ	ADJ	Number=Sing	26	amod	_	SpaceAfter=No
28	,	,	PUNCT	PUNCT	PunctType=Comm	30	punct	_	_
29	les	el	DET	DET	Definite=Def|Gender=Fem|Number=Plur|PronType=Art	30	det	_	_
30	ETT	ETT	PROPN	PROPN	_	24	appos	_	SpaceAfter=No
31	.	.	PUNCT	PUNCT	PunctType=Peri	13	punct	_	_`,

with_tabs: `# sent_id = chapID01:paragID1:sentID1
# text = Кечаень сыргозтизь налкставтыця карвот .
# text[eng] = Kechai was awoken by annoying flies.
1	Кечаень	Кечай	N	N	Sem/Ant_Mal|Prop|SP|Gen|Indef	2	obj	_	Кечаень
2	сыргозтизь	сыргозтемс	V	V	TV|Ind|Prt1|ScPl3|OcSg3	0	root	_	сыргозтизь
3	налкставтыця	налкставтомс	PRC	Prc	V|TV|PrcPrsL|Sg|Nom|Indef	4	amod	_	налкставтыця
4	карвот	карво	N	N	Sem/Ani|N|Pl|Nom|Indef	2	nsubj	_	карвот
5	.	.	CLB	CLB	CLB	2	punct	_	.`,

without_tabs: `# sent_id = chapID01:paragID1:sentID1
# text = Кечаень сыргозтизь налкставтыця карвот .
# text[eng] = Kechai was awoken by annoying flies.
1 Кечаень Кечай N N Sem/Ant_Mal|Prop|SP|Gen|Indef 2 obj _ Кечаень
2 сыргозтизь сыргозтемс V V TV|Ind|Prt1|ScPl3|OcSg3 0 root _ сыргозтизь
3 налкставтыця налкставтомс PRC Prc V|TV|PrcPrsL|Sg|Nom|Indef 4 amod _ налкставтыця
4 карвот карво N N Sem/Ani|N|Pl|Nom|Indef 2 nsubj _ карвот
5 . . CLB CLB CLB 2 punct _ .`,

from_cg3_with_semicolumn: `1	Siedzieliśmy	siedzieć	vblex	_	impf|past|p1|m|pl	_	_	_	_
2	w	w	pr	_	_	_	_	_	_
3	moim	mój	prn	_	pos|mi|sg|loc	_	_	_	_
4	pokoju	pokój	n	_	mi|sg|loc	_	_	_	_
5	,	,	cm	_	_	_	_	_	_
6	paląc	palić	vblex	_	impf|pprs|adv	_	_	_	_
7	i	i	cnjcoo	_	_	_	_	_	_
8	rozmawiając	rozmawiać	vblex	_	impf|pprs|adv	_	_	_	_
9	o	o	pr	_	_	_	_	_	_
10	tem	to	prn	_	dem|mi|sg|loc	_	_	_	_
11	,	,	cm	_	_	_	_	_	_
12	jak	jak	rel	_	adv	_	_	_	_
13	marni	marny	adj	_	sint|mp|pl|nom	_	_	_	_
14	jesteśmy	być	vbser	_	pres|p1|pl	_	_	_	_
15	,	,	cm	_	_	_	_	_	_
16	marni	marny	adj	_	sint|mp|pl|nom	_	_	_	_
17	z	z	pr	_	_	_	_	_	_
18	lekarskiego	lekarski	adj	_	mi|sg|gen	_	_	_	_
19	punktu	punkt	n	_	mi|sg|gen	_	_	_	_
20	widzenia	widzieć	vblex	_	impf|ger|nt|sg|gen	_	_	_	_
21	chcę	chcieć	vblex	_	impf|pres|p1|sg	_	_	_	_
22	powiedzieć	powiedzieć	vblex	_	perf|inf	_	_	_	_
23	,	,	cm	_	_	_	_	_	_
24	naturalnie	naturalnie	adv	_	sint	_	_	_	_
25	.	.	sent	_	_	_	_	_	_`,

from_cg3_simple: `1	Патшамен	патша	n	_	ins	3	nmod	_	_
2	соғыс	соғыс	n	_	nom	3	obj	_	_
3	ашқанда	аш	v	_	tv|ger_past|loc	12	advcl	_	_
4	,	,	cm	_	_	12	punct	_	_
5	ел-жұрт	ел-жұрт	n	_	nom	7	conj	_	_
6	,	,	cm	_	_	7	punct	_	_
7	отанымды	отан	n	_	px1sg|acc	8	obj	_	_
8	қорғауға	қорға	v	_	tv|ger|dat	12	advcl	_	_
9	,	,	cm	_	_	12	punct	_	_
10	біз	біз	prn	_	pers|p1|pl|nom	12	nsubj	_	_
11	соғысқа	соғыс	n	_	dat	12	nmod	_	_
12	бардық	бар	v	_	iv|ifi|p1|pl	0	root	_	_
13	.	.	sent	_	_	12	punct	_	_
`,

from_cg3_with_spans: `# text = He boued e tebr Mona er gegin.
# text[eng] = Mona eats her food here in the kitchen.
# labels = press_1986 ch_syntax p_197 to_check
1	He	he	det	_	pos|f|sp	2	det	_	_
2	boued	boued	n	_	m|sg	4	obj	_	_
3	e	e	vpart	_	obj	4	aux	_	_
4	tebr	debriñ	vblex	_	pri|p3|sg	0	root	_	_
5	Mona	Mona	np	_	ant|f|sg	4	nsubj	_	_
6-7	er	_	_	_	_	_	_	_	_
6	_	e	pr	_	_	8	case	_	_
7	_	an	det	_	def|sp	8	det	_	_
8	gegin	kegin	n	_	f|sg	4	obl	_	_
9	.	.	sent	_	_	4	punct	_	_
`,

rueter_long: `# sent_id = BryzhinskijMixail_Kirdazht_manu:3859
# text = Но зярс валгсь , зярс панжтнесь ды мекев парсте пекстнесь веле кенкшенть , кужо кенкшенть , куро кенкшенть ды эсест юртс совамо кенкшенть эрьва лисицянтень совицянтень те свал тейнема , кенкштне свал пекстазь улезт ; панжтнесызь келес ансяк валске марто ды чопоньбелев — ракшань ливтема совавтома шкане , куймесь таго стакалгадсь .
# text_en = But by the time he got down the hill, opened and closed the village gate, the lane gate, the cluster gate and the one to their own home (something everyone coming or going had to do, so the gates would always be closed; they were only opened in the morning and at dusk for taking out and letting in the cattle), the wicker of clay had grown heavy again.
# text_fi = Kun Ketšai tuli mäeltä alas, avasi ja sulki huolellisesti kyläveräjänsä, ??aukio/kenttäveräjän, kujaveräjän ja oman kotiveräjän, savikontti ehti taas alkaa painaa hänen selkäänsä. (Kaikkien kävijöiden tulee tehdä näin, jotta veräjät olisivat aina kiinni, veräjäthän pidetään selkosen selällään vain aamulla ja illansuussa, kun karjaa ajetaan laitumelle tai kotiin.)
1 Но но CCONJ CC _ 3 cc _ _
2 зярс зярс ADV Adv|Der/Ill|Adv|Sem/Time Derivation=Ill|AdvType=Tim 3 mark _ _
3 валгсь валгомс VERB V|Ind|Prt1|ScSg3 Mood=Ind|Number[subj]=Sing|Person[subj]=3|Tense=Prt1 51 advcl _ SpaceAfter=No
4 , , PUNCT CLB _ 6 punct _ _
5 зярс зярс ADV Adv|Der/Ill|Adv|Sem/Time Derivation=Ill|AdvType=Tim 6 mark _ _
6 панжтнесь панжтнемс VERB V|Ind|Prt1|ScSg3 Mood=Ind|Number[subj]=Sing|Person[subj]=3|Tense=Prt1 3 conj _ _
7 ды ды CCONJ CC _ 10 cc _ _
8 мекев мекев ADV Adv|Lat|Sg|Nom|Indef Case=Lat|Case=Nom|Definite=Ind|Number=Sing 10 advmod _ _
9 парсте парсте ADV Adv|Manner AdvType=Man 10 advmod _ _
10 пекстнесь пекстнемс VERB V|Ind|Prt1|ScSg3 Mood=Ind|Number[subj]=Sing|Person[subj]=3|Tense=Prt1 3 conj _ _
11 веле веле NOUN N|Sem/Inanim_Cnt|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 10 obj _ _
12 кенкшенть кенкш NOUN N|Sem/Inanim_Cnt|Sg|Gen|Def Case=Gen|Definite=Def|Number=Sing 11 goeswith _ SpaceAfter=No
13 , , PUNCT CLB _ 15 punct _ _
14 кужо кужо NOUN N|Sem/Inanim_Cnt|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 12 conj _ _
15 кенкшенть кенкш NOUN N|Sem/Inanim_Cnt|Sg|Gen|Def Case=Gen|Definite=Def|Number=Sing 14 goeswith _ SpaceAfter=No
16 , , PUNCT CLB _ 18 punct _ _
17 куро куро NOUN N|Sem/Inanim_Cnt|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 12 conj _ _
18 кенкшенть кенкш NOUN N|Sem/Inanim_Cnt|Sg|Gen|Def Case=Gen|Definite=Def|Number=Sing 17 goeswith _ _
19 ды ды CCONJ CC _ 23 cc _ _
20 эсест эсь PRON Pron|Refl|Pl3|Gen|Variant=Short Case=Gen|Number=Plur|Person=3|PronType=Refl|Variant=Short 22 nmod _ _
21 юртс юрт NOUN N|Sem/Inanim_Cnt|SP|Ill|Indef Case=Ill|Definite=Ind|Number=Plur,Sing 20 case _ _
22 совамо совамо NOUN N|IV|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing|Valency=1 23 compound _ _
23 кенкшенть кенкш NOUN N|Sem/Inanim_Cnt|Sg|Gen|Def Case=Gen|Definite=Def|Number=Sing 12 conj _ _
24 ( ( PUNCT PUNCT _ 29 punct _ SpaceAfter=No
25 эрьва эрьва DET Det|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 26 det _ _
26 лисицянтень-совицянтень лисицят-совицят NOUN N|V|NomAg|Sg|Dat|Def Case=Dat|Definite=Def|Derivation=NomAg|Number=Sing 29 obl _ _
27 те те PRON Pron|Dem|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing|PronType=Dem 29 nsubj _ _
28 свал свал ADV Adv|Tot|Sem/Time_dur PronType=Tot|PronType=Tot 29 advmod _ _
29 тейнема тейнемc VERB V|TV|Oblig|Clitic=Cop|Prs|ScSg3 Valency=2|VerbForm=Oblig|Clitic=Cop|Number[subj]=Sing|Person[subj]=3|Tense=Pres 3 parataxis _ SpaceAfter=No
30 , , PUNCT CLB _ 33 punct _ _
31 кенкштне кенкш NOUN N|Sem/Inanim_Cnt|Pl|Nom|Def Case=Nom|Definite=Def|Number=Plur 34 nsubj _ _
32 свал свал ADV Adv|Tot|Sem/Time_dur PronType=Tot|PronType=Tot 33 advmod _ _
33 пекстазь пекстамс VERB V|Der/Озь|Ger Derivation=Ozj|VerbForm=Conv 29 ccomp _ _
34 улезт улемс AUX V|IV|Opt|ScPl3 Mood=Opt|Number[subj]=Plur|Person[subj]=3|Valency=1 33 cop _ SpaceAfter=No
35 ; ; PUNCT CLB _ 29 punct _ _
36 панжтнесызь панжтнемс VERB V|Ind|Prs|ScPl3|Obj3 Mood=Ind|Number[subj]=Plur|Person[subj]=3|Tense=Pres|Obj3 29 conj _ _
37 келес келес ADV Adv Adv 36 advmod _ _
38 ансяк ансяк ADV Adv Adv 39 advmod _ _
39 валске валске NOUN N|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 36 obl _ _
40 марто марто ADP Adp|Po AdpType=Post 39 case _ _
41 ды ды CCONJ CC _ 42 cc _ _
42 чопоньбелев чопоньбелев ADV Adv|Lat Case=Lat 39 conj _ _
43 — — PUNCT CLB _ 46 punct _ _
44 ракшань ракша NOUN N|Sem/Anim_Cnt|SP|Gen|Indef Case=Gen|Definite=Ind|Number=Plur,Sing 45 nmod:gobj _ _
45 ливтема-совавтома ливтема-совавтома NOUN N|Sg|Nom|Indef Case=Nom|Definite=Ind|Number=Sing 36 nmod _ _
46 шкане шка NOUN N|Sem/Time|SP|Temp|Indef Case=Temp|Definite=Ind|Number=Plur,Sing 39 conj _ SpaceAfter=No
47 ) ) PUNCT PUNCT _ 29 punct _ SpaceAfter=No
48 , , PUNCT CLB _ 29 punct _ _
49 куймесь куйме NOUN N|Sem/Inanim_Cnt|Sg|Nom|Def Case=Nom|Definite=Def|Number=Sing 51 nsubj _ _
50 таго таго ADV Adv|Sem/Time AdvType=Tim 51 advmod _ _
51 стакалгадсь стакалгадомс VERB V|Ind|Prt1|ScSg3 Mood=Ind|Number[subj]=Sing|Person[subj]=3|Tense=Prt1 0 root _ SpaceAfter=No
52 . . PUNCT CLB _ 51 punct _ _`,

katya_aplonova_large_arrows: `# sent_id = html/meyer_gorog-contes_bambara_10amadu_tara.dis.html:16
# text = ko ni i sera ka jiri nin bulu sòrò ka na ni a ye, ko cèkòròba bè se ka furakè o la.
1	ko	kó	PART	cop	_	4	discourse	_	Gloss=QUOT
2	ni	ní	SCONJ	conj	_	4	mark	_	Gloss=si
3	i	í	PRON	pers	PronType=Prs	4	nsubj	_	Gloss=2.SG
4	sera	sera	VERB	v	Aspect=Perf|Valency=1|Polarity=Pos	19	advcl	_	Gloss=arriver|Morf=arriver,PFV.INTR
5	ka	kà	AUX	pm	_	9	aux	_	Gloss=INF
6	jiri	jíri	NOUN	n	_	8	nmod:poss	_	Gloss=arbre
7	nin	nìn	DET	prn/dtm	PronType=Dem|Definite-Def	6	det	_	Gloss=DEM
8	bulu	búlu	NOUN	n	_	9	obj	_	Gloss=feuille
9	sòrò	sɔ̀rɔ	VERB	v	_	4	xcomp	_	Gloss=obtenir
10	ka	kà	AUX	pm	_	11	aux	_	Gloss=INF
11	na	nà	VERB	v	_	9	xcomp	_	Gloss=venir
12	ni	ní	ADP	conj/prep	_	13	case	_	Gloss=et
13	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	11	obl	_	Gloss=3SG
14	ye	yé	ADP	pp	_	13	case	_	Gloss=PP
15	,	,	PUNCT	_	_	4	punct	_	Gloss=,
16	ko	kó	PART	cop	_	19	discourse	_	Gloss=QUOT
17	cèkòròba	cɛ̀.kɔrɔ.ba	NOUN	n	_	19	nsubj	_	Gloss=vieillard|Morf=vieillard,mâle,vieux,AUGM
18	bè	bɛ́	AUX	pm	Polarity=Pos|Aspect=Imp	19	aux	_	Gloss=IPFV.AFF
19	se	sé	VERB	v	_	0	root	_	Gloss=arriver
20	ka	kà	AUX	pm	_	21	aux	_	Gloss=INF
21	furakè	fúra.kɛ	VERB	v	_	19	xcomp	_	Gloss=soigner|Morf=soigner,feuille,faire
22	o	ò	PRON	prn	_	21	obl	_	Gloss=ce
23	la	lá	ADP	pp	_	22	case	_	Gloss=dans
24	.	.	PUNCT	_	_	19	punct	_	Gloss=.
`,

katya_aplonova_long: `# sent_id = html/meyer_gorog-contes_bambara_10amadu_tara.dis.html:19
# text = ko u ye mògò nyini a ye, min bè a furakè sisan ko cè ye furakèli cogoya bèè fò, ko fura nin sòrò ka gèlèn ko epi ko ni o ye a sòrò u ye ale den de ye, ni min bè sa de furanyini fè a ka sa nin min bè balo o ka balo ko u kònòntò bèè ka taga fura nin nyini, ko u kònòntò bèè ka taga ko nin min seginna ka a sòrò fura ma na, ko a bè o den nin haramuya ka o gèn, ka a bè a ba fana gèn ko u ka a filè u yèrè ni min ma sòn fana ko a bè o gèn, o ni a ba bèè.
# label = too_long_to_cut
1	ko	kó	PART	cop	_	5	discourse	_	Gloss=QUOT
2	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	5	nsubj	_	Gloss=3PL
3	ye	yé	AUX	pm	Aspect=Perf|Valency=2|Polarity=Pos	5	aux	_	Gloss=PFV.TR
4	mògò	mɔ̀gɔ	NOUN	n	_	5	obj	_	Gloss=homme
5	nyini	ɲíni	VERB	v	_	0	root	_	Gloss=chercher
6	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	5	obl	_	Gloss=3SG
7	ye	yé	ADP	pp	_	6	case	_	Gloss=PP
8	,	,	PUNCT	_	_	5	punct	_	Gloss=,
9	min	mín	PRON	prn	PronType=Rel	_	_	_	Gloss=REL
10	bè	bɛ́	AUX	pm	Polarity=Pos|Aspect=Imp	_	_	_	Gloss=IPFV.AFF
11	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
12	furakè	fúra.kɛ	VERB	v	_	_	_	_	Gloss=soigner|Morf=soigner,feuille,faire
13	sisan	sísan	ADV	adv/n	_	_	_	_	Gloss=maintenant
14	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
15	cè	cɛ̀	NOUN	n	_	_	_	_	Gloss=mâle
16	ye	ye	AUX	pm	Aspect=Perf|Valency=2|Polarity=Pos	_	_	_	Gloss=PFV.TR
17	furakèli	fúrakɛli	NOUN	n	VerbalForm=Vnoun	_	_	_	Gloss=traitement|Morf=traitement,feuille,faire,NMLZ
18	cogoya	cógoya	NOUN	n	_	_	_	_	Gloss=manière|Morf=manière,manière,ABSTR
19	bèè	bɛ́ɛ	DET	dtm	_	_	_	_	Gloss=tout
20	fò	fɔ́	VERB	v	_	_	_	_	Gloss=dire
21	,	,	PUNCT	_	_	_	_	_	Gloss=,
22	ko	kó	PART	cop	_	27	discourse	_	Gloss=QUOT
23	fura	fúra	NOUN	n	_	25	nmod:poss	_	Gloss=feuille
24	nin	nìn	DET	dtm	PronType=Dem|Definite-Def	23	det	_	Gloss=DEM
25	sòrò	sɔ̀rɔ	NOUN	v	_	27	nsubj	_	Gloss=obtenir
26	ka	ka	AUX	pm	Polarity=Pos	27	aux	_	Gloss=QUAL.AFF
27	gèlèn	gɛ̀lɛn	VERB	vq	_	_	_	_	Gloss=dur
28	ko	kó	PART	cop	_	29	discourse	_	Gloss=QUOT
29	epi	epi	CCONJ	conj	_	27	cc	_	Gloss=ETRG.FRA
30	ko	kó	VERB	cop	_	37	discourse	_	Gloss=QUOT
31	ni	ní	SCONJ	conj	_	35	mark	_	Gloss=si
32	o	ò	PRON	prn	_	35	nsubj	_	Gloss=ce
33	ye	ye	AUX	pm	Aspect=Perf|Valency=2|Polarity=Pos	35	aux	_	Gloss=PFV.TR
34	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	35	obj	_	Gloss=3SG
35	sòrò	sɔ̀rɔ	VERB	v	_	37	advcl	_	Gloss=obtenir
36	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	37	nsubj	_	Gloss=3PL
37	ye	yé	VERB	cop	Polarity=Pos	27	parataxis	_	Gloss=EQU
38	ale	àlê	PRON	pers	PronType=Prs|Number=Sing|Person=3|PronType=Emp	39	nmod:poss	_	Gloss=3SG.EMPH
39	den	dén	NOUN	n	_	37	obl	_	Gloss=enfant
40	de	dè	PART	prt	_	39	discourse	_	Gloss=FOC
41	ye	yé	ADP	pp	_	39	case	_	Gloss=PP
42	,	,	PUNCT	_	_	37	punct	_	Gloss=,
43	ni	ní	SCONJ	conj	_	46	mark	_	Gloss=si
44	min	mîn	PRON	prn	PronType=Rel	46	_	_	Gloss=REL
45	bè	bɛ	AUX	pm	Polarity=Pos|Aspect=Imp	46	_	_	Gloss=IPFV.AFF
46	sa	sà	VERB	v	_	52	_	_	Gloss=mourir
47	de	dè	PART	prt	_	46	_	_	Gloss=FOC
48	furanyini	furaɲini	NOUN	n	_	46	_	_	Gloss=feuille|Morf=feuille,chercher
49	fè	fɛ̀	ADP	pp	_	48	_	_	Gloss=par
50	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	52	_	_	Gloss=3SG
51	ka	ka	AUX	pm	Mood=Subj|Polarity=Aff	52	_	_	Gloss=SBJV
52	sa	sà	VERB	v	_	37	_	_	Gloss=mourir
53	nin	ní	SCONJ	conj	_	56	mark	_	Gloss=quand
54	min	mîn	PRON	prn	PronType=Rel	56	_	_	Gloss=REL
55	bè	bɛ	AUX	pm	Polarity=Pos|Aspect=Imp	56	_	_	Gloss=IPFV.AFF
56	balo	bálo	VERB	v	_	59	_	_	Gloss=vivre
57	o	ò	PRON	prn	_	59	_	_	Gloss=ce
58	ka	ka	AUX	pm	Mood=Subj|Polarity=Aff	59	_	_	Gloss=SBJV
59	balo	bálo	VERB	v	_	52	_	_	Gloss=vivre
60	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
61	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	_	_	_	Gloss=3PL
62	kònòntò	kɔ̀nɔntɔn	NUM	num	_	_	_	_	Gloss=neuf
63	bèè	bɛ́ɛ	DET	dtm	_	_	_	_	Gloss=tout
64	ka	ka	AUX	pm	Mood=Subj|Polarity=Aff	_	_	_	Gloss=SBJV
65	taga	tága	VERB	v	_	59	_	_	Gloss=aller
66	fura	fúra	NOUN	n	_	_	_	_	Gloss=feuille
67	nin	nìn	DET	dtm	PronType=Dem|Definite-Def	_	_	_	Gloss=DEM
68	nyini	ɲíni	VERB	v	_	_	_	_	Gloss=chercher
69	,	,	PUNCT	_	_	_	_	_	Gloss=,
70	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
71	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	_	_	_	Gloss=3PL
72	kònòntò	kɔ̀nɔntɔn	NUM	num	_	_	_	_	Gloss=neuf
73	bèè	bɛ́ɛ	DET	dtm	_	_	_	_	Gloss=tout
74	ka	ka	AUX	pm	Mood=Subj|Polarity=Aff	_	_	_	Gloss=SBJV
75	taga	tága	VERB	v	_	65	_	_	Gloss=aller
76	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
77	nin	ní	SCONJ	conj	_	_	_	_	Gloss=quand
78	min	mîn	PRON	prn	PronType=Rel	_	_	_	Gloss=REL
79	seginna	seginna	VERB	v	Aspect=Perf|Valency=1|Polarity=Pos	85	_	_	Gloss=revenir|Morf=revenir,PFV.INTR
80	ka	kà	AUX	pm	_	_	_	_	Gloss=INF
81	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
82	sòrò	sɔ̀rɔ	VERB	v	_	_	_	_	Gloss=obtenir
83	fura	fúra	NOUN	n	_	_	_	_	Gloss=feuille
84	ma	ma	AUX	pm	Polarity=Neg|Aspect=Perf	_	_	_	Gloss=PFV.NEG
85	na	nà	VERB	v	_	75	_	_	Gloss=venir
86	,	,	PUNCT	_	_	_	_	_	Gloss=,
87	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
88	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
89	bè	bɛ	AUX	pm	Polarity=Pos|Aspect=Imp	_	_	_	Gloss=IPFV.AFF
90	o	ò	PRON	prn	_	_	_	_	Gloss=ce
91	den	dén	NOUN	n	_	_	_	_	Gloss=enfant
92	nin	nìn	DET	dtm	PronType=Dem|Definite-Def	_	_	_	Gloss=DEM
93	haramuya	hàramuya	VERB	v	_	85	_	_	Gloss=interdire|Morf=interdire,interdire,ABSTR
94	ka	kà	AUX	pm	_	_	_	_	Gloss=INF
95	o	ò	PRON	prn	_	_	_	_	Gloss=ce
96	gèn	gɛ́n	VERB	v	_	_	_	_	Gloss=chasser
97	,	,	PUNCT	_	_	_	_	_	Gloss=,
98	ka	kà	AUX	pm	_	_	_	_	Gloss=INF
99	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
100	bè	bɛ	AUX	pm	Polarity=Pos|Aspect=Imp	_	_	_	Gloss=IPFV.AFF
101	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
102	ba	bá	NOUN	n	_	_	_	_	Gloss=mère
103	fana	fána	PART	prt	_	_	_	_	Gloss=aussi
104	gèn	gɛ́n	VERB	v	_	_	_	_	Gloss=chasser
105	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
106	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	_	_	_	Gloss=3PL
107	ka	ka	AUX	pm	Mood=Subj|Polarity=Aff	_	_	_	Gloss=SBJV
108	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
109	filè	fílɛ	VERB	v	_	_	_	_	Gloss=regarder
110	u	ù	PRON	pers	PronType=Prs|Number=Plur|Person=3	_	_	_	Gloss=3PL
111	yèrè	yɛ̀rɛ̂	DET	dtm	_	_	_	_	Gloss=même
112	ni	ní	SCONJ	conj	_	_	_	_	Gloss=si
113	min	mîn	PRON	prn	PronType=Rel	_	_	_	Gloss=REL
114	ma	ma	AUX	pm	Polarity=Neg|Aspect=Perf	_	_	_	Gloss=PFV.NEG
115	sòn	sɔ̀n	VERB	v	_	_	_	_	Gloss=accepter
116	fana	fána	PART	prt	_	_	_	_	Gloss=aussi
117	ko	kó	PART	cop	_	_	_	_	Gloss=QUOT
118	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
119	bè	bɛ	AUX	pm	Polarity=Pos|Aspect=Imp	_	_	_	Gloss=IPFV.AFF
120	o	ò	PRON	prn	_	_	_	_	Gloss=ce
121	gèn	gɛ́n	VERB	v	_	_	_	_	Gloss=chasser
122	,	,	PUNCT	_	_	_	_	_	Gloss=,
123	o	ò	PRON	prn	_	_	_	_	Gloss=ce
124	ni	ni	CCONJ	conj	_	_	_	_	Gloss=et
125	a	à	PRON	pers	PronType=Prs|Number=Sing|Person=3	_	_	_	Gloss=3SG
126	ba	bá	NOUN	n	_	_	_	_	Gloss=mère
127	bèè	bɛ́ɛ	DET	dtm	_	_	_	_	Gloss=tout
128	.	.	PUNCT	_	_	_	_	_	Gloss=.`,

ud_example_tabs: `1	They	they	PRON	PRP	Case=Nom|Number=Plur	2	nsubj	2:nsubj|4:nsubj	_
2	buy	buy	VERB	VBP	Number=Plur|Person=3|Tense=Pres	0	root	0:root	_
3	and	and	CONJ	CC	_	4	cc	4:cc	_
4	sell	sell	VERB	VBP	Number=Plur|Person=3|Tense=Pres	2	conj	2:conj	_
5	books	book	NOUN	NNS	Number=Plur	2	obj	2:obj|4:obj	_
6	.	.	PUNCT	.	_	2	punct	2:punct	_`,

ud_example_spaces: `1    They     they    PRON    PRP    Case=Nom|Number=Plur               2    nsubj    2:nsubj|4:nsubj  _
2    buy      buy     VERB    VBP    Number=Plur|Person=3|Tense=Pres    0    root     0:root          _
3    and      and     CONJ    CC     _                                  4    cc       4:cc            _
4    sell     sell    VERB    VBP    Number=Plur|Person=3|Tense=Pres    2    conj     2:conj   _
5    books    book    NOUN    NNS    Number=Plur                        2    obj      2:obj|4:obj     _
6    .        .       PUNCT   .      _                                  2    punct    2:punct         _`,

ud_example_modified: `1	They	they	PRON	PRP	Case=Nom|Number=Plur	2	nsubj	2:nsubj|4:nsubj	_
2	buy	buy	VERB	VBP	Number=Plur|Person=3|Tense=Presroot	0	root	0:root	_
3	and	and	CONJ	CC	_	4	cc	4:cc	_
4	sell	sell	VERB	VBP	Number=Plur|Person=3|Tense=Presconj	2	_	2	_
5	books	book	NOUN	NNS	Number=Plur	2	obj	2:obj|4:obj	_
6	.	.	PUNCT	.	_	2	punct	2:punct	_`,
};

},{}],399:[function(require,module,exports){
(function (__dirname){
const path = require('path');

module.exports = {

  assorted: path.join(__dirname, 'assorted.conllu'),
  czech_train: path.join(__dirname, 'cs_cac-ud-train.conllu'),
  turkish_train: path.join(__dirname, 'tr_imst-ud-test.conllu'),

}

}).call(this,"/node_modules/notatrix/data/corpora")
},{"path":485}],400:[function(require,module,exports){
module.exports = {

  'apertium stream': require('./apertium-stream'),
  apertiumStream: require('./apertium-stream'),
  Brackets: require('./brackets'),
  brackets: require('./brackets'),
  CG3: require('./cg3'),
  cg3: require('./cg3'),
  'CoNLL-U': require('./conllu'),
  conllu: require('./conllu'),
  'notatrix serial': require('./notatrix-serial'),
  notatrixSerial: require('./notatrix-serial'),
  Params: require('./params'),
  params: require('./params'),
  'plain text': require('./plain-text'),
  plainText: require('./plain-text'),
  SD: require('./sd'),
  sd: require('./sd'),

  corpora: require('./corpora'),

};

},{"./apertium-stream":395,"./brackets":396,"./cg3":397,"./conllu":398,"./corpora":399,"./notatrix-serial":401,"./params":402,"./plain-text":403,"./sd":404}],401:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"dup":106}],402:[function(require,module,exports){
module.exports = {
	0: [
		{ form: 'hello' },
		{ form: 'world' }
	]
};

},{}],403:[function(require,module,exports){
module.exports = {
0: 'this is a test',
1: 'this is a test.',
2: 'this is a test...',
3: 'this is a test?',
4: '\tthis is a test',
5: 'More sentences = more data; ipso facto, yes.',
parens_and_numbers: `Дәүләтләрнең, шул исәптән Русиянең дә, диңгез чикләре ярдан 12 миль (яки 22,2 км) ераклыкта узуы килешенгән`,
};

},{}],404:[function(require,module,exports){
module.exports = {
0: `And Robert the fourth place .
cc(Robert, And)
orphan(Robert, place)
punct(Robert, .)
amod(place, fourth)
det(place, the)`,

1: `ROOT And Robert the fourth place .
root(ROOT, Robert)
cc(Robert, And)
orphan(Robert, place)
punct(Robert, .)
amod(place, fourth)
det(place, the)`,

2: `ROOT I love French fries .
root(ROOT, love)`,

// https://github.com/UniversalDependencies/docs/blob/pages-source/_u-dep/ccomp.md
ccomp_1: `He says that you like to swim
ccomp(says, like)
mark(like, that)`,

ccomp_2: `He says you like to swim
ccomp(says, like)`,

ccomp_3: `The boss said to start digging
ccomp(said, start)
mark(start, to)`,

ccomp_4: `We started digging
xcomp(started, digging)`,

ccomp_5: `The important thing is to keep calm.
ccomp(is, keep)
nsubj(is, thing)`,

ccomp_6: `The problem is that this has never been tried .
ccomp(is, tried)
nsubj(is, problem)`
};

},{}],405:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('./utils');
const ConverterError = utils.ConverterError;
const nx = require('./nx');

module.exports = (input, options) => {
  try {

    var sent = new nx.Sentence(input, options);
    sent.from = format => convert(sent.input, _.extend({
      interpretAs: format
    }, options));

    return sent;

  } catch (e) {

    if (e instanceof utils.ToolError || e instanceof utils.NxError)
      throw new ConverterError('FATAL: unable to convert: ' + e.message);

    throw e;
  }
};

},{"./nx":467,"./utils":481,"underscore":502}],406:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('./utils');
const DetectorError = utils.DetectorError;

let as = {

	'apertium stream': require('./formats/apertium-stream').detect,
  apertiumStream: require('./formats/apertium-stream').detect,
  Brackets: require('./formats/brackets').detect,
  brackets: require('./formats/brackets').detect,
  CG3: require('./formats/cg3').detect,
  cg3: require('./formats/cg3').detect,
  'CoNLL-U': require('./formats/conllu').detect,
  conllu: require('./formats/conllu').detect,
  'notatrix serial': require('./formats/notatrix-serial').detect,
  notatrixSerial: require('./formats/notatrix-serial').detect,
  Params: require('./formats/params').detect,
  params: require('./formats/params').detect,
  'plain text': require('./formats/plain-text').detect,
  plainText: require('./formats/plain-text').detect,
	SD: require('./formats/sd').detect,
  sd: require('./formats/sd').detect,

};

module.exports = (text, options) => {

  options = _.defaults(options, {
    suppressDetectorErrors: true,
		returnAllMatches: true,
		requireOneMatch: false,
  });

	const matches = utils.formats.map(format => {

		try {
			return as[format](text, options);
		} catch (e) {

			if (e instanceof DetectorError)
				return;

			throw e;
		}

	}).filter(utils.thin);

	if (!matches.length && !options.suppressDetectorErrors)
		throw new DetectorError('Unable to detect format', text, options);

	if (matches.length > 1 && !options.suppressDetectorErrors && options.requireOneMatch)
		throw new DetectorError('Detected multiple formats', text, options);

	return options.returnAllMatches ? matches : matches[0];
};
module.exports.as = as;

},{"./formats/apertium-stream":410,"./formats/brackets":417,"./formats/cg3":423,"./formats/conllu":429,"./formats/notatrix-serial":437,"./formats/params":444,"./formats/plain-text":451,"./formats/sd":458,"./utils":481,"underscore":502}],407:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (text, options) => {
  throw new DetectorError('not implemented');
};

},{"../../utils":481}],408:[function(require,module,exports){
module.exports = null;

},{}],409:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;

module.exports = (text, options) => {
  //throw new GeneratorError('not implemented');
};

},{"../../utils":481}],410:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'apertium stream',
  fields: require('./fields'),
  split: require('./splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"./detector":407,"./fields":408,"./generator":409,"./parser":411,"./splitter":412}],411:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const ParserError = utils.ParserError;

module.exports = (text, options) => {
  //throw new ParserError('not implemented');
};

},{"../../utils":481}],412:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const SplitterError = utils.SplitterError;

module.exports = (text, options) => {
  //throw new SplitterError('not implemented', text, options);
};

},{"../../utils":481}],413:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: false,
    allowTrailingWhitespace: true,
    allowLeadingWhitespace: true,
    allowNoDependencies: false,
    allowNewlines: false,
  });

  if (!text && !options.allowEmptyString)
    throw new DetectorError('Illegal Brackets: empty string', text, options);

  if (utils.isJSONSerializable(text))
    throw new DetectorError('Illegal Brackets: JSON object', text, options);

  if (/\n/.test(text) && !options.allowNewlines)
    throw new DetectorError('Illegal Brackets: contains newlines', text, options);

  // internal stuff
  let parsing = null;
  let depth = 0;
  let sawBracket = false;

  text.split('').forEach((char, i) => {

    switch (char) {

      case ('['):
        if (parsing === ']')
          throw new DetectorError('Illegal Brackets: invalid sequence "]["', text, options);

        sawBracket = true;
        depth += 1;
        break;

      case (']'):
        if (parsing === '[')
          throw new DetectorError('Illegal Brackets: invalid sequence "[]"', text, options);

        sawBracket = true;
        depth -= 1;
        break;

      case (' '):
      case ('\t'):
      case ('\n'):

        if (!options.allowLeadingWhitespace) {
          if (parsing !== null && !utils.re.whitespace.test(parsing))
            throw new DetectorError('Illegal Brackets: contains leading whitespace', text, options);
        }
        break;
    }

    parsing = char;
  });

  if (!sawBracket && !options.allowNoDependencies)
    throw new DetectorError('Illegal Brackets: contains no dependencies', text, options);

  if (depth !== 0)
    throw new DetectorError('Illegal Brackets: bracket mismatch', text, options);

  if (utils.re.whitespace.test(parsing) && !options.allowTrailingWhitespace)
    throw new DetectorError('Illegal Brackets: contains trailing whitespace', text, options);

  return 'Brackets';
};

},{"../../utils":481,"underscore":502}],414:[function(require,module,exports){
module.exports = [
  'form',
  'heads',
];
module.exports.hasComments = false;

},{}],415:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')

module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  if (!sent.root)
    throw new GeneratorError('Unable to generate, could not find root');

  // build the tree structure
  let seen = new Set([ sent.root ]);
  let root = {
    token: sent.root,
    deprel: null,
    deps: [],
  };

  const visit = node => {
    node.token.mapDependents(dep => {

      if (seen.has(dep.token))
        throw new GeneratorError('Unable to generate, dependency structure non-linear');

      dep.deps = [];
      node.deps.push(dep);
      seen.add(dep.token);
      visit(dep);

    });
  }
  visit(root);

  //console.log(root);

  if (seen.size < sent.size + 1)
    throw new GeneratorError('Unable to generate, sentence not fully connected');

  // parse the tree into a string
  let output = '';
  const walk = node => {

    output += '[' + (node.deprel || '_') + ' ';

    node.deps.forEach(dep => {
      if (dep.token.indices.absolute < node.token.indices.absolute)
        walk(dep);
    });

    output += ' ' + node.token.form + ' ';

    node.deps.forEach(dep => {
      if (dep.token.indices.absolute > node.token.indices.absolute)
        walk(dep);
    });

    output += ' ] ';
  }
  root.deps.forEach(dep => walk(dep));

  // clean up the output
  output = output
    .replace(/\s+/g, ' ')
    .replace(/ \]/g, ']')
    .replace(/\[ /g, '[')
    .replace(/(\w)_(\w)/, '$1 $2')
    .trim();

  // console.log(output);

  return {
    output: output,
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":416,"underscore":502}],416:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  if (serial.comments.length)
    losses.add('comments');

  serial.tokens.forEach(token => {
    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
        case ('deps'):
          break;

        case ('heads'):
          if (token.heads.length > 1)
            losses.add(field);
          break;

        case ('feats'):
        case ('misc'):
          if (token[field] && token[field].length)
            losses.add(field);
          break;

        default:
          if (token[field])
            losses.add(field);
      }
    })

  });

  return Array.from(losses);
};

},{"../../utils":481,"./fields":414,"underscore":502}],417:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'Brackets',
  fields: require('./fields'),
  split: require('../default-splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"../default-splitter":431,"./detector":413,"./fields":414,"./generator":415,"./parser":418}],418:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (text, options) => {

  //console.log();
  //console.log(text);

  options = _.defaults(options, {
    allowEmptyString: false,
  });

  try {
    detect(text, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  class Sentence {
    constructor(text, options) {
      this.input = text;
      this.options = options;
      this.parent = null;
      this.root = [];
      this.comments = [];
    }

    serialize() {

      this.root.index(0);

      return {
        input: this.input,
        options: this.options,
        comments: this.comments,
        tokens: this.root.serialize([])
      };
    }

    push(token) {
      this.root = token;
    }
  }

  class Token {
    constructor(parent) {
      this.parent = parent;

      this.deprel = null;
      this.before = [];
      this.words  = [];
      this.after  = [];
    }

    eachBefore(callback) {
      for (let i=0; i<this.before.length; i++) {
        callback(this.before[i], i);
      }
    }

    eachAfter(callback) {
      for (let i=0; i<this.after.length; i++) {
        callback(this.after[i], i);
      }
    }

    index(num) {
      this.eachBefore(before => {
        num = before.index(num);
      });
      this.num = ++num;
      this.eachAfter(after => {
        num = after.index(num)
      });

      return num;
    }

    serialize(tokens) {

      this.eachBefore(before => {
        before.serialize(tokens);
      });

      tokens.push({
        form: this.form,
        heads: [{
          index: this.parent.num || 0,
          deprel: this.deprel,
        }],
        index: this.num,
      });

      this.eachAfter(after => {
        after.serialize(tokens);
      });

      return tokens;
    }

    get form() {
      return this.words.join('_');
    }

    push(token) {
      if (this.words.length) {
        this.after.push(token);
      } else {
        this.before.push(token);
      }
    }

    addWord(word) {
      if (!word)
        return;

      if (this.deprel) {
        this.words.push(word);
      } else {
        this.deprel = word;
      }
    }
  }

  let sent = new Sentence(text, options),
    parsing = sent,
    parent = null,
    word = '';

  _.each(text, char => {
    switch (char) {
      case ('['):
        parent = parsing;
        parsing = new Token(parent);
        if (parent && parent.push)
          parent.push(parsing)
        word = '';
        break;

      case (']'):
        if (parsing.addWord)
          parsing.addWord(word);
        parsing = parsing.parent;
        parent = parsing.parent;
        word = '';
        break;

      case (' '):
        if (parsing.addWord)
          parsing.addWord(word);
        word = '';
        break;

      default:
        word += char;
        break;
    }
  });

  //console.log(sent.serialize())
  return sent.serialize();
};

},{"../../utils":481,"./detector":413,"underscore":502}],419:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: false,
    allowTrailingWhitespace: true,
    allowLeadingWhitespace: true
  });

  if (!text && !options.allowEmptyString)
    throw new DetectorError('Illegal CG3: empty string', text, options);

  if (utils.isJSONSerializable(text))
    throw new DetectorError('Illegal CG3: JSON object', text, options);

  // internal stuff
  let parsing = null;

  // iterate over the lines and check each one
  text.split(/\n/).forEach(line => {

    if (utils.re.whiteline.test(line)) {

      if (parsing === null) {

        if (!options.allowLeadingWhitespace)
          throw new DetectorError('Illegal CG3: contains leading whitespace', text, options);

      } else {

        if (parsing !== 'token-body' || !options.allowTrailingWhitespace)
          throw new DetectorError('Illegal CG3: contains trailing whitespace', text, options);

      }

      parsing = 'whitespace';

    } else if (utils.re.comment.test(line)) {

      if ( parsing === 'token-start'
        || parsing === 'token-body')
        throw new DetectorError(`Illegal CG3: invalid sequence ${parsing}=>comment`, text, options);

      parsing = 'comment';

    } else if (utils.re.cg3TokenStart.test(line)) {

      if (parsing === 'token-start')
        throw new DetectorError(`Illegal CG3: invalid sequence ${parsing}=>token-start`, text, options);

      parsing = 'token-start';

    } else if (utils.re.cg3TokenContent.test(line)) {

      if ( parsing === 'comment'
        || parsing === 'whitespace')
        throw new DetectorError(`Illegal CG3: invalid sequence ${parsing}=>token-body`, text, options);

      parsing = 'token-body';

    } else {

      throw new DetectorError(`Illegal CG3: unmatched line`, text, options);

    }
  });

  return 'CG3';
};

},{"../../utils":481,"underscore":502}],420:[function(require,module,exports){
module.exports = [
  'semicolon',
  'index',
  'form',
  'lemma',
  'heads',
  'xpostag',
  'other',
  'analyses',
];
module.exports.hasComments = true;

},{}],421:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')

module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {
    omitIndices: false,
    allowMissingLemma: true,
  });

  sent.index();

  let lines = [];
  sent.comments.forEach(comment => lines.push('# ' + comment.body));
  sent.tokens.forEach(token => {

    const push = (token, indent) => {

      if (!token.lemma && !options.allowMissingLemma)
        throw new GeneratorError(`Unable to generate, token has no lemma`, sent, options);

      indent = (token.semicolon ? ';' : '') + '\t'.repeat(indent);

      const head = token.heads.first;
      const dependency = options.omitIndices
        ? null
        : '#' + token.indices.cg3 + '->' + (head == undefined ? '' : head.token.indices.cg3);

      let line = [ `"${token.lemma || '_'}"` ]
        .concat(token.xpostag || token.upostag)
        .concat((token._feats || []).join(' '))
        .concat((token._misc || []).join(' '))
        .concat(head && head.deprel ? '@' + head.deprel : null)
        .concat(dependency);

      line = indent + line.filter(utils.thin).join(' ');
      lines.push(line);
    };

    lines.push(`"<${token.form || utils.fallback}>"`);

    if (token._analyses && token._analyses.length) {

      token._analyses.forEach(analysis => {
        analysis.subTokens.forEach((subToken, i) => {

          push(subToken, i+1);

        });
      });

    } else {

      push(token, 1);

    }

  });

  return {
    output: lines.join('\n'),
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":422,"underscore":502}],422:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  const tokenCalcLoss = token => {
    if (token.heads && token.heads.length > 1)
      losses.add('enhanced dependencies');

    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
        case ('deps'):
        case ('feats'):
        case ('misc'):
          break;

        case ('upostag'):
          if (token.xpostag && token.upostag)
            losses.add(field);
          break;

        case ('isEmpty'):
          if (token.isEmpty)
            losses.add(field);
          break;

        default:
          losses.add(field);
      }
    });
  };

  serial.tokens.map(token => {

    tokenCalcLoss(token);

    (token.analyses || []).forEach(analysis => {

      const analysisKeys = Object.keys(analysis);
      if (analysisKeys.length > 1 || analysisKeys[0] !== 'subTokens') {
        losses.add('analyses');
      } else {
        analysis.subTokens.map(subToken => {

          tokenCalcLoss(subToken);

          if (subToken.form != undefined)
            losses.add('form');

        });
      }

    });
  });

  return Array.from(losses);
};

},{"../../utils":481,"./fields":420,"underscore":502}],423:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'CG3',
  fields: require('./fields'),
  split: require('../default-splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"../default-splitter":431,"./detector":419,"./fields":420,"./generator":421,"./parser":424}],424:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (text, options) => {

  function getIndentNum(str, options) {

    const count = (str, reg) => str.match(reg).length;

    if (options.indentString) {

      const regex = options.indentString instanceof RegExp
        ? options.indentString
        : new RegExp(options.indentString, 'g');

      return count(str, regex);

    } else if (options.useTabIndent) {

      return count(str, /\t/g);

    } else if (options.spacesPerTab) {

      const regex = new RegExp(` {${options.spacesPerTab}}`, 'g');
      return count(str, regex);

    } else if (options.equalizeWhitespace) {

      return count(str, /\s/g);

    } else {
      throw new ParserError('can\'t get the indent number, insufficient options set', text, options);

    }
  }

  options = _.defaults(options, {
    allowEmptyString: false,
    indentString: null,
    useTabIndent: false,
    spacesPerTab: null,
    equalizeWhitespace: true,
    coerceMultipleSpacesAfterSemicolonToTab: true,
    allowMissingIndices: true,
  });

  try {
    detect(text, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  //console.log();
  //console.log(text);

  // "tokenize" into chunks
  let i = 0, chunks = [];
  while (i < text.length) {

    const remains = text.slice(i),
      whiteline = remains.match(utils.re.whiteline),
      comment = remains.match(utils.re.comment),
      tokenStart = remains.match(utils.re.cg3TokenStart),
      tokenContent = remains.match(utils.re.cg3TokenContent);

    if (whiteline) {

      i += whiteline[0].length;

    } else if (comment) {

      chunks.push({
        type: 'comment',
        body: comment[2]
      });
      i += comment[1].length;

    } else if (tokenStart) {

      chunks.push({
        type: 'form',
        form: tokenStart[1]
      });
      i += tokenStart[0].length;

      while (utils.re.whitespace.test(text[i]) && text[i] !== '\n')
        i++;
      i++;

    } else if (tokenContent) {

      // some real BS right here, overfitting my data hard
      const indent = options.coerceMultipleSpacesAfterSemicolonToTab
        ? !!tokenContent[1]
          ? tokenContent[2].replace(/ +/, '\t')
          : tokenContent[2]
        : tokenContent[2];

      let chunk = {
        type: 'content',
        semicolon: !!tokenContent[1],
        indent: getIndentNum(indent, options),
        lemma: tokenContent[3],
        misc: [],
      };

      const deprel = tokenContent[5].match(utils.re.cg3Deprel);

      tokenContent[5].split(/\s+/).filter(utils.thin).forEach(subChunk => {

        let dependency = subChunk.match(utils.re.cg3Dependency),
          head = subChunk.match(utils.re.cg3Head),
          index = subChunk.match(utils.re.cg3Index),
          misc = subChunk.match(utils.re.cg3Other);

        if (dependency && (head || index)) {

          if (head) {

            if (chunk.heads)
              throw new ParserError('unexpected subChunk, heads already set', text, options);

            head = parseInt(head[1]);

            if (!isNaN(head))
              chunk.heads = [{
                index: head,
                deprel: deprel && deprel[1] ? deprel[1] : null,
              }];

          } else if (index) {

            if (chunk.index)
              throw new ParserError('unexpected subChunk, index already set', text, options);

            chunk.index = parseInt(index[1]);

          }

        } else if (misc) {

          if (!misc[0].startsWith('@'))
            chunk.misc.push(misc[0]);

        }
      });

      if (deprel && deprel[1] && !chunk.heads)
        chunk.misc.push('@' + deprel[1]);

      chunks.push(chunk);
      i += tokenContent[0].length;

    } else {
      throw new ParserError(`unable to match remains: ${remains}`, text, options);

    }
  }

  //console.log(chunks);

  // turn the chunks into tokens and comments
  let tokens = [];
  let comments = [];
  let expecting = ['comment', 'form'];
  let token = null;
  let analysis = null;
  let missingIndices = false;

  chunks.forEach(chunk => {

    if (expecting.indexOf(chunk.type) === -1)
      throw new ParserError(`expecting ${expecting.join('|')}, got ${chunk.type}`, text, options);

    if (chunk.type === 'comment') {

      comments.push(chunk.body);
      expecting = ['comment', 'form'];
      token = null;
      analysis = null;

    } else if (chunk.type === 'form') {

      if (analysis)
        token.analyses.push(analysis);

      if (token) {
        if (token.analyses.length === 1 && token.analyses[0].subTokens.length === 1)
          token = _.omit(_.extend(token, token.analyses[0].subTokens[0]), 'analyses');

        tokens.push(_.omit(token, 'currentIndent'));
      }

      token = {
        form: chunk.form,
        currentIndent: 0,
        analyses: [],
      };
      analysis = null;

      expecting = ['content'];

    } else if (chunk.type === 'content') {

      if (!token)
        throw new ParserError('cannot parse content chunk without a token', text, options);

      if (chunk.indent > token.currentIndent + 1)
        throw new ParserError(`invalid indent change (${token.currentIndent}=>${chunk.indent})`, text, options)

      if (chunk.indent === 1) {
        if (analysis)
          token.analyses.push(analysis);

        if (chunk.index === undefined) {
          if (!options.allowMissingIndices)
            throw new ParserError('cannot parse token without index', text, options);

          missingIndices = true;

        } else {
          if (missingIndices)
            throw new ParserError('cannot parse partially indexed CG3', text, options);
        }

        analysis = {
          subTokens: [
            {
              semicolon: chunk.semicolon,
              lemma: chunk.lemma || null,
              heads: chunk.heads || null,
              index: chunk.index || null,
              xpostag: chunk.misc.shift() || null,
              misc: chunk.misc || null,
            }
          ]
        };
      } else {
        if (!analysis)
          throw new ParserError('cannot parse content chunk without an analysis', text, options);

        if (chunk.index === undefined && !options.allowMissingIndices)
          throw new ParserError('cannot parse token without index', text, options);

        analysis.subTokens.push({
          semicolon: chunk.semicolon,
          lemma: chunk.lemma || null,
          heads: chunk.heads || null,
          index: chunk.index || null,
          xpostag: chunk.misc.shift() || null,
          misc: chunk.misc || null,
        });

      }

      token.currentIndent = chunk.indent;
      expecting = ['content', 'form'];

    } else {
      throw new ParserError(`unrecognized chunk type: ${chunk.type}`, text, options);

    }

  });

  if (analysis)
    token.analyses.push(analysis);

  if (token) {
    if (token.analyses.length === 1 && token.analyses[0].subTokens.length === 1)
      token = _.omit(_.extend(token, token.analyses[0].subTokens[0]), 'analyses');

    tokens.push(_.omit(token, 'currentIndent'));
  }

  if (missingIndices) {

    let index = 0;
    tokens.forEach(token => {
      if (token.analyses) {
        token.analyses.forEach(analysis => {
          analysis.subTokens.forEach(subToken => {
            subToken.index = ++index;
          });
        });
      } else {
        token.index = ++index;
      }
    });

  }

  //console.log(comments);
  //console.log(tokens);

  return {
    input: text,
    options: options,
    comments: comments,
    tokens: tokens,
  };
};

},{"../../utils":481,"./detector":419,"underscore":502}],425:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;


module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: false,
    requireTenParams: false,
    allowTrailingWhitespace: true,
  });

  if (!text && !options.allowEmptyString)
    throw new DetectorError(`Illegal CoNLL-U: empty string`, text, options);

  if (utils.isJSONSerializable(text))
    throw new DetectorError(`Illegal CoNLL-U: JSON object`, text, options);

  // be more or less strict about the fields we require being set
  const tokenLine = options.requireTenParams
    ? utils.re.conlluTokenLineTenParams
    : utils.re.conlluTokenLine;

  // internal stuff
  let doneComments = false;
  let doneContent = false;

  // iterate over the lines and check each one
  const lines = text.split(/\n/);
  lines.forEach((line, i) => {

    if (utils.re.comment.test(line)) {

      // can only have comments at the beginning
      if (doneComments)
        throw new DetectorError(`Illegal CoNLL-U: misplaced comment`, text, options);

    } else {

      // done parsing comments
      doneComments = true;

      if (line) {
        if (!tokenLine.test(line))
          throw new DetectorError(`Illegal CoNLL-U: unmatched line`, text, options);

        if (doneContent)
          throw new DetectorError(`Illegal CoNLL-U: misplaced whitespace`, text, options);

      } else {

        // only allow empty lines after we've looked at all the content
        if (!options.allowTrailingWhitespace)
          throw new DetectorError(`Illegal CoNLL-U: contains trailing whitespace`, text, options);

        doneContent = true;
      }

    }
  });

  return 'CoNLL-U';
};

},{"../../utils":481,"underscore":502}],426:[function(require,module,exports){
module.exports = [
  'isEmpty',
  'index',
  'form',
  'lemma',
  'upostag',
  'xpostag',
  'feats',
  'heads',
  'misc',
  'subTokens',
];
module.exports.hasComments = true;

},{}],427:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')


module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  let lines = [];
  sent.comments.forEach(comment => {
    lines.push('# ' + comment.body);
  });
  sent.tokens.forEach(token => {

    const toString = token => {

      const head = token.heads.first;

      return [

        token.indices.conllu,
        token.form || utils.fallback,
        token.lemma || utils.fallback,
        token.upostag || utils.fallback,
        token.xpostag || utils.fallback,
        token.feats || utils.fallback,
        head ? head.token.indices.conllu : utils.fallback,
        head && head.deprel ? head.deprel : utils.fallback,
        token._getDeps('CoNLL-U').join('|') || utils.fallback,
        token.misc || utils.fallback,

      ].join('\t');
    };

    lines.push(toString(token));
    token.subTokens.forEach(subToken => {
      lines.push(toString(subToken));
    });
  });

  return {
    output: lines.join('\n'),
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":428,"underscore":502}],428:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  const tokenCalcLoss = token => {

    if (token.heads.length > 1 && !sent.options.enhanced)
      losses.add('enhanced dependencies');

    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
        case ('other'):
          break;

        case ('analyses'):
          if (token.analyses.length > 1) {
            losses.add('analyses');
          } else {

            const analysis = token.analyses[0],
              analysisKeys = Object.keys(analysis);

            if (analysisKeys.length > 1 || analysisKeys[0] !== 'subTokens') {
              losses.add('analyses');
            } else {
              analysis.subTokens.map(tokenCalcLoss);
            }
          }
          break;

        default:
          losses.add(field);
      }
    });
  };

  serial.tokens.map(tokenCalcLoss);

  return Array.from(losses);
};

},{"../../utils":481,"./fields":426,"underscore":502}],429:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'CoNLL-U',
  fields: require('./fields'),
  split: require('../default-splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

/*
{
  semicolon: Boolean || undefined,
  isEmpty: Boolean || undefined,
  index: String || undefined,
  form: String || null || undefined,
  lemma: String || null || undefined,
  upostag: String || null || undefined,
  xpostag: String || null || undefined,
  feats: String || null || undefined,
  head: String || null || undefined,
  deprel: String || null || undefined,
  deps: String || null || undefined,
  other: Array || undefined,
  analyses: [
    subTokens: [
      semicolon: Boolean || undefined,
      isEmpty: Boolean || undefined,
      index: String || undefined,
      form: String || null || undefined,
      lemma: String || null || undefined,
      upostag: String || null || undefined,
      xpostag: String || null || undefined,
      feats: String || null || undefined,
      head: String || null || undefined,
      deprel: String || null || undefined,
      deps: String || null || undefined,
      other: Array || undefined,
    ]
  ]
}
*/

},{"../default-splitter":431,"./detector":425,"./fields":426,"./generator":427,"./parser":430}],430:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (text, options) => {

  function assertNext(supStr, subStr) {

    function parseIndex(str) {

      const match = (str || '').match(utils.re.conlluEmptyIndex);
      if (!match)
        return null;

      return match[2]
        ? {
            major: parseInt(match[1]),
            minor: parseInt(match[2]),
          }
        : {
            major: parseInt(match[1]),
            minor: null,
          };
    }

    if (supStr === null)
      return;

    const sup = parseIndex(supStr),
      sub = parseIndex(subStr);

    if (sub.minor === null) {
      if (sub.major - sup.major !== 1)
        throw new ParserError(`unexpected token index (at: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor}, got: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor})`);

    } else if (sup.minor === null) {
      if (sub.minor !== 1)
        throw new ParserError(`unexpected token index (at: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor}, got: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor})`);

    } else {
      if (sub.minor - sup.minor !== 1)
        throw new ParserError(`unexpected token index (at: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor}, got: ${sup.major}${sup.minor === null ? '' : '.' + sup.minor})`);

    }
  }

  options = _.defaults(options, {
    allowEmptyString: false,
    requireTenParams: false,
    allowWhiteLines: true,
  });

  try {
    detect(text, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  //console.log();
  //console.log(text);

  // "tokenize" into chunks
  let i = 0, chunks = [];
  const lines = text.split('\n');
  const tokenRegex = options.requireTenParams
    ? utils.re.conlluTokenLineTenParams
    : utils.re.conlluTokenLine;

  lines.forEach(line => {
    const whiteline = line.match(utils.re.whiteline),
      comment = line.match(utils.re.comment),
      tokenLine = line.match(tokenRegex);

    if (whiteline) {

    } else if (comment) {

      chunks.push({
        type: 'comment',
        body: comment[2]
      });

    } else if (tokenLine) {

      let token;

      let fields = tokenLine[7];
      if (/(\t|[ ]{2,})/g.test(fields)) {

        fields = fields.replace(/[ ]{2,}/g, '\t').split(/\t/g).filter(utils.thin);

      } else {

        fields = fields.split(/[\t ]+/g).filter(utils.thin);

      }

      if (tokenLine[4]) {

        token = {
        	type: 'super-token',
          index: tokenLine[1],
        	startIndex: tokenLine[2],
        	stopIndex: tokenLine[5],
        	form: utils.re.fallback.test(fields[0]) ? null : fields[0],
        	misc: utils.re.fallback.test(fields[8]) ? null : fields[8].split('|'),
        };

      } else {

        function getHeads(head, deprel, deps) {

          head = utils.re.fallback.test(head) ? null : head;
          deprel = utils.re.fallback.test(deprel) ? null : deprel;
          deps = utils.re.fallback.test(deps) ? null : deps;

          let heads = [];
          let seen = new Set();

          if (!head)
            return null;

          heads.push({
            index: head,
            deprel: deprel || null,
          });

          seen.add(head);

          if (deps)
            deps.split('|').forEach(dep => {

              dep = dep.split(':');

              if (!seen.has(dep[0]))
                heads.push({
                  index: dep[0],
                  deprel: dep[1] || null,
                });

              seen.add(dep[0]);
            });

          return heads;
        }

        token = {
        	type: 'token',
          index: tokenLine[1],
        	isEmpty: !!tokenLine[3],
        	form: !fields[0] || utils.re.fallback.test(fields[0])
            ? null
            : fields[0],
        	lemma: !fields[1] || utils.re.fallback.test(fields[1])
            ? null
            : fields[1],
        	upostag: !fields[2] || utils.re.fallback.test(fields[2])
            ? null
            : fields[2],
        	xpostag: !fields[3] || utils.re.fallback.test(fields[3])
            ? null
            : fields[3],
        	feats: !fields[4] || utils.re.fallback.test(fields[4])
            ? null
            : fields[4].split('|'),
          heads: getHeads(fields[5], fields[6], fields[7]),
        	misc: !fields[8] || utils.re.fallback.test(fields[8])
            ? null
            : fields[8].split('|'),
        };

      }
      chunks.push(token);

    } else {
      throw new ParserError(`unable to match line: ${line}`, text, options);

    }

  });

  //console.log(chunks);

  let tokens = [];
  let comments = [];
  let expecting = ['comment', 'super-token', 'token'];
  let superToken = null;

  chunks.filter(utils.thin).forEach(chunk => {

    if (expecting.indexOf(chunk.type) === -1)
      throw new ParserError(`expecting ${expecting.join('|')}, got ${chunk.type}`, text, options);

    if (chunk.type === 'comment') {

      comments.push(chunk.body);
      expecting = ['comment', 'super-token', 'token'];

    } else if (chunk.type === 'super-token') {

      superToken = {
        form: chunk.form,
        misc: chunk.misc,
        analyses: [{
          subTokens: []
        }],
        index: chunk.index,
        currentIndex: null,
        stopIndex: chunk.stopIndex
      };

      expecting = ['token'];

    } else if (chunk.type === 'token') {

      if (superToken) {

        assertNext(superToken.currentIndex, chunk.index);
        superToken.currentIndex = chunk.index;

        superToken.analyses[0].subTokens.push(_.omit(chunk, ['type']));

        if (superToken.currentIndex === superToken.stopIndex) {

          tokens.push(_.omit(superToken, ['currentIndex', 'stopIndex']));
          superToken = null;
          expecting = ['super-token', 'token'];

        } else {
          expecting = ['token'];
        }

      } else {

        tokens.push(_.omit(chunk, ['type']));
        expecting = ['super-token', 'token'];

      }

    } else {
      throw new ParserError(`unrecognized chunk type: ${chunk.type}`, text, options);

    }
  });

  //console.log(comments);
  //console.log(tokens);

  return {
    input: text,
    options: options,
    comments: comments,
    tokens: tokens,
  };
};

},{"../../utils":481,"./detector":425,"underscore":502}],431:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const utils = require('../utils');

module.exports = (text, options={}) => {

  options = _.defaults(options, {
    trimChunks: true
  });

  return text.split(utils.re.multiNewlines).map(chunk => {
    if (options.trimChunks) {
      return chunk.trim();
    } else {
      return chunk;
    }
  }).filter(utils.thin);
};

},{"../utils":481,"underscore":502}],432:[function(require,module,exports){
module.exports = {

  'apertium stream': require('./apertium-stream'),
  apertiumStream: require('./apertium-stream'),
  Brackets: require('./brackets'),
  brackets: require('./brackets'),
  CG3: require('./cg3'),
  cg3: require('./cg3'),
  'CoNLL-U': require('./conllu'),
  conllu: require('./conllu'),
  'notatrix serial': require('./notatrix-serial'),
  notatrixSerial: require('./notatrix-serial'),
  Params: require('./params'),
  params: require('./params'),
  'plain text': require('./plain-text'),
  plainText: require('./plain-text'),
  SD: require('./sd'),
  sd: require('./sd'),

};

},{"./apertium-stream":410,"./brackets":417,"./cg3":423,"./conllu":429,"./notatrix-serial":437,"./params":444,"./plain-text":451,"./sd":458}],433:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (obj, options) => {

  function restrict(obj, fields, allowUndefined=false) {
    if (obj === undefined)
      throw new DetectorError(`Illegal notatrix serial: missing field`, obj, options);

    if (_.omit(obj, Object.keys(fields)).length)
      throw new DetectorError(`Illegal notatrix serial: unexpected field`, obj, options);

    _.each(fields, (fieldType, fieldName) => {

      const value = obj[fieldName];

      switch (fieldType) {
        case ('number'):
          if (value !== undefined || !allowUndefined)
            if (isNaN(parseFloat(value)))
              throw new DetectorError(`Illegal notatrix serial: could not parse ${value} as float`, obj, options);
          break;

        case ('string'):
          if (value !== undefined || !allowUndefined)
            if (typeof value !== 'string')
              throw new DetectorError(`Illegal notatrix serial: expected 'string', got ${typeof value}`, obj, options);
          break;

        case ('string*'):
          if (value !== undefined || !allowUndefined)
            if (value !== null && typeof value !== 'string')
              throw new DetectorError(`Illegal notatrix serial: expected 'string', got ${typeof value}`, obj, options);
          break;

        case ('object'):
          // pass
          break;

        case ('array'):
          if (value != undefined || !allowUndefined)
            if (!Array.isArray(value))
              throw new DetectorError(`Illegal notatrix serial: expected Array, got ${typeof value}`, obj, options);
          break;
      }
    });
  }

  options = _.defaults(options, {
    allowZeroTokens: true,
    allowZeroFields: true,
  });

  if (!utils.isJSONSerializable(obj))
    throw new DetectorError(`Illegal notatrix serial: not JSON object`, obj, options);

  obj = typeof obj === 'string' ? JSON.parse(obj) : obj;

  restrict(obj, utils.nxSentenceFields);
  _.each(obj.comments, comment => {
    if (typeof comment !== 'string')
      throw new DetectorError(`Illegal notatrix serial: comments should be strings`, obj, options);
  });
  _.each(obj.tokens, token => {
    restrict(token, utils.nxSentenceTokensFields, true);
  });
  if (obj.tokens.length === 0 && !options.allowZeroTokens)
    throw new DetectorError(`Illegal notatrix serial: cannot have empty token list`, obj, options);

  _.each(obj.tokens, token => {
    if (Object.keys(token).length === 0 && !options.allowZeroFields)
      throw new DetectorError(`Illegal notatrix serial: cannot have token without fields`, obj, options);

    if (token.analyses)
      _.each(token.analyses, analysis => {

        const analysisKeys = Object.keys(analysis);
        if (analysisKeys.length !== 1 || analysisKeys[0] !== 'subTokens')
          throw new DetectorError(`Illegal notatrix serial: got unexpected analyses field`, obj, options);

        _.each(analysis.subTokens, subToken => {
          restrict(subToken, utils.nxSentenceTokensFields, true);
          if (subToken.analyses !== undefined)
            throw new DetectorError(`Illegal notatrix serial: subTokens can only have one analysis`, obj, options);
        });
      });
  });

  return 'notatrix serial';
};

},{"../../utils":481,"underscore":502}],434:[function(require,module,exports){
module.exports = [];
module.exports.hasComments = true;

},{}],435:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')


module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  return {
    output: sent.serialize(),
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":436,"underscore":502}],436:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const Loss = utils.Loss;
const fields = require('./fields');

module.exports = sent => {
  // do nothing, can't lose info on this one
  return [];
};

},{"../../utils":481,"./fields":434,"underscore":502}],437:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'notatrix serial',
  fields: require('./fields'),
  split: require('./splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

/*
INPUT:
{
  input: String,
  options: Object,
  comments: [
    String
  ],
  tokens: [
    (
      // #1 (default)
      {
        isEmpty: Boolean || undefined,
        index: String || undefined,
        form: String || null || undefined,
        lemma: String || null || undefined,
        upostag: String || null || undefined,
        xpostag: String || null || undefined,
        feats: String || null || undefined,
        head: (
          String
          ||
          null
          ||
          undefined
          ||
          {
            index: String,
            type: String || null,
          }
        ),
        deprel: String || null || undefined,
        deps: (
          String
          ||
          null
          ||
          undefined
          ||
          {
            index: String,
            type: String || null,
          }
        ),
        misc: String || null || undefined,
      }
      ||
      // #2 (CoNLL-U superToken)
      {
        index: String,
        form: String || null,
        misc: String || null,
        subTokens: [
          <#1>
        ]
      }
      ||
      // #3 (CG3)
      {
        form: String || null,
        analyses: [
          [
            semicolon: Boolean,
            lemma: String || null,
            head: String || null,
            index: String || null,
            deprel: String || null,
            xpostag: String || null,
            other: [
              String
            ]
          ]
        ]
      }
      ||
      // #4 (notatrix serial)
      {

      }
    )
  ]
}


OUTPUT:
{
  input: String,
  options: 'plain object',
  comments: [
    {
      type: String,
      body: String,
      value: <any>
    }
  ],
*/

},{"./detector":433,"./fields":434,"./generator":435,"./parser":438,"./splitter":439}],438:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (obj, options) => {

  try {
    detect(obj, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  return obj;
};

},{"../../utils":481,"./detector":433,"underscore":502}],439:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const SplitterError = utils.SplitterError;

module.exports = (text, options) => {
  throw new SplitterError('Can\'t split notatrix serial', text, options);
};

},{"../../utils":481}],440:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (obj, options) => {

  options = _.defaults(options, {
    allowEmptyList: false,
    allowTrailingWhitespace: true,
    allowLeadingWhitespace: true
  });

  if (!utils.isJSONSerializable(obj))
    throw new DetectorError(`Illegal Params: not JSON object`, obj, options);

  obj = typeof obj === 'string' ? JSON.parse(obj) : obj;

  if (Array.isArray(obj)) {

    if (!obj.length && !options.allowEmptyList)
      throw new DetectorError(`Illegal Params: contains no tokens`, obj, options);

    obj.forEach(obj => {

      const omitted = Object.keys(_.omit(obj, utils.fields));
      if (omitted.length)
        throw new DetectorError(`Illegal Params: contains illegal keys (${omitted.join(', ')})`, obj, options);

      const picked = Object.keys(_.pick(obj, utils.fields));
      if (!picked.length)
        throw new DetectorError(`Illegal Params: missing required keys`, obj, options);

    });

  } else {

    throw new DetectorError(`Illegal Params: expected array of parameters, got ${typeof obj}`, obj, options)

  }

  return 'Params';
};

},{"../../utils":481,"underscore":502}],441:[function(require,module,exports){
module.exports = [
  'isEmpty',
  'index',
  'form',
  'lemma',
  'upostag',
  'xpostag',
  'feats',
  'head',
  'deprel',
  'deps',
  'misc',
];
module.exports.hasComments = false;

},{}],442:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')


module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  const output = sent.tokens.map(token => {

    if (token.analysis)
      throw new GeneratorError('Unable to generate, contains ambiguous analyses or multiword tokens');

    let params = _.pick(token, utils.fields);
    params.head = token.getHead();

    return _.pick(params, value => value != undefined);
  });

  return {
    output: output,
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":443,"underscore":502}],443:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  if (serial.comments.length)
    losses.add('comments');

  serial.tokens.forEach(token => {
    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
          break;

        case ('heads'):
          if (token.heads.length > 1)
            losses.add('enhanced dependencies');
          break;

        default:
          losses.add(field);
      }
    })
  });

  return Array.from(losses);
};

},{"../../utils":481,"./fields":441,"underscore":502}],444:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'Params',
  fields: require('./fields'),
  split: require('./splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"./detector":440,"./fields":441,"./generator":442,"./parser":445,"./splitter":446}],445:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (obj, options) => {

  try {
    detect(obj, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  return {
    input: JSON.stringify(obj),
    options: options,
    comments: [],
    tokens: obj.map((token, i) => {
      token.index = `${i}`;
      return token;
    }),
  };
};

},{"../../utils":481,"./detector":440,"underscore":502}],446:[function(require,module,exports){
'use strict';

const utils = require('../../utils');
const SplitterError = utils.SplitterError;

module.exports = (text, options) => {
  throw new SplitterError('Can\'t split Params', text, options);
};

},{"../../utils":481}],447:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: true,
    allowNewlines: false,
    bracketsAllowanceTreshold: 0.2, // set to <0 or >1 to avoid
  });

  /*
  if (!text && !options.allowEmptyString)
    throw new DetectorError(`Illegal plain text: empty string`, text, options);
    */

  if (utils.isJSONSerializable(text))
    throw new DetectorError(`Illegal plain text: JSON object`, text, options);

  if (/\n/.test(text) && !options.allowNewlines)
    throw new DetectorError(`Illegal plain text: contains newlines`, text, options);

  if (options.bracketsAllowanceTreshold >= 0) {

    const numWords = text.split(utils.re.whitespace).length;
    const numBrackets = (text.match(/[\[\]]/g) || []).length;
    const ratio = numBrackets / numWords;

    if (ratio > options.bracketsAllowanceTreshold)
      throw new DetectorError(`Illegal plain text: contains too many brackets (${ratio})`, text, options);
  }

  return 'plain text';
};

},{"../../utils":481,"underscore":502}],448:[function(require,module,exports){
module.exports = [
  'form',
];
module.exports.hasComments = false;

},{}],449:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const getLoss = require('./get-loss')


module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  const output = sent.tokens.map(token => {

    return token.isSuperToken
      ? token.subTokens.map(subToken => subToken.value).join(' ')
      : token.form;

  }).join(' ').replace(utils.re.spaceBeforePunctuation, '$1');

  return {
    output: output,
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"./get-loss":450,"underscore":502}],450:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  if (serial.comments.length)
    losses.add('comments');

  serial.tokens.forEach(token => {
    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
          break;

        case ('feats'):
        case ('misc'):
          if (token[field] && token[field].length)
            losses.add(field);
          break;

        case ('heads'):
          if (token.heads.length)
            losses.add('heads');
          break;

        default:
          if (token[field])
            losses.add(field);
      }
    })
  });

  return Array.from(losses);
};

},{"../../utils":481,"./fields":448,"underscore":502}],451:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'plain text',
  fields: require('./fields'),
  split: require('./splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"./detector":447,"./fields":448,"./generator":449,"./parser":452,"./splitter":453}],452:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');

module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: true,
  });

  text = text || '';

  try {
    detect(text, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  //console.log();
  //console.log(text);

  let chunks = [];
  let word = '';

  _.each(text, (char, i) => {

    if (utils.re.whitespace.test(char)) {

      chunks.push(word);
      word = '';

    } else if (utils.re.punctuation.test(char)) {

      if (!utils.re.allPunctuation.test(word)) {
        chunks.push(word);
        word = '';
      }
      word += char;

    } else {
      word += char;

    }
  });

  chunks.push(word);

  //console.log(chunks);

  let tokens = chunks.filter(utils.thin).map((chunk, i) => {
    return {
      form: chunk,
      index: i,
    };
  });

  //console.log(comments);
  //console.log(tokens);

  return {
    input: text,
    options: options,
    comments: [],
    tokens: tokens,
  };
};

},{"../../utils":481,"./detector":447,"underscore":502}],453:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const utils = require('../../utils');

module.exports = (text, options={}) => {

  options = _.defaults(options, {
    trimChunks: true
  });

  return text.split(utils.re.sentenceThenPunctuation).map(chunk => {
    if (options.trimChunks) {
      return chunk.trim();
    } else {
      return chunk;
    }
  }).filter(utils.thin);
};

},{"../../utils":481,"underscore":502}],454:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const DetectorError = utils.DetectorError;

module.exports = (text, options) => {

  options = _.defaults(options, {
    allowEmptyString: false,
    allowLeadingWhitespace: true,
    allowBookendWhitespace: true,
    allowTrailingWhitespace: true,
    allowNoDependencies: false,
  });

  if (!text && !options.allowEmptyString)
    throw new DetectorError(`Illegal SD: empty string`, text, options);

  if (utils.isJSONSerializable(text))
    throw new DetectorError(`Illegal SD: JSON object`, text, options);

  // be more or less strict about whitespace
  const dependencyRegex = options.allowBookendWhitespace
    ? utils.re.sdDependency
    : utils.re.sdDependencyNoWhitespace;

  // internal stuff
  let parsingDeps = false;
  let parsingWhitespace = false;
  let parsedDeps = 0;

  const lines = text.split(/\n/);
  lines.forEach((line, i) => {

    if (utils.re.whiteline.test(line)) {
      if (parsingDeps) {
        if (!options.allowTrailingWhitespace)
          throw new DetectorError(`Illegal SD: contains trailing whitespace`, text, options);

      } else {
        if (!options.allowLeadingWhitespace)
          throw new DetectorError(`Illegal SD: contains leading whitespace`, text, options);

      }
    }

    if (utils.re.comment.test(line)) {

    } else if (!parsingDeps) {

      if (dependencyRegex.test(line))
        throw new DetectorError(`Illegal SD: missing text line`, text, options);

      parsingDeps = true;

    } else if (!dependencyRegex.test(line)) {

      throw new DetectorError(`Illegal SD: expected dependency line`, text, options);

    } else {

      parsedDeps += 1;

    }
  });

  if (parsedDeps === 0 && !options.allowNoDependencies)
    throw new DetectorError(`Illegal SD: contains no dependencies`, text, options);

  return 'SD';
};

},{"../../utils":481,"underscore":502}],455:[function(require,module,exports){
module.exports = [
  'form',
  'heads',
];
module.exports.hasComments = true;

},{}],456:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const GeneratorError = utils.GeneratorError;
const generateText = require('../plain-text').generate;
const getLoss = require('./get-loss')

module.exports = (sent, options) => {

  if (!sent.isParsed)
    return {
      output: null,
      loss: undefined,
    };

  if (!sent || sent.name !== 'Sentence')
    throw new GeneratorError(`Unable to generate, input not a Sentence`, sent, options);

  options = _.defaults(options, sent.options, {

  });

  sent.index();

  let lines = [];
  sent.comments.forEach(comment => {
    lines.push('# ' + comment.body);
  });

  lines.push(generateText(sent).output);

  [sent.root].concat(sent.tokens).forEach(token => {

    token.mapDependents(dependent => {
      lines.push(`${dependent.deprel || '_'}(${token.form}, ${dependent.token.form})`);
    });

  });

  /*
  sent.root.mapDependents(dependent => lines.push(`${dependent.deprel}(${})`))
  if (sent.root)
    lines.push(`root(ROOT, ${sent.root.form})`);

  sent.tokens.forEach(token => {

    if (token._head && token.deprel && token._head.name !== 'RootToken')
      lines.push(`${token.deprel}(${token._head.form}, ${token.form})`);

  });
  */

  return {
    output: lines.join('\n'),
    loss: getLoss(sent),
  };
};

},{"../../utils":481,"../plain-text":451,"./get-loss":457,"underscore":502}],457:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const fields = require('./fields');

module.exports = sent => {

  const serial = sent.serialize();
  let losses = new Set();

  serial.tokens.forEach(token => {
    if (token.heads && token.heads.length > 1)
      losses.add('enhanced dependencies');
      
    Object.keys(_.omit(token, fields)).forEach(field => {
      switch (field) {
        case ('uuid'):
        case ('index'):
        case ('deps'):
          break;

        case ('heads'):
          if (token.heads.length > 1)
            losses.add(field);
          break;


        case ('feats'):
        case ('misc'):
          if (token[field] && token[field].length)
            losses.add(field);
          break;

        default:
          if (token[field])
            losses.add(field);
      }
    })
  });

  return Array.from(losses);
};

},{"../../utils":481,"./fields":455,"underscore":502}],458:[function(require,module,exports){
'use strict';

module.exports = {

  name: 'SD',
  fields: require('./fields'),
  split: require('../default-splitter'),
  detect: require('./detector'),
  parse: require('./parser'),
  generate: require('./generator'),

};

},{"../default-splitter":431,"./detector":454,"./fields":455,"./generator":456,"./parser":459}],459:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../../utils');
const ParserError = utils.ParserError;
const detect = require('./detector');
const parseText = require('../plain-text').parse;

module.exports = (text, options) => {

  function getTokenIndexFromString(tokens, token) {
    for (let i=0; i<tokens.length; i++) {
      if (tokens[i].form.toLowerCase() === token.toLowerCase())
        return i;
    }

    return null;
  }

  //console.log();
  //console.log(text);

  options = _.defaults(options, {
    allowEmptyString: false,
    allowBookendWhitespace: true,
    allowWhiteLines: true,
  });

  try {
    detect(text, options);
  } catch (e) {
    if (e instanceof utils.DetectorError)
      throw new ParserError(e.message);

    throw e;
  }

  const lines = text.split('\n');
  const depRegex = options.allowBookendWhitespace
    ? utils.re.sdDependencyNoWhitespace
    : utils.re.sdDependency;

  let chunks = [];
  lines.forEach(line => {

    const whiteline = line.match(utils.re.whiteline),
      comment = line.match(utils.re.comment),
      dep = line.match(depRegex);

    if (whiteline) {

    } else if (comment) {

      chunks.push({
        type: 'comment',
        body: comment[2]
      });

    } else if (dep) {

      chunks.push({
        type: 'dependency',
        deprel: dep[1],
        head: dep[2],
        dep: dep[3]
      });

    } else {

      chunks.push({
        type: 'text',
        body: line,
      });

    }

  });

  //console.log(chunks);

  let tokens;
  let comments = [];
  let expecting = ['comment', 'text'];

  chunks.forEach(chunk => {

    if (expecting.indexOf(chunk.type) === -1)
      throw new ParserError(`expecting ${expecting.join('|')}, got ${chunk.type}`, text, options);

    if (chunk.type === 'comment') {

      comments.push(chunk.body);
      expecting = ['comment', 'text'];

    } else if (chunk.type === 'text') {

      tokens = parseText(chunk.body).tokens;
      expecting = ['dependency'];

    } else if (chunk.type === 'dependency') {

      let index = getTokenIndexFromString(tokens, chunk.dep);
      if (index === null)
        throw new ParserError(`unable to find token with form ${chunk.dep}`, text, options);

      tokens[index].heads = [{
        index: getTokenIndexFromString(tokens, chunk.head),
        deprel: chunk.deprel,
      }];
      expecting = ['dependency'];

    } else {
      throw new ParserError(`unrecognized chunk type: ${chunk.type}`, text, options);

    }
  });

  //console.log(comments);
  //console.log(tokens);

  return {
    input: text,
    options: options,
    comments: comments,
    tokens: tokens,
  };
};

},{"../../utils":481,"../plain-text":451,"./detector":454,"underscore":502}],460:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('./utils');
const GeneratorError = utils.GeneratorError;

let as = {

	'apertium stream': require('./formats/apertium-stream').generate,
  apertiumStream: require('./formats/apertium-stream').generate,
  Brackets: require('./formats/brackets').generate,
  brackets: require('./formats/brackets').generate,
  CG3: require('./formats/cg3').generate,
  cg3: require('./formats/cg3').generate,
  'CoNLL-U': require('./formats/conllu').generate,
  conllu: require('./formats/conllu').generate,
  'notatrix serial': require('./formats/notatrix-serial').generate,
  notatrixSerial: require('./formats/notatrix-serial').generate,
  Params: require('./formats/params').generate,
  params: require('./formats/params').generate,
  'plain text': require('./formats/plain-text').generate,
  plainText: require('./formats/plain-text').generate,
	SD: require('./formats/sd').generate,
  sd: require('./formats/sd').generate,

};

module.exports = as;

},{"./formats/apertium-stream":410,"./formats/brackets":417,"./formats/cg3":423,"./formats/conllu":429,"./formats/notatrix-serial":437,"./formats/params":444,"./formats/plain-text":451,"./formats/sd":458,"./utils":481,"underscore":502}],461:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const nx = require('./nx');
const errors = require('./utils/errors');

module.exports = _.extend({

  constants: require('./utils/constants'),
  formats: require('./formats'),
  funcs: require('./utils/funcs'),
  regex: require('./utils/regex'),
  data: require('../data'),

  detect: require('./detector'),
  generate: require('./generator'),
  parse: require('./parser'),
  split: require('./splitter'),
  convert: require('./converter'),

}, nx, errors);

},{"../data":400,"./converter":405,"./detector":406,"./formats":432,"./generator":460,"./nx":467,"./parser":476,"./splitter":477,"./utils/constants":478,"./utils/errors":479,"./utils/funcs":480,"./utils/regex":482,"underscore":502}],462:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxError = utils.NxError;
const NxBaseClass = require('./base-class');
const SubToken = require('./sub-token');

class Analysis extends NxBaseClass {
  constructor(sent, serial) {

    super(sent, 'Analysis');
    this._subTokens = (serial.subTokens || []).map(sub => new SubToken(sent, sub));

  }

  get subTokens() {
    return this._subTokens;
  }

}

module.exports = Analysis;

},{"../utils":481,"./base-class":463,"./sub-token":473,"underscore":502}],463:[function(require,module,exports){
class NxBaseClass {
  constructor(name) {
    this.name = name;
  }
};

module.exports = NxBaseClass;

},{}],464:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const uuid = require('uuid/v4');

const utils = require('../utils');
const NxError = utils.NxError;
const NxBaseClass = require('./base-class');
const RelationSet = require('./relation-set');

class BaseToken extends NxBaseClass {
  constructor(sent, name, serial={}) {

    super(name);

    this.sent = sent;
    this.uuid = uuid();

    this.uuid = serial.uuid || this.uuid;

    this.semicolon = serial.semicolon;
    this.isEmpty = serial.isEmpty;
    this.form = serial.form;
    this.lemma = serial.lemma;
    this.upostag = serial.upostag;
    this.xpostag = serial.xpostag;
    this.feats = serial.feats;
    this.misc = serial.misc;

    this._heads = serial.heads;
    this.heads = new RelationSet(this, 'dependents');
    this.dependents = new RelationSet(this, 'heads');

    this.indices = {
      conllu: null,
      cg3: null,
      cytoscape: null,
      serial: serial.index,
    };
  }

  addHead(head, deprel) {

    if (!(head instanceof BaseToken))
      throw new NxError('cannot add head unless it is a token');

    if (head === this)
      throw new NxError('token cannot be its own head');

    if (typeof deprel !== 'string' && deprel != null)
      throw new NxError('deprel must be a string, null, or undefined');

    // if we're not enhanced, only can have 1 head at a time
    if (!this.sent.options.enhanced)
      this.heads.clear();

    return this.heads.add(head, deprel);

  }

  modifyHead(head, deprel) {

    if (!(head instanceof BaseToken))
      throw new NxError('cannot add head unless it is a token');

    if (typeof deprel !== 'string' && deprel != null)
      throw new NxError('deprel must be a string, null, or undefined');

    return this.heads.modify(head, deprel);

  }

  removeHead(head) {

    if (!(head instanceof BaseToken))
      throw new NxError('cannot add head unless it is a token');

    return this.heads.remove(head);

  }

  removeAllHeads() {
    return this.heads.clear();
  }

  mapHeads(callback) {

    //if (this.sent.options.enhanced) {
      return this.heads.map(callback);
    /*} else {
      return this.heads.first
        ? [ this.heads.first ].map(callback)
        : [].map(callback);
    }*/

  }

  mapDependents(callback) {

    return this.dependents.map(callback);

  }

  getHead(format) {

    if (!this.heads.length)
      return null;

    if (format === 'CoNLL-U')
      return `${this.heads.first.token.indices.conllu}`;

    if (format === 'CG3')
      return `${this.heads.first.token.indices.cg3}`;

    return `${this.heads.first.token.indices.absolute}`;
  }

  _getDeprel() {

    if (!this.heads.length)
      return null;

    return this.heads.first.deprel;
  }

  _getDeps(format) {

    function getIndex(token) {
      if (format === 'CoNLL-U')
        return token.indices.conllu;

      if (format === 'CG3')
        return token.indices.cg3;

      return token.indices.absolute;
    }

    if (!this.heads.length || !this.sent.options.enhanced)
      return [];

    return this.mapHeads(utils.noop).sort((x,y) => {

      if (getIndex(x.token) < getIndex(y.token))
        return -1;

      if (getIndex(x.token) > getIndex(y.token))
        return 1;

      return 0;

    }).map(head => {

      return head.deprel
        ? `${getIndex(head.token)}:${head.deprel}`
        : `${getIndex(head.token)}`;

    });
  }

  walk(callback) {
    let i = 0;
    if (this._analyses)
      return this._analyses.map(analysis => {
        return analysis._subTokens.map(subToken => {
          return callback(subToken, ++i);
        });
      });

    return null;
  }

  hashFields(...fields) {

    fields = _.flatten(fields);

    let hash = _.intersection(fields, [
      'form',
      'lemma',
      'upostag',
      'xpostag',
      'feats',
      'deprel',
      'misc',
      'isEmpty',
      'semicolon',
    ]).map(field => `<${this[field] || field}>`).join('|');

    if (fields.indexOf('indices') > -1)
      hash += `|${_.map(this.indices, index => `{${index}}`).join('')}`;

    if (fields.indexOf('head') > -1)
      hash += `|(h:${this.head.token.indices.absolute}:${h.deprel})`;

    if (fields.indexOf('deps') > -1)
      hash += `|(d:${this.mapDeps(d => `${d.token.indices.absolute}:${d.deprel}`).join('|') || ''})`;

    if (fields.indexOf('analyses') > -1 || fields.indexOf('subTokens') > -1)
      hash += `|[s:${this.walk(t => t.hashFields(fields)) || ''}]`;

    return hash;
  }

  serialize() {
    let serial = {

      uuid: this.uuid,
      form: this.form,
      index: this.indices.absolute,

      semicolon: this.semicolon,
      isEmpty: this.isEmpty,
      lemma: this.lemma,
      upostag: this.upostag,
      xpostag: this.xpostag,
      feats: this._feats,
      misc: this._misc,
      heads: this.mapHeads(head => {
        return {
          index: head.token.indices.absolute,
          deprel: head.deprel,
        };
      }),
    };

    if (this._analyses && this._analyses.length)
      serial.analyses = this._analyses.map(analysis => {
        return {
          subTokens: analysis._subTokens.map(subToken => subToken.serialize()),
        };
      });

    serial = _.pick(serial, value => value !== undefined);

    return serial;
  }

  get isSuperToken() {
    return !!(this._analyses || []).reduce((total, analysis) => {
      return total += analysis._subTokens.length;
    }, 0);
  }

  get value() {
    return this.form || this.lemma;
  }

  get feats() {
    return this._feats_init
      ? this._feats.length
        ? this._feats.join('|')
        : null
      : undefined;
  }

  set feats(feats) {
    if (feats === undefined)
      return;

    this._feats_init = true;
    this._feats = feats || [];
  }

  get misc() {
    return this._misc_init
      ? this._misc.length
        ? this._misc.join('|')
        : null
      : undefined;
  }

  set misc(misc) { // [(serial.misc || ''), (serial.other || []).join('|')].join('|');
    if (misc === undefined)
      return;

    this._misc_init = true;
    this._misc = misc || [];
  }

  set other(other) {
    if (other === undefined)
      return;

    if (typeof other === 'string')
      other = [other];

    this._misc_init = true;
    this._misc = (other || []).filter(utils.thin);
  }
}

module.exports = BaseToken;

},{"../utils":481,"./base-class":463,"./relation-set":470,"underscore":502,"uuid/v4":505}],465:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxBaseClass = require('./base-class');
const Label = require('./label');

class Comment extends NxBaseClass {
  constructor(sent, body) {

    super(sent, 'Comment');

    this.type = 'normal';
    this.body = body;

    const label = body.match(utils.re.commentLabel),
      sentId = body.match(utils.re.commentSentId);

    if (label) {

      let labels = [];
      label[3].split(/\s/).forEach(label => {
        if (label && labels.indexOf(label) === -1)
          labels.push(label)
      });

      this.type = 'label';
      this.labels = labels;

    } else if (sentId) {

      this.type = 'sent-id';
      this.id = sentId[2];

    }
  }

  serialize() {
    return this.body;
  }
}

module.exports = Comment;

},{"../utils":481,"./base-class":463,"./label":468,"underscore":502}],466:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const fs = require('fs');
const path = require('path');
const uuid = require('uuid/v4');

const utils = require('../utils');
const NxError = utils.NxError;

const split = require('../splitter');
const detect = require('../detector');
const parse = require('../parser');
const generate = require('../generator');
const convert = require('../converter');

const NxBaseClass = require('./base-class');
const Labeler = require('./labeler');
const Sentence = require('./sentence');


class Corpus extends NxBaseClass {
  constructor(options) {

    super('Corpus');
    this.treebank_id = uuid();

    options = _.defaults(options, {
      requireOne: true,
    });
    this.filename = null;
    this.options = options;
    this.sources = [];

    this._labeler = new Labeler(this);
    this._sentences = [];
    this._index = -1;
    this._meta = {};
    this._filterIndex = -1;

  }

  get snapshot() {
    return {
      filename: this.filename,
      sentences: this.length,
      errors: this.errors.length,
      labels: this._labeler.sort(),
    };
  }

  get length() {
    return this._sentences.length;
  }

  get errors() {
    return this._sentences.filter(sent => {
      if (!sent.isParsed)
        return sent;
    });
  }

  get topLabels() {
    return this._labeler.top;
  }

  serialize() {
    return {
      filename: this.filename,
      meta: this._meta,
      options: this.options,
      labeler: this._labeler.serialize(),
      sentences: this._sentences.map(sent => sent.serialize(this.options)),
      index: this._index,
    };
  }

  static deserialize(serial) {

    const corpus = new Corpus(serial.options);
    corpus.filename = serial.filename || null;
    corpus._meta = serial.meta;
    corpus._labeler = Labeler.deserialize(corpus, serial.labeler);
    corpus._sentences = serial.sentences.map(s => {

      const sent = new Sentence(s, _.defaults(s.options, serial.options));
      sent._meta = s.meta;

      _.each(corpus._labeler._labels, (label, name) => {
        if (corpus._labeler.sentenceHasLabel(sent, name))
          label._sents.add(sent);
      });

      return sent;
    });
    corpus.index = serial.index;

    return corpus;
  }

  get sentence() {
    return this.index < 0 ? null : this._sentences[this.index];
  }

  get filtered() {
    return this._labeler._filter.size
      ? this._sentences.filter(sent => this._labeler.sentenceInFilter(sent))
      : [];
  }

  get index() {
    return this._index;
  }

  set index(index) {

    const filtered = this.filtered,
      total = filtered.length || this.length;

    index = parseInt(index);
    if (isNaN(index)) {
      index = filtered.length ? this._filterIndex : this.index;

    } else if (index < 0 && total) {
      index = 0;

    } else if (index > total - 1) {
      index = total - 1;
    }

    if (filtered.length) {
      this._filterIndex = index;
      this._index = filtered[index]._index;
    } else {
      this._filterIndex = -1;
      this._index = index;
    }

    return this.index;
  }

  reindex() {
    this._sentences.forEach((sent, i) => { sent._index = i; });
  }

  first() {

    this.index = this.length ? 0 : -1;
    return this;
  }
  prev() {

    if (!this.length)
      return null;

    const filtered = this.filtered;
    let index = filtered.length
      ? this._filterIndex
      : this._index;

    if (index === 0)
      return null;

    this.index = --index;
    return this;
  }
  next() {

    if (!this.length)
      return null;

    const filtered = this.filtered;
    let index = filtered.length
      ? this._filterIndex
      : this._index;
    let total = filtered.length
      ? filtered.length - 1
      : this._length - 1;

    if (index === total)
      return null;

    this.index = ++index;
    return this;
  }
  last() {

    const filtered = this.filtered;
    this.index = filtered.length
      ? filtered.length - 1
      : this.length - 1;

    return this;
  }



  getSentence(index) {

    if (index == undefined)
      index = this.index;

    if (0 > index || index > this.length - 1)
      return null;

    return this._sentences[index] || null;
  }

  setSentence(index, text) {

    if (text === null || text === undefined) { // if only passed 1 arg
      text = index || '';
      index = this.index;
    }

    index = parseInt(index)
    if (isNaN(index) || this.getSentence(index) === null)
      throw new NxError(`cannot set sentence at index ${index}`);

    this._labeler.onRemove(this.getSentence(index));
    const sent = new Sentence(text, this.options);
    sent.corpus = this;

    this._sentences[index] = sent;
    this._labeler.onAdd(sent);
    this.reindex();

    return sent;
  }

  insertSentence(index, text) {

    if (text === null || text === undefined) { // if only passed 1 arg
      text = index || '';
      index = this.index + 1;
    }

    index = parseFloat(index);
    if (isNaN(index))
      throw new NxError(`cannot insert sentence at index ${index}`);

    index = index < 0
      ? 0
      : index > this.length
        ? this.length
        : parseInt(index);

    const sent = new Sentence(text, this.options);
    sent.corpus = this;

    this._sentences = this._sentences
      .slice(0, index)
      .concat(sent)
      .concat(this._sentences.slice(index));
    this._labeler.onAdd(sent);

    this.index = index;
    this.reindex();
    return sent;
  }

  removeSentence(index) {

    if (!this.length)
      return null;

    if (index === undefined) // if not passed args
      index = this.index;

    index = parseFloat(index);
    if (isNaN(index))
      throw new NxError(`cannot remove sentence at index ${index}`);

    index = index < 0
      ? 0
      : index > this.length - 1
        ? this.length - 1
        : parseInt(index);

    const removed = this._sentences.splice(index, 1)[0];
    if (!this.length)
      this.insertSentence();

    this._labeler.onRemove(removed);

    if (index <= this.index)
      this.index--;
    this.reindex();
    return removed;
  }

  pushSentence(text) {
    return this.insertSentence(Infinity, text);
  }

  popSentence(text) {
    return this.removeSentence(Infinity);
  }



  parse(string) {

    const splitted = split(string, this.options); // might throw errors
    const index = this.index || 0;

    splitted.forEach((split, i) => {
      //console.log(i, split);
      this.insertSentence(index + i, split, false);
    });

    return this;
  }

  static fromString(string, options) {

    const corpus = new Corpus(options);
    corpus.parse(string);
    return corpus;

  }

  readFile(filepath, next) {

    fs.exists(filepath, exists => {
      if (!exists)
        throw new NxError(`cannot read file: cannot find path ${filepath}`);

      fs.readFile(filepath, (err, data) => {
        if (err)
          throw err;

        data = data.toString();
        this.parse(data);
        this.sources.push(filepath);
        this.filename = path.basename(filepath);

        if (next)
          next(this);

      });
    });
  }

  static fromFile(filepath, options, next) {

    if (next === undefined) {
      next = options;
      options = {};
    }
    const corpus = new Corpus(options);
    corpus.readFile(filepath, next);

    return this;
  }

  writeFile(format, filepath) {

    filepath = this.getWritePath(filepath);

    const contents = this.serialize();
    fs.writeFile(filepath, contents, err => {
      if (err)
        throw err;
    });

    return this;
  }

  getWritePath(filepath) {

    if (filepath)
      return filepath;

    const lastSource = this.sources.slice(-1)[0];
    return (lastSource || 'export') + '.nxcorpus';
  }
}


module.exports = Corpus;

},{"../converter":405,"../detector":406,"../generator":460,"../parser":476,"../splitter":477,"../utils":481,"./base-class":463,"./labeler":469,"./sentence":472,"fs":43,"path":485,"underscore":502,"uuid/v4":505}],467:[function(require,module,exports){
module.exports = {

  NxBaseClass: require('./base-class'),
  Corpus: require('./corpus'),
  Labeler: require('./labeler'),
  Sentence: require('./sentence'),
  Comment: require('./comment'),
  BaseToken: require('./base-token'),
  RootToken: require('./root-token'),
  Token: require('./token'),
  Analysis: require('./analysis'),
  SubToken: require('./sub-token'),
  RelationSet: require('./relation-set'),

};

},{"./analysis":462,"./base-class":463,"./base-token":464,"./comment":465,"./corpus":466,"./labeler":469,"./relation-set":470,"./root-token":471,"./sentence":472,"./sub-token":473,"./token":474}],468:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxBaseClass = require('./base-class');


class Label extends NxBaseClass {
  constructor(name) {

    super('Label');
    this.name = name;
    this.bColor = utils.hashStringToHex(name);
    this.tColor = utils.getContrastingColor(this.bColor);
    this.desc = '';

  }

  serialize() {
    return {
      name: this.name,
      desc: this.desc,
      bColor: this.bColor,
      tColor: this.tColor,
    };
  }

  static deserialize(serial) {

    const label = new Label(serial.name);
    label.desc = serial.desc;
    label.bColor = serial.bColor;
    label.tColor = serial.tColor;

    return label;
  }


  /*

  set state(state) {
    if (!state.name)
      throw new DeserializationError(`cannot set name to "${state.name}"`);

    state.desc = state.desc || '';
    if (typeof state.desc !== 'string')
      throw new DeserializationError(`cannot set description to non-string value`);

    this.name = state.name;
    this.desc = state.desc;

    if (!this.changeColor(state.bColor))
      throw new DeserializationError(`cannot set background color to "${state.bColor}"`);
  }

  render(labeler) {

    const inComments = labeler.has(this.name),
      filtering = labeler._filter.has(this.name);

    $(`#labels-horiz`).append($('<li>')
      .attr('name', this.name)
      .addClass('label horiz')
      .addClass(inComments ? 'in-comments' : 'not-in-comments')
      .addClass(filtering  ? 'filtering'   : 'not-filtering')
      .append($('<div>')
        .addClass('label-text')
        .text(this.name)
        .css('background-color', this.bColor)
        .css('color', this.tColor)
        .click(e => labeler.handle.click.label(e))
      )
      .append($('<div>')
        .addClass('label-hidden')
        .append($('<div>')
          .addClass('label-hidden-group')
          .append($('<div>')
            .addClass('label-hidden-item')
            .append($('<strong>')
              .text('Name')
            )
            .append($('<input>')
              .attr('name', 'label-name')
              .val(this.name)
              .keyup(e => labeler.handle.keyup.name(e))
            ))
          .append($('<div>')
            .addClass('label-hidden-item')
            .append($('<strong>')
              .text('Description')
            )
            .append($('<input>')
              .attr('name', 'label-desc')
              .val(this.desc)
              .keyup(e => labeler.handle.keyup.desc(e))
            ))
          .append($('<div>')
            .addClass('label-hidden-item')
            .append($('<strong>')
              .text('Color')
            )
            .append($('<div>')
              .addClass('label-hidden-item-inner')
              .append($('<span>')
                .addClass('hex-color-group')
                .text('#')
                .append($('<input>')
                  .attr('name', 'label-color')
                  .attr('pattern', '[A-Fa-f\\d]{6}')
                  .val(this.bColor.substr(1))
                  .keyup(e => labeler.handle.keyup.color(e))
                )
              )
              .append($('<button>')
                .attr('type', 'button')
                .addClass('btn btn-secondary refresh-color')
                .css('background-color', this.bColor)
                .click(e => labeler.handle.click.refresh(e))
                .append($('<i>')
                  .addClass('fa fa-refresh')
                )
              )
            )
          )
        )
        .append($('<hr>'))
        .append($('<div>')
          .addClass('label-hidden-group')
          .append($('<div>')
            .addClass('label-hidden-item')
            .append($('<div>')
              .addClass('label-hidden-item-inner')
              .append($('<input>')
                .attr('name', 'filtering')
                .attr('type', 'checkbox')
                .prop('checked', filtering)
                .click(e => labeler.handle.click.checkbox.filtering(e))
              )
              .append($('<span>')
                .addClass('filtering-label checkbox-label')
                .text('filtering')
              )
            )
          )
        )
        .append($('<hr>'))
        .append($('<div>')
          .addClass('label-hidden-group')
          .append($('<div>')
            .addClass('label-hidden-item delete-item')
            .append($('<button>')
              .attr('type', 'button')
              .addClass('btn btn-secondary delete-button')
              .text('delete')
              .click(e => labeler.handle.click.delete(e))
            )
          )
        )
      )
    );
  }
  */
}


module.exports = Label;

},{"../utils":481,"./base-class":463,"underscore":502}],469:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxBaseClass = require('./base-class');
const Label = require('./label');


class Labeler extends NxBaseClass {
  constructor(corpus) {

    super('Labeler');
    this.corpus = corpus;

    this._labels = {};
    this._filter = new Set();

  }

  sort() {

    const size = name => this._labels[name]._sents.size;

    return Object.keys(this._labels).sort((x, y) => {

      if (size(x) < size(y))
        return 1;

      if (size(x) > size(y))
        return -1;

      return 0;

    }).map(name => {

      return {
        name: name,
        size: this._labels[name]._sents.size,
      };

    });
  }

  serialize() {
    return {
      labels: _.map(this._labels, label => label._label.serialize()),
      filter: Array.from(this._filter)
    };
  }

  static deserialize(corpus, serial) {

    const labeler = new Labeler(corpus);
    serial.labels.forEach(label => labeler.addLabel(label.name));
    serial._filter = new Set(...serial.filter);

    return labeler;
  }

  get(name) {
    return this._labels[name];
  }

  count(name) {
    return this._labels[name]
      ? this._labels[name]._sents.size
      : 0;
  }



  sentenceHasLabel(sent, searching) {

    let hasLabel = false;
    sent.comments.forEach(comment => {
      if (comment.type === 'label') {
        comment.labels.forEach(name => {
          if (name === searching)
            hasLabel = true;
        });
      }
    });

    return hasLabel;
  }

  sentenceInFilter(sent) {

    let inFilter = false;
    sent.comments.forEach(comment => {
      if (comment.type === 'label') {
        comment.labels.forEach(name => {
          if (this._filter.has(name))
            inFilter = true;
        });
      }
    });

    return inFilter;
  }

  addToFilter(name) {
    if (this.get(name))
      return this._filter.add(name);
  }

  removeFromFilter(name) {
    return this._filter.delete(name);
  }



  onAdd(sent) {
    sent.comments.forEach(comment => {
      if (comment.type === 'label') {
        comment.labels.forEach(name => {

          this.addLabel(name, [sent]);

        });
      }
    });
  }

  onRemove(sent) {
    sent.comments.forEach(comment => {
      if (comment.type === 'label') {
        comment.labels.forEach(name => {

          this.removeLabel(name, [sent]);

        });
      }
    })
  }



  addLabel(name, sents=[]) {

    let label = this.get(name);
    if (label) {

      label._sents.add(...sents);

    } else {

      label = {
        _label: new Label(name),
        _sents: new Set(),
      };
      this._labels[name] = label;

    }

    sents.forEach(sent => {
      sent.comments.forEach(comment => {
        if (comment.type === 'label') {

          comment.labels.push(name);
          label._sents.add(sent);

        }
      });
    });

    return label;
  }

  removeLabel(name, sents) {

    const label = this.get(name);
    if (!label)
      return false;

    (sents || label._sents).forEach(sent => {
      sent.comments.forEach(comment => {
        if (comment.type === 'label') {

          const index = comment.labels.indexOf(oldName);
          comment.labels.splice(index, 1);

        }
      })
    });

    if (!this.count(name))
      delete this._labels[name];

    return label;
  }

  changeLabelName(oldName, newName) {

    if (this.get(newName))
      return false; // already exists

    const oldLabel = this.removeLabel(oldName);
    if (!label)
      return false;

    const newLabel = this.addLabel(newName, oldLabel._sents);
    newLabel.desc = oldLabel.desc;
    newLabel.bColor = oldLabel.bColor;
    newLabel.tColor = oldLabel.tColor;

    return newLabel;
  }

  changeLabelColor(name, color) {

    const label = this.get(name);
    if (!label)
      return false;

    if (color) {

      color = (color.match(utils.re.hexColorSixDigit) || [])[1];
      const int = parseInt(color, 16);
      if (isNaN(int) || int < 0 || int > magic)
        return false; // out of bounds

    } else {
      color = utils.getRandomHexColor();
    }

    label._label.bColor = color;
    label._label.tColor = utils.getContrastingColor(color);

    return true;
  }

  changeLabelDesc(name, desc) {

    const label = this.get(name);
    if (!label)
      return false;

    if (typeof desc !== 'string')
      return false;

    label._label.desc = desc;
    return true;
  }

}


module.exports = Labeler;

},{"../utils":481,"./base-class":463,"./label":468,"underscore":502}],470:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxBaseClass = require('./base-class');


class RelationSet extends NxBaseClass {
  constructor(token, partner) {

    super('RelationSet');
    this.token = token;
    this.partner = partner;
    this._items = [];

  }

  get length() {
    return this._items.length;
  }

  get first() {
    return this._items[0] || null;
  }

  map(callback) {
    return this._items.map(callback);
  }

  has(token) {

    let has = false;
    this.map(item => {
      if (item.token === token)
        has = true;
    });

    return has;
  }

  add(token, deprel, origin=true) {

    if (this.has(token)) {
      this.modify(token, deprel);
      return false;
    }

    this._items.push({
      token: token,
      deprel: deprel,
    });

    if (origin)
      token[this.partner].add(this.token, deprel, false);

    return true;
  }

  modify(token, deprel, origin=true) {

    if (!this.has(token))
      return false;

    let ret;
    this.map(item => {
      if (item.token === token) {
        ret = item.deprel !== deprel;
        item.deprel = deprel;
      }
    });

    if (origin)
      token[this.partner].modify(this.token, deprel, false);

    return ret;
  }

  remove(token, origin=true) {

    let at = -1;

    this.map((item, i) => {
      if (item.token === token)
        at = i;
    });

    if (at === -1)
      return null;

    const removed = this._items.splice(at, 1)[0];

    if (origin)
      token[this.partner].remove(this.token);

    return removed || null;
  }

  clear(origin=true) {

    this.map(item => {
      if (origin)
        item.token[this.partner].remove(this.token)
    })
    this._items = [];
  }
}


module.exports = RelationSet;

},{"../utils":481,"./base-class":463,"underscore":502}],471:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const BaseToken = require('./base-token');

class RootToken extends BaseToken {
  constructor(sent) {

    super(sent, 'RootToken');

    this.form = 'ROOT';
    this.indices = {
      absolute: 0,
      conllu: 0,
      cg3: 0,
      cytoscape: 0,
    };
  }
}

module.exports = RootToken;

},{"../utils":481,"./base-token":464,"underscore":502}],472:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxError = utils.NxError;
const ToolError = utils.ToolError;
const parse = require('../parser');
const generate = require('../generator');

const NxBaseClass = require('./base-class');
const Comment = require('./comment');
const BaseToken = require('./base-token');
const Token = require('./token');
const RootToken = require('./root-token');
const update = require('./update');
const Analysis = require('./analysis');
const SubToken = require('./sub-token');

class Sentence extends NxBaseClass {
  constructor(serial, options) {

    super('Sentence');

    this.to = (format, options) => generate[format](this, options);
    this._meta = {};

    serial = serial || '';
    options = options || {};
    options = _.defaults(options, {
      interpretAs: null,
      addHeadOnModifyFailure: true,
      depsShowDeprel: true,
      showRootDeprel: true,
      enhanced: false,
      useTokenDeprel: true,
      autoAddPunct: true,
    });

    this.input = serial.input == null ? serial : serial.input;
    this.isParsed = false;
    this.Error = null;

    try {

      if (options.interpretAs) {

        // interpret as a particular format if passed option
        serial = parse.as[options.interpretAs](serial, options);

      } else {

        // otherwise, get an array of possible interpretations
        serial = parse(serial, options);

        // choose one of them if possible
        if (serial.length === 0) {
          throw new NxError('Unable to parse: unrecognized format', this);
        } else if (serial.length === 1) {
          serial = serial[0];
        } else {
          throw new NxError(
            `Unable to parse: ambiguous format (${serial.join(', ')})`, this);
        }

        if (serial.isParsed === false)
          throw new NxError('Cannot parse explicitly unparsed serial');
      }

      this.options = serial.options;

      this.root = new RootToken(this);
      this.comments = serial.comments.map(com => new Comment(this, com));
      this.tokens = serial.tokens.map(tok => new Token(this, tok));

      this.attach();
      this.isParsed = true;

    } catch (e) {

      if ((e instanceof NxError || e instanceof ToolError)) {

        this.options = serial.options || options;
        this.comments = [];
        this.tokens = [];
        this.Error = e;

      } else {
        throw e;
      }
    }
  }

  serialize(master = {}) {
    return {
      meta: this._meta,
      input: this.input,
      isParsed: this.isParsed,
      options: utils.dedup(master, this.options),
      comments: this.isParsed
        ? this.comments.map(com => com.serialize())
        : [],
      tokens: this.isParsed
        ? this.tokens.map(token => token.serialize())
        : [],
    };
  }

  iterate(callback) {
    for (let i=0; i<this.tokens.length; i++) {

      const token = this.tokens[i];
      callback(token, i, null, null);

      for (let j=0; j<token._analyses.length; j++) {
        for (let k=0; k<token._analyses[j]._subTokens.length; k++) {

          const subToken = token._analyses[j]._subTokens[k];
          callback(subToken, i, j, k);

        }
      }
    }
  }

  query(predicate) {

    let matches = [];
    this.iterate(token => {
      if (predicate(token))
        matches.push(token);
    });

    return matches;
  }

  index() {

    let absolute = 0,
      majorToken = null,
      superToken = null,
      empty = 0,
      conllu = 0,
      cg3 = 0,
      cytoscape = -1;

    this.iterate((token, i, j, k) => {

      token.indices.sup = i;
      token.indices.ana = j;
      token.indices.sub = k;
      token.indices.absolute = ++absolute;

      if (!token._analyses || !token._analyses.length)
        token.indices.cg3 = ++cg3;

      if (!token.isSuperToken && superToken && superToken.analysis === j)
        token.indices.cytoscape = ++cytoscape;

      if (token.subTokens && token.subTokens.length === 0)
        token.indices.cytoscape = ++cytoscape;

      if (j === null || k === null) {

        majorToken = token;

        if (superToken) {
          superToken.token.indices.conllu = superToken.start + '-' + superToken.stop;
          superToken = null;
        }

        if (token.subTokens.length) {
          superToken = {
            token: token,
            start: null,
            stop: null,
            analysis: token._i,
          };
        } else {

          if (token.isEmpty) {
            empty += 1;
          } else {
            empty = 0;
            conllu += 1;
          }

          token.indices.conllu = empty ? conllu + '.' + empty : conllu;
        }

      } else {

        if (majorToken._i === j) {

          if (token.isEmpty) {
            empty += 1;
          } else {
            empty = 0;
            conllu += 1;
          }

          token.indices.conllu = empty ? conllu + '.' + empty : conllu;
        }

        if (superToken) {
          if (superToken.start === null) {
            superToken.start = empty ? conllu + '.' + empty : conllu;
          } else {
            superToken.stop = empty ? conllu + '.' + empty : conllu;
          }
        }
      }
    });

    if (superToken) {
      superToken.token.indices.conllu = `${superToken.start}-${superToken.stop}`;
      superToken = null;
    }

    this.size = absolute;
    return this;
  }

  attach() {

    this.iterate(token => {
      (token._heads || []).forEach((dependency, i) => {

        if (i)
          token.sent.options.enhanced = true;

        if (dependency.index == '0') {

          token.addHead(token.sent.root, 'root');

        } else {

          const query = token.sent.query(token => token.indices.serial === dependency.index);
          if (query.length !== 1) {
            //console.log(token)
            throw new NxError(`cannot locate token with serial index "${dependency.index}"`);
          }

          token.addHead(query[0], dependency.deprel);

        }
      });

      delete token._heads;
    });

    return this.index();
  }

  /*update(serial, options) {
    try {

      const sent = new Sentence(serial, options);
      update(this, sent, options);

    } catch(e) {

      if (e instanceof utils.ToolError || utils.NxError)
        throw new NxError('Unable to update: ' + e.message);

      throw e;
    }
  }*/

  enhance() {
    this.options.enhanced = true;

    this.iterate(token => {
      if (!token._head)
        return;

      token.addDep(token._head, token.deprel);

    });

    return this;
  }

  unenhance() {
    this.options.enhanced = false;
    return this;
  }

  getSuperToken(token) {

    let superToken = null;

    this.iterate(tok => {
      if (!tok._analyses)
        return;

      tok._analyses.forEach(ana => {
        if (!ana._subTokens)
          return;

        ana._subTokens.forEach(sub => {
          if (sub === token)
            superToken = tok;

        });
      });
    });

    return superToken;
  }

  merge(src, tar) {

    if (!(src instanceof BaseToken) || !(tar instanceof BaseToken))
      throw new NxError('unable to merge: src and tar must both be tokens');

    if (src.isSuperToken || tar.isSuperToken)
      throw new NxError('unable to merge: cannot merge superTokens');

    if (src.name === 'SubToken' || tar.name === 'SuperToken')
      throw new NxError('unable to merge: cannot merge subTokens');

    if (Math.abs(tar.indices.absolute - src.indices.absolute) > 1)
      throw new NxError('unable to merge: tokens too far apart');

    // basic copying
    src.semicolon = src.semicolon || tar.semicolon;
    src.isEmpty = src.isEmpty || tar.isEmpty;
    src.form = (src.form || '') + (tar.form || '') || null;
    src.lemma = src.lemma || tar.lemma;
    src.upostag = src.upostag || tar.upostag;
    src.xpostag = src.xpostag || tar.xpostag;

    // array-type copying
    src._feats_init = src._feats_init || tar._feats_init;
    src._feats = src._feats_init
      ? (src._feats || []).concat(tar._feats || [])
      : undefined;
    src._misc_init = src._misc_init || tar._misc_init;
    src._misc = src._misc_init
      ? (src._misc || []).concat(tar._misc || [])
      : undefined;

    // make sure they don't depend on each other
    src.removeHead(tar);
    tar.removeHead(src);

    // migrate dependent things to the new token
    tar.mapDependents(dep => {
      dep.token.removeHead(tar);
      dep.token.addHead(src, dep.deprel);
    });

    // remove heads from the old token
    tar.removeAllHeads();

    // now that all references are gone, safe to splice the target out
    this.tokens.splice(tar.indices.sup, 1);

    return this.index();
  }

  combine(src, tar) {

    if (!(src instanceof BaseToken) || !(tar instanceof BaseToken))
      throw new NxError('unable to combine: src and tar must both be tokens');

    if (src.isSuperToken || tar.isSuperToken)
      throw new NxError('unable to combine: cannot combine superTokens');

    if (src.name === 'SubToken' || tar.name === 'SuperToken')
      throw new NxError('unable to combine: cannot combine subTokens');

    if (Math.abs(tar.indices.absolute - src.indices.absolute) > 1)
      throw new NxError('unable to combine: tokens too far apart');

    // get a new token to put things into
    let superToken = new Token(this, {});
    superToken._analyses = [ new Analysis(this, { subTokens: [] }) ];
    superToken._i = 0;

    // get the new superToken form from the subTokens
    superToken.form = (src.form || '') + (tar.form || '') || null;

    // make new subToken objects from src and tar
    let _src = new SubToken(this, {});

    // basic copying
    _src.semicolon = src.semicolon;
    _src.isEmpty = src.isEmpty;
    _src.form = src.form;
    _src.lemma = src.lemma;
    _src.upostag = src.upostag;
    _src.xpostag = src.xpostag;

    // array-type copying
    _src._feats_init = src._feats_init;
    _src._feats = _src._feats_init ? src._feats.slice() : undefined;
    _src._misc_init = src._misc_init;
    _src._misc = _src._misc_init ? src._misc.slice() : undefined;

    // make new subToken objects from src and tar
    let _tar = new SubToken(this, {});

    // basic copying
    _tar.semicolon = tar.semicolon;
    _tar.isEmpty = tar.isEmpty;
    _tar.form = tar.form;
    _tar.lemma = tar.lemma;
    _tar.upostag = tar.upostag;
    _tar.xpostag = tar.xpostag;

    // array-type copying
    _tar._feats_init = tar._feats_init;
    _tar._feats = _tar._feats_init ? tar._feats.slice() : undefined;
    _tar._misc_init = tar._misc_init;
    _tar._misc = _tar._misc_init ? tar._misc.slice() : undefined;

    if (src.indices.absolute < tar.indices.absolute) {

      superToken.analysis._subTokens.push(_src, _tar);

    } else {

      superToken.analysis._subTokens.push(_tar, _src);

    }

    // remove within-superToken dependencies
    src.removeHead(tar);
    tar.removeHead(src);

    // transfer all the heads and dependents to the new subTokens
    src.mapHeads(head => {
      src.removeHead(head.token);
      _src.addHead(head.token, head.deprel);
    });

    src.mapDependents(dep => {
      dep.token.removeHead(src);
      dep.token.addHead(_src, dep.deprel);
    });

    tar.mapHeads(head => {
      tar.removeHead(head.token);
      _tar.addHead(head.token, head.deprel);
    });

    tar.mapDependents(dep => {
      dep.token.removeHead(tar);
      dep.token.addHead(_tar, dep.deprel);
    });

    // overwrite the src with the new token
    this.tokens[src.indices.sup] = superToken;

    // splice out the old target
    this.tokens.splice(tar.indices.sup, 1);

    return this.index();
  }

  split(src, splitAtIndex) {

    if (!(src instanceof BaseToken))
      throw new NxError('unable to split: src must be a token');

    if (src.isSuperToken) {

      const tokens = src.subTokens.map(subToken => {

        let token = new Token(this, {});

        // basic copying
        token.semicolon = subToken.semicolon;
        token.isEmpty = subToken.isEmpty;
        token.form = subToken.form;
        token.lemma = subToken.lemma;
        token.upostag = subToken.upostag;
        token.xpostag = subToken.xpostag;

        // array-type copying
        token._feats_init = subToken._feats_init;
        token._feats = (subToken._feats || []).slice();
        token._misc_init = subToken._misc_init;
        token._misc = (subToken._misc || []).slice();

        // transfer all the heads and dependents from subToken to token
        subToken.mapHeads(head => {
          subToken.removeHead(head.token);
          token.addHead(head.token, head.deprel);
        });

        subToken.mapDependents(dep => {
          dep.token.removeHead(subToken);
          dep.token.addHead(token, dep.deprel);
        });

        return token;

      });

      const index = src.indices.sup;

      // splice out the old superToken
      this.tokens.splice(index, 1);

      // insert the new tokens into its place
      this.tokens = this.tokens
        .slice(0, index)
        .concat(tokens)
        .concat(this.tokens.slice(index));

    } else if (src.name === 'SubToken') {

      splitAtIndex = parseInt(splitAtIndex);
      if (isNaN(splitAtIndex))
        throw new NxError(`unable to split: cannot split at index ${splitAtIndex}`);

      let subToken = new SubToken(this, {});

      const beginning = (src.form || '').slice(0, splitAtIndex) || '_';
      const ending = (src.form || '').slice(splitAtIndex) || '_';

      src.form = beginning;
      subToken.form = ending;

      const superToken = this.getSuperToken(src);
      const subTokens = superToken._analyses[src.indices.ana]._subTokens;
      const index = src.indices.sub;

      // insert the new subToken after it
      superToken._analyses[src.indices.ana]._subTokens = subTokens
        .slice(0, index + 1)
        .concat(subToken)
        .concat(subTokens.slice(index + 1));

    } else {

      splitAtIndex = parseInt(splitAtIndex);
      if (isNaN(splitAtIndex))
        throw new NxError(`unable to split: cannot split at index ${splitAtIndex}`);

      let token = new Token(this, {});

      const beginning = (src.form || '').slice(0, splitAtIndex) || '_';
      const ending = (src.form || '').slice(splitAtIndex) || '_';

      src.form = beginning;
      token.form = ending;

      const index = src.indices.sup;

      // insert the new token after it
      this.tokens = this.tokens
        .slice(0, index + 1)
        .concat(token)
        .concat(this.tokens.slice(index + 1));

    }

    return this.index();
  }
}

module.exports = Sentence;

},{"../generator":460,"../parser":476,"../utils":481,"./analysis":462,"./base-class":463,"./base-token":464,"./comment":465,"./root-token":471,"./sub-token":473,"./token":474,"./update":475,"underscore":502}],473:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const BaseToken = require('./base-token');

class SubToken extends BaseToken {
  constructor(sent, serial) {

    super(sent, 'SubToken', serial);

  }
}

module.exports = SubToken;

},{"../utils":481,"./base-token":464,"underscore":502}],474:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const BaseToken = require('./base-token');
const Analysis = require('./analysis');

class Token extends BaseToken {
  constructor(sent, serial) {

    super(sent, 'Token', serial);

    this._analyses = (serial.analyses || []).map(ana => new Analysis(sent, ana));
    this._i = (this._analyses.length ? 0 : null);

  }

  get analysis() {
    if (this._i === null)
      return null;

    return this._analyses[this._i];
  }

  get subTokens() {
    return this.analysis ? this.analysis.subTokens : [];
  }
}

module.exports = Token;

},{"../utils":481,"./analysis":462,"./base-token":464,"underscore":502}],475:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('../utils');
const NxError = utils.NxError;
const formats = require('../formats');
const detect = require('../detector');

function debug(show, ...args) {
  if (show)
    console.log('d>', ...args);
}

function compareFields(fields, t1, t2, maxDistance) {
  debug(false, `comparing fields at maxDistance: ${maxDistance}`);


  /*
  const compare = field => {
    debug(false, `comparing "${field}" (${t1[field]}, ${t2[field]})`);

    if (field === 'analyses' && (t1._analyses || t2._analyses)) {

      console.log('analyses', t1.analyses === t2.analyses, t1._analyses);

    } else if (field === 'head') {

      let unmatched = {
        old: new Set(),
        new: new Set(),
      };
      let matched = {
        old: new Set(),
        new: new Set(),
      };
      t1.mapHeads((h1, d1) => {
        t2.mapHeads((h2, d2) => {

        });
      });

      console.log('head', t1._heads.toString('serial', 'dep'), t2._heads.toString('serial', 'dep'));

    } else if (field === 'deps') {

      console.log('deps', t1._deps.toString('serial', 'dep'), t2._deps.toString('serial', 'dep'));

    } else if (t1[field] !== t2[field]) {
      if (field === 'analyses') {

        console.log(t1.analyses, t2.analyses)

      }
      //console.log(field, t1.indices.absolute, t2.indices.absolute)
      distance += 1;
    }
  }
  */

  var distance = 0;

  fields = fields.filter(field => t1[field] !== undefined);
  const combinations = utils.combine(fields, fields.length - maxDistance);

  [].forEach(combination => {

  });

  return distance;

  console.log(fields, utils.combine(fields, fields.length - maxDistance));

  const h1 = t1.hashFields(fields, 'indices'),
    h2 = t2.hashFields(fields, 'indices');

  if (h1 === h2)
    return true;

  console.log();
  console.log('h1', h1);
  console.log('h2', h2);
  console.log();
  return false;

  debug(false, `distance: ${distance}`)
  return distance <= maxDistance;
}

function compareIndices(_arg, t1, t2, maxDistance) {
  debug(false, `comparing fields at maxDistance: ${maxDistance}`);

  let distance = 0;
  ['conllu', 'cg3', 'cytoscape', 'absolute'].forEach(indexName => {

    debug(false, `comparing "${indexName}" (${t1.indices[indexName]}, ${t2.indices[indexName]})`);
    if (t1.indices[indexName] !== t2.indices[indexName])
      distance += 1;

  });

  debug(false, `distance: ${distance}`)
  return distance <= maxDistance;
}

function updateToken(fields, t1, t2) {
  debug(false, `updating`);

  fields.forEach(field => {
    debug(false, `trying to update "${field}"`);

    switch (field) {
      case ('subTokens'):
        if (t1.subTokens.length || t2.subTokens.length) {
          throw new Error('not implemented');
        } else {
          // pass
        }
        break;

      default:
        debug(false, `updating (${t1[field]} => ${t2[field]})`);
        t1[field] = t2[field];
    }
  });
}




























function getDistance(fields, t1, t2) {

  fields = fields.filter(field => t1[field] !== undefined);
  for (let dist=0; dist<fields.length; dist++) {

    let match = false;
    utils.combine(fields, fields.length - dist).forEach(comb => {

      const hash1 = t1.hashFields(comb),
        hash2 = t2.hashFields(comb);

      if (hash1 === hash2)
        match = true;
    });

    if (match)
      return dist;
  }
  return Infinity;
}

function getMatches(s, t, ...fields) {

  fields = _.flatten(fields);

  let s_unmatched = new Set((s.map(token => `${token.indices.absolute}`)));
  let t_unmatched = new Set((t.map(token => `${token.indices.absolute}`)));

  // build distances between nodes
  let rawDistances = {};
  s.forEach(t1 => {

    const i1 = t1.indices.absolute;
    rawDistances[i1] = {};

    t.forEach(t2 => {

      const i2 = t2.indices.absolute;
      rawDistances[i1][i2] = getDistance(fields, t1, t2);

    });
  });

  //console.log(rawDistances);

  let neighbors = {};
  _.each(rawDistances, (targets, source) => {

    neighbors[source] = [];

    let min = Infinity;
    _.each(targets, distance => {
      min = Math.min(distance, min);
    });
    if (min < Infinity)
      _.each(targets, (distance, target) => {
        if (distance === min)
          neighbors[source].push(target);
      });

  });

  //console.log(neighbors);

  const lookup = (prefix, index) => key[`${prefix}_${index}`];

  let matches = new Set();

  _.each(neighbors, (neighbors, index) => {
    if (neighbors.length === 1) {

      matches.add([`${index}`, `${neighbors[0]}`]);
      s_unmatched.delete(`${index}`);
      t_unmatched.delete(`${neighbors[0]}`);

    }
  });

  return {
    matches,
    s_unmatched,
    t_unmatched,
  };
}

function updateMatches(s_key, t_key, matches, fields) {

  matches.forEach(match => {

    const s_token = s_key[match[0]];
    const t_token = t_key[match[1]];
    //console.log('updating', match[0], match[1]);

    fields.forEach(field => {

      switch (field) {
        case ('analyses'):

          //console.log('begin analyses evaluations');
          if (s_token._analyses === undefined || t_token.analyses === undefined)
            break;

          let s_analyses = s_token._analyses.slice();
          let t_analyses = t_token._analyses.slice();

          for (let i = 0; i<s_analyses.length; i++)
            matchAndUpdate(
              s_key,
              s_analyses[i]._subTokens,
              t_key,
              t_analyses[i]._subTokens,
              fields);
          //console.log('end anlyses evaluations');

          break;

        case ('subTokens'):

          //console.log('begin subToken evaluations');
          if (s_token._analyses === undefined || t_token.analyses === undefined)
            break;

          let s = s_token.subTokens.slice();
          let t = t_token.subTokens.slice();
          matchAndUpdate(s_key, s, t_key, t, fields);
          //console.log('end subToken evaluations');

          break;

        default:
          //if (s_token[field] !== t_token[field])
            //console.log('change!!!', field, s_token[field], t_token[field]);
          s_token[field] = t_token[field];
      }
    });
  });
}

function matchAndUpdate(s_key, s, t_key, t, fields) {

  //console.log('matching on fields');
  let m = getMatches(s, t, fields);
  //console.log(m);
  updateMatches(s_key, t_key, m.matches, fields);

  if (m.s_unmatched.size || m.t_unmatched.size) {

    let s = [], t = [];

    m.s_unmatched.forEach(i => s.push(s_key[i]));
    m.t_unmatched.forEach(i => t.push(t_key[i]));

    //console.log('matching on fields and indices')
    const m2 = getMatches(s, t, fields, 'indices');
    //console.log(m2);
    updateMatches(s_key, t_key, m2.matches, fields);

    if (m2.s_unmatched.size || m2.t_unmatched.size) {

      throw new Error('unable to find match')

    }
  }
}

module.exports = (original, update, options) => {

  debug(false, 'original input:', original.input);
  debug(false, 'update input:', update.input);

  // the input format of the new guy
  let format = detect(update.input, _.extend({
    requireOneFormat: true,
  }, options));
  debug(false, 'detected update as format:', format);
  format = formats[format];

  /*
  let unmatched = {
    old: new Set(),
    new: new Set(),
  };
  let matched = {
    old: new Set(),
    new: new Set(),
  };
  */

  if (format.hasComments) {
    debug(false, '\n\ncomparing comments\n');
    let i = 0, j = 0;
    while (data.comments.new.unmatched.size) {

      throw new Error('not implemented');

      /*
      const s1Comment = this.comments[i];
      const s2Comment = sent.comments[i];

      if (commentsEqual(s1Comment, s2Comment)) {
        throw new Error('not implemented')
      } else {
        throw new Error('not implemented')
      }
      */
    }
  } else {
    debug(false, 'using original comments');
    // don't change anything
  }









  // build a hash table and a list of tokens for each sentence
  let s_key = {}, s = [], t_key = {}, t = [];

  original.iterate(token => {

    s_key[token.indices.absolute] = token;
    s.push(token);

  });
  update.iterate(token => {

    t_key[token.indices.absolute] = token;
    t.push(token)

  });

  // try to find matches between the items
  matchAndUpdate(s_key, s, t_key, t, format.fields);

  return;


};










/*

  const iterate = (predicate, dist) => {
    debug(true, 'iterating at distance', dist);

    original.iterate(t1 => {
      update.iterate(t2 => {

        if (!matched.old.has(t1) && !matched.new.has(t2))
          if (predicate(format.fields, t1, t2, dist)) {

            debug(false, 'same', t1.form, t2.form);
            matched.old.add(t1);
            matched.new.add(t2);
            unmatched.old.delete(t1);
            unmatched.new.delete(t2);
            updateToken(format.fields, t1, t2);

          } else {

            debug(false, 'different', t1.form, t2.form);
            unmatched.old.add(t1);
            unmatched.new.add(t2);

          }

      });
    });
  };

  debug(false, )
  debug(true, `comparing tokens on fields to find exact matches`);
  iterate(compareFields, 0);

  if (!unmatched.old.size && !unmatched.new.size)
    return;

  debug(false, )
  debug(true, `comparing tokens on fields to find close matches`);
  for (let i=1; i<format.fields.length; i++) {

    iterate(compareFields, i);
    if (!unmatched.old.size && !unmatched.new.size)
      return;

  }

  unmatched.old.forEach(e => debug(true, e.indices));
  unmatched.new.forEach(e => debug(true, e.indices));

  debug(false, )
  debug(true, `comparing tokens on indices to find close matches`);
  for (let i=0; i<4; i++) {

    iterate(compareIndices, i);
    if (!unmatched.old.size && !unmatched.new.size)
      return;

  }

  debug(true, unmatched);
  throw new Error('can\'t find a match');
};

  /*

  let distance = 0;
  while (data.tokens.new.unmatched.size) {
    debug()
    debug(`\tevaluating at maxDistance: ${distance}`);
    debug()

    for (let i=0; i<data.old.tokens.length; i++) {
      for (let j=0; j<data.new.tokens.length; j++) {

        if (data.tokens.old.unmatched.has(i) && data.tokens.new.unmatched.has(j))
          if (compareFields(data, i, j, distance)) {
            debug('same');

            data.tokens.old.unmatched.delete(i);
            data.tokens.old.matched.add(i);
            data.tokens.new.unmatched.delete(j);
            data.tokens.new.matched.add(j);

            updateToken(data, i, j);

          } else {
            debug('different');
          }

      }
    }

    distance++;
  }

  return data;
};


/*


// some helper functions

function commentsEqual(c1, c2) {
  throw new Error('not implemented');
}

function tokensIdentical(t1, t2) {

  let matches = 0,
    mismatches = 0;

  newFormat.fields.forEach(field => {

    debug(`comparing "${field}" (1: "${t1[field]}", 2: "${t2[field]}")`);
    if (t1[field] === t2[field]) {
      matches += 1;
    } else {
      mismatches += 1;
    }
  });

  debug(matches, mismatches);

  if (matches > 0 && mismatches === 0) {
    debug('tokens equal')
    return true;
  }
}

function updateToken(t1, t2) {
  newFormat.fields.forEach(field => {
    debug(`updating "${field}" : "${t1[field]}" => "${t2[field]}"`)
    t1[field] = t2[field];
  });
}


// the new guy

const numComments = Math.max(this.comments.length, sent.comments.length);
if (newFormat.hasComments) {
  debug('comparing comments');
  for (let i=0; i<numTokens; i++) {
    const s1Comment = this.comments[i];
    const s2Comment = sent.comments[i];

    if (commentsEqual(s1Comment, s2Comment)) {
      throw new Error('not implemented')
    } else {
      throw new Error('not implemented')
    }
  }
} else {
  debug('using original comments');
  // don't change anything
}

debug('comparing tokens');
const numTokens = Math.max(this.tokens.length, sent.tokens.length);
let i1 = 0,
  oldMatches = new Set();
  i2 = 0,
  newMatches = new Set();

while (i1 < numTokens && i2 < numTokens) {

  const t1 = this.tokens[i1];
  const t2 = sent.tokens[i2];

  if (tokensIdentical(t1, t2)) {

    debug(`updating (${i1}, ${i2})`);
    oldMatches.add(i1);
    newMatches.add(i2);
    updateToken(t1, t2);

  } else {



  }

  i1++;
  i2++;
}


*/

},{"../detector":406,"../formats":432,"../utils":481,"underscore":502}],476:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('./utils');
const ParserError = utils.ParserError;

let as = {

	'apertium stream': require('./formats/apertium-stream').parse,
  apertiumStream: require('./formats/apertium-stream').parse,
  Brackets: require('./formats/brackets').parse,
  brackets: require('./formats/brackets').parse,
  CG3: require('./formats/cg3').parse,
  cg3: require('./formats/cg3').parse,
  'CoNLL-U': require('./formats/conllu').parse,
  conllu: require('./formats/conllu').parse,
  'notatrix serial': require('./formats/notatrix-serial').parse,
  notatrixSerial: require('./formats/notatrix-serial').parse,
  Params: require('./formats/params').parse,
  params: require('./formats/params').parse,
  'plain text': require('./formats/plain-text').parse,
  plainText: require('./formats/plain-text').parse,
	SD: require('./formats/sd').parse,
  sd: require('./formats/sd').parse,

};

module.exports = (text, options) => {

	options = _.defaults(options, {
    suppressDetectorErrors: true,
		suppressParserErrors: true,
		returnAllPossibilities: true,
		requireOne: false,
  });

	const possibilities = utils.formats.map(format => {

		try {
			return as[format](text, options);
		} catch (e) {

			if (e instanceof ParserError && options.suppressParserErrors)
				return;

			throw e;
		}

	}).filter(utils.thin);

	if (!possibilities.length && !options.suppressDetectorErrors)
		throw new ParserError('Unable to detect format', text, options);

	if (options.requireOne && possibilities.length > 1)
		throw new ParserError('Unable to detect, ambiguous input');

	return options.returnAllPossibilities ? possibilities : possibilities[0];

};
module.exports.as = as;

},{"./formats/apertium-stream":410,"./formats/brackets":417,"./formats/cg3":423,"./formats/conllu":429,"./formats/notatrix-serial":437,"./formats/params":444,"./formats/plain-text":451,"./formats/sd":458,"./utils":481,"underscore":502}],477:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const utils = require('./utils');
const defaultSplitter = require('./formats/default-splitter');
const detector = require('./detector');
const SplitterError = utils.SplitterError;

let as = {

	'apertium stream': require('./formats/apertium-stream').split,
  apertiumStream: require('./formats/apertium-stream').split,
  Brackets: require('./formats/brackets').split,
  brackets: require('./formats/brackets').split,
  CG3: require('./formats/cg3').split,
  cg3: require('./formats/cg3').split,
  'CoNLL-U': require('./formats/conllu').split,
  conllu: require('./formats/conllu').split,
  'notatrix serial': require('./formats/notatrix-serial').split,
  notatrixSerial: require('./formats/notatrix-serial').split,
  Params: require('./formats/params').split,
  params: require('./formats/params').split,
  'plain text': require('./formats/plain-text').split,
  plainText: require('./formats/plain-text').split,
	SD: require('./formats/sd').split,
  sd: require('./formats/sd').split,

};

module.exports = (text, options) => {

	let fromDefault = new Set();
	const splitAsDefault = defaultSplitter(text, options);
	splitAsDefault.forEach(line => {
		detector(line, options).forEach(format => fromDefault.add(format));
	});

	let fromPlainText = new Set();
	const splitAsPlainText = as.plainText(text, options);
	splitAsPlainText.forEach(line => {
		detector(line, options).forEach(format => fromPlainText.add(format));
	});

	if (fromDefault.size !== 1
		&& fromPlainText.size === 1
		&& fromPlainText.has('plain text'))
		return splitAsPlainText;

	return splitAsDefault;
};
module.exports.as = as;
module.exports.onNewlines = require('./formats/default-splitter');

},{"./detector":406,"./formats/apertium-stream":410,"./formats/brackets":417,"./formats/cg3":423,"./formats/conllu":429,"./formats/default-splitter":431,"./formats/notatrix-serial":437,"./formats/params":444,"./formats/plain-text":451,"./formats/sd":458,"./utils":481,"underscore":502}],478:[function(require,module,exports){
'use strict';

module.exports = {

  fields: [
    'index',
    'form',
    'lemma',
    'upostag',
    'xpostag',
    'feats',
    'head',
    'deprel',
    'deps',
    'misc'
  ],

  formats: [
    //'apertium stream',
    'Brackets',
    'CG3',
    'CoNLL-U',
    'notatrix serial',
    'Params',
    'plain text',
    'SD'
  ],

  nxSentenceFields: {
    input: 'string',
    options: 'object',
    comments: 'array',
    tokens: 'array',
  },

  nxSentenceTokensFields: {
    semicolon: 'boolean',
    isEmpty: 'boolean',
    index: 'number',
    form: 'string*',
    lemma: 'string*',
    upostag: 'string*',
    xpostag: 'string*',
    feats: 'array',
    heads: 'array',
    analyses: 'array',
  },

  nxAllOptions: {

  },

  fallback: '_',

  hexConstant: 16777215, // = 0xffffff

};

},{}],479:[function(require,module,exports){
'use strict';

class NotatrixError extends Error {
  constructor(...args) {
    super(...args);
  }
}

class InvalidCG3Error extends NotatrixError {
  constructor(...args) {
    super(...args);
  }
}

class InvalidCoNLLUError extends NotatrixError {
  constructor(...args) {
    super(...args);
  }
}


class ToolError extends NotatrixError {
  constructor(...args) {
    super(...args);
  }
}

class SplitterError extends ToolError {
  constructor(message, text, options) {
    super(message);

    this.name = 'SplitterError';
    this.text = text;
    this.options = options;
  }
}

class DetectorError extends ToolError {
  constructor(message, text, options) {
    super(message);

    this.name = 'DetectorError';
    this.text = text;
    this.options = options;
  }
}

class ParserError extends ToolError {
  constructor(message, text, options) {
    super(message);

    this.name = 'ParserError';
    this.text = text;
    this.options = options;
  }
}

class GeneratorError extends ToolError {
  constructor(message, nx, options) {
    super(message);

    this.name = 'GeneratorError';
    this.nx = nx;
    this.options = options;
  }
}

class ConverterError extends ToolError {
  constructor(message) {
    super(message);

    this.name = 'ConverterError';
  }
}



class NxError extends NotatrixError {
  constructor(...args) {
    super(...args);
    this.name = 'NxError';
  }
}



module.exports = {

  NotatrixError,
  InvalidCG3Error,
  InvalidCoNLLUError,

  ToolError,
  SplitterError,
  DetectorError,
  ParserError,
  GeneratorError,
  ConverterError,

  NxError,

};

},{}],480:[function(require,module,exports){
'use strict';

const _ = require('underscore');
const constants = require('./constants');
const re = require('./regex');

function combine(arr, k) {

  if (k > arr.length || k <= 0)
    return [];

  if (k === arr.length)
    return [arr];

  if (k === 1)
    return arr.map(e => [e]);

  let combs = [];
  for (let i = 0; i < arr.length - k + 1; i++) {

    const head = arr.slice(i, i+1);
    const tailCombs = combine(arr.slice(i+1), k-1);
    tailCombs.forEach(tailComb => {
      combs.push(head.concat(tailComb));
    });

  }
  return combs;
}

function hexToRGB(hex) {
  const match = hex.match(re.hexColor);

  if (match)
    return [
      parseInt(match[1], 16),
      parseInt(match[2], 16),
      parseInt(match[3], 16)
    ];
}

module.exports = {

  isJSONSerializable: obj => {

    if (typeof obj === 'string') {

      try {
        JSON.parse(obj);
      } catch (e) {
        return false;
      }

    } else {

      try {
        JSON.stringify(obj);
      } catch (e) {
        return false;
      }

    }

    return true;
  },

  noop: arg => arg,

  thin: arg => !!arg ? arg : undefined,

  combine,

  guessDeprel: (dependent, head, context) => undefined,

  dedup: (master, slave) => {

    let dedup = {};

    _.each(slave, (value, key) => {
      if (master[key] !== value)
        dedup[key] = value;
    });

    return dedup;
  },

  hashStringToHex: string => {
    let hash = 0;
    for (let i=0; i<string.length; i++) {
      hash = string.charCodeAt(i) + ((hash << 5) - hash);
    }

    let hex = '';
    for (let i=0; i<3; i++) {
      const value = (hash >> (i*8)) & 0xFF;
      hex += ('00' + value.toString(16)).substr(-2);
    }
    return hex;
  },

  getRandomHexColor: () => {

    let color = '';
    do {
      color = Math.floor(Math.random()*constants.hexConstant).toString(16);
    } while (color.length !== 7);

    return color;
  },

  hexToRGB,

  getContrastingColor: background => {

    let color = 'ffffff';

    const rgb = hexToRGB(background);
    if (!rgb)
      return color;

    const [r, g, b] = rgb;
    if ((r**2 + g**2 + b**2) > ((255-r)**2 + (255-g)**2 + (255-b)**2))
      color = '000000';

    return color;
  },

};

},{"./constants":478,"./regex":482,"underscore":502}],481:[function(require,module,exports){
'use strict';

const _ = require('underscore');

const constants = require('./constants');
const errors = require('./errors');
const funcs = require('./funcs');
const regex = require('./regex');

module.exports = _.extend({ re: regex }, errors, constants, funcs);

},{"./constants":478,"./errors":479,"./funcs":480,"./regex":482,"underscore":502}],482:[function(require,module,exports){
module.exports = {

  multiNewlines: /\n{2,}/g,
  punctuation: /[.,!?;]+/g,
  allPunctuation: /^[.,!?;]+$/,
  sentenceThenPunctuation: /([^.!?]*[.!?]*)/g,
  spaceBeforePunctuation: /\s+([.,!?;]+)/g,
  comment: /^(#\s*(.*))(\n|$)/,
  conlluTokenLine: /^((\d+(\.\d+)?)(\-(\d+(\.\d+)?))?)(.+)/,
  conlluTokenLineTenParams: /^((\d+(\.\d+)?)(\-(\d+(\.\d+)?))?)((\s+\S+){8,9})/,
  conlluEmptyIndex: /^(\d+)(\.\d+)?/,
  cg3TokenStart: /^["']<((.|\\")*)>["']/,
  cg3TokenContent: /^(;?)(\s+)"((.|\\")*)"((\s+[\w@#\->:=]+)*)/,
  cg3Dependency: /#?\d+(->\d*)?$/,
  cg3Head: /#\d+->(\d*)$/,
  cg3Index: /#(\d+)/,
  cg3Deprel: /\s@([\w:]*)/,
  cg3Other: /([^;].*(:.+)?)/,
  whitespace: /(\s+)/,
  whiteline: /^(\s*)(\n|$)/,
  sdDependency: /^\s*([\w.]+)\(([\w.]+),\s*([\w.]+)\)\s*$/,
  sdDependencyNoWhitespace: /^([\w.]+)\(([\w.]+),\s*([\w.]+)\)$/,
  fallback: /^_$/,
  commentLabel: /(\s*)(labels?|tags?)\s*=\s*(\w.*)/,
  commentSentId: /(\s*)sent.?id\s*=\s*(\w*)/i,

  hexColor: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
  hexColorSixDigit: /^#?([a-f\d]{6})/i,

};

},{}],483:[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],484:[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],485:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":486}],486:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],487:[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

},{"./manager":488,"./socket":490,"./url":491,"debug":492,"socket.io-parser":495}],488:[function(require,module,exports){

/**
 * Module dependencies.
 */

var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

},{"./on":489,"./socket":490,"backo2":39,"component-bind":47,"component-emitter":48,"debug":492,"engine.io-client":374,"indexof":392,"socket.io-parser":495}],489:[function(require,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}

},{}],490:[function(require,module,exports){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var parseqs = require('parseqs');
var hasBin = require('has-binary2');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};

},{"./on":489,"component-bind":47,"component-emitter":48,"debug":492,"has-binary2":388,"parseqs":483,"socket.io-parser":495,"to-array":501}],491:[function(require,module,exports){
(function (global){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"debug":492,"parseuri":484}],492:[function(require,module,exports){
arguments[4][383][0].apply(exports,arguments)
},{"./debug":493,"_process":486,"dup":383}],493:[function(require,module,exports){
arguments[4][384][0].apply(exports,arguments)
},{"dup":384,"ms":394}],494:[function(require,module,exports){
(function (global){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');
var toString = Object.prototype.toString;
var withNativeBlob = typeof global.Blob === 'function' || toString.call(global.Blob) === '[object BlobConstructor]';
var withNativeFile = typeof global.File === 'function' || toString.call(global.File) === '[object FileConstructor]';

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./is-buffer":496,"isarray":499}],495:[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}

},{"./binary":494,"./is-buffer":496,"component-emitter":48,"debug":497,"isarray":499}],496:[function(require,module,exports){
(function (global){

module.exports = isBuf;

var withNativeBuffer = typeof global.Buffer === 'function' && typeof global.Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof global.ArrayBuffer === 'function';

var isView = (function () {
  if (withNativeArrayBuffer && typeof global.ArrayBuffer.isView === 'function') {
    return global.ArrayBuffer.isView;
  } else {
    return function (obj) { return obj.buffer instanceof global.ArrayBuffer; };
  }
})();

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && global.Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof global.ArrayBuffer || isView(obj)));
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],497:[function(require,module,exports){
arguments[4][383][0].apply(exports,arguments)
},{"./debug":498,"_process":486,"dup":383}],498:[function(require,module,exports){
arguments[4][384][0].apply(exports,arguments)
},{"dup":384,"ms":394}],499:[function(require,module,exports){
arguments[4][389][0].apply(exports,arguments)
},{"dup":389}],500:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":486,"timers":500}],501:[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],502:[function(require,module,exports){
(function (global){
//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],503:[function(require,module,exports){
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([bth[buf[i++]], bth[buf[i++]], 
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]], '-',
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]],
	bth[buf[i++]], bth[buf[i++]]]).join('');
}

module.exports = bytesToUuid;

},{}],504:[function(require,module,exports){
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

},{}],505:[function(require,module,exports){
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

},{"./lib/bytesToUuid":503,"./lib/rng":504}],506:[function(require,module,exports){
'use strict';

var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;

},{}]},{},[26])(26)
});
